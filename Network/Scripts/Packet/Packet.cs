// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Network.Packet {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Packet {

    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Packet() {
      Descriptor = null;
    }
    #endregion

  }
  #region Enums
  public enum ErrorCode {
    kOK = 100,
    kUnknown = 101,
    kFieldMissing = 102,
    kBadPacket = 103,
    kNotConnectedServer = 104,
    kVersionMismatch = 105,
    kNotSupported = 106,
    kUnauthorized = 107,
    kTransectionError = 108,
    kNotReached = 109,
  }

  public enum RequestCommandHandle {
    kCommandLobby_BindUsername = 10,
    kCommandLobby_SelectCharacter = 15,
    kCommandLobby_ReadyState = 20,
    kCommandLobby_StartAsSquadLeader = 25,
    kCommandSceneChanging_SceneLoadComplete = 40,
    kCommandSceneChanging_ReadyToStart = 50,
    kCommandChat_SendMessage = 70,
    kCheatRequest = 100,
  }

  public enum RequestHandle {
    kRequestError = 10,
    kRequestCommand = 100,
    kUpdateInput = 110,
    kRequestItemObjectObtainData = 150,
    kRequestItemObjectDropWeapon = 151,
    kRequestSwapWeapon = 152,
    kRequestTryObtainCheckPointItem = 155,
    kRequestWeaponEquipWeapon = 160,
    kTitleInput = 190,
    kClientReadyToStart = 200,
    kPlayerMovement = 401,
    kPlayerShoot = 402,
  }

  public enum CheatCodeType {
    kNone = 1,
    kRegenHp = 10,
  }

  public enum ResponseCommandHandle {
    kCommandServerOperationResult = 5,
    kCommandSessionDenied = 10,
    kCommandSuccessToJoinTheGame = 15,
    kCommandResponseInitialData = 20,
    kCommandServerSceneLoading = 50,
    kCommandServerSceneLoadComplete = 51,
    kCommandStartGame = 60,
    kCommandChatMessage = 70,
    kCommandPooriScript = 80,
  }

  public enum ResponseHandle {
    kResponseError = 10,
    kUserSessionCommand = 11,
    kResponseDeniedServerNotReady = 20,
    kResponseCommand = 100,
    kUserDisconnected = 115,
    kLogMessage = 120,
    kUpdateEntitySpawnData = 200,
    kUpdateEntityStatesData = 210,
    kUpdateEntityTransformData = 220,
    kUpdateEntityActionData = 250,
    kUpdateDetectorActionData = 260,
    kUpdateLocatorActionData = 300,
    kUpdateLocatorStateData = 310,
    kUpdateItemObjectActionData = 400,
    kUpdateItemObjectStateData = 410,
    kRemotePlayCinema = 440,
    kDevUpdateInput = 510,
    kServerClosed = 1000,
  }

  public enum EntityType {
    kNoneEntityType = 1,
    kHumanoid = 10000,
    kTestPlayer = 10001,
    kPlayerGriffin = 10010,
    kPlayerPoopu = 10011,
    kPlayerClo = 10012,
    kPlayerDerin = 10013,
    kLastPlayerEntity = 10099,
    kEnemyHumanoidTestTurret = 10101,
    kEnemyHumanoidHealTurret = 10102,
    kWisp = 10200,
    kMob = 20000,
    kTestMob = 20001,
    kMagicBore = 20005,
    kTurret = 20010,
    kSpirit = 20015,
    kWeapon = 30000,
    kRocketWeapon = 30001,
    kMagicStick = 30010,
    kBioticRecovery = 30020,
    kWeaponKatana = 30100,
    kRayStick = 30200,
    kLightningStick = 30201,
    kKeyOfWisdom = 30202,
    kReflectSword = 30300,
    kStructure = 40000,
    kStructureMagicStoneA = 40010,
    kStructureMagicStoneB = 40020,
    kStructureMagicStoneC = 40030,
    kStructureWaveBlockingStone = 40040,
    kStructureBossStoneConePhase_1 = 40100,
    kStructureBossStoneConePhase_2 = 40110,
    kStructureBossWaveRock = 40120,
  }

  public enum ItemType {
    kNoneItemType = 1,
    kFirstNormal = 10000,
    kLastNormal = 29999,
    kFirstWeapon = 30000,
    kRangedWeapon = 30001,
    kWeaponWiseMansWand = 30010,
    kWeaponHellishMace = 30020,
    kWeaponKeyOfWisdom = 30030,
    kWeaponRayStick = 30040,
    kWeaponSpecialRangedWeapon = 39000,
    kWeaponLightningWand = 39010,
    kWeaponNobleSacrifice = 39020,
    kMeleeWeapon = 40000,
    kWeaponSwordOfTheWorldTree = 40010,
    kWeaponKatanaSword = 40020,
    kLastWeapon = 49999,
  }

  public enum FactionType {
    kNoneFactionType = 1,
    kNeutral = 2,
    kPlayer = 4,
    kEnemyFaction_1 = 8,
    kEnemyFaction_2 = 16,
    kEnemyFaction_3 = 32,
    kEnemyFaction_4 = 64,
  }

  public enum ObjectType {
    kNative = 1,
    kEntity = 3,
    kDetector = 4,
  }

  public enum ObjectActionType {
    kCreated = 3,
    kDestroyed = 4,
    kEventOccur = 5,
  }

  public enum DetectorType {
    kRocket = 1,
    kMagicBall = 10,
    kRecoveryBall = 15,
    kHitscanMagicBoreRush = 100,
    kHitscanKatana = 110,
    kHitscanRay = 120,
    kHitscanLightning = 121,
    kHitscanDelay = 122,
    kHitscanReflectSword = 130,
    BossRockWaveHitscan = 140,
    BossStoneConeSpawnHitscan = 150,
    BossStoneConeExplosionHitscan = 160,
    BossStrikeHitscan = 170,
  }

  public enum LocatorType {
    kNoneLocatorType = 1,
    kPredefined = 2,
    kTurretSpawn = 10,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::GeneratedMessageLite<Request, Request.Builder> {
    private Request() { }
    private static readonly Request defaultInstance = new Request().MakeReadOnly();
    private static readonly string[] _requestFieldNames = new string[] { "check_point_number", "handle", "pakcet_id", "request_client_ready_state", "request_entity_bind", "request_equip_weapon", "request_initial_data", "request_item_object_obtain_data", "request_title_input", "request_udp_connnect", "session_request_command_data", "swap_inventory_index", "update_input", "user_token" };
    private static readonly uint[] _requestFieldTags = new uint[] { 1240, 80, 160, 1602, 1122, 1282, 962, 1202, 1522, 722, 802, 1216, 882, 242 };
    public static Request DefaultInstance {
      get { return defaultInstance; }
    }

    public override Request DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Request ThisMessage {
      get { return this; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RequestUdpConnnect : pb::GeneratedMessageLite<RequestUdpConnnect, RequestUdpConnnect.Builder> {
        private RequestUdpConnnect() { }
        private static readonly RequestUdpConnnect defaultInstance = new RequestUdpConnnect().MakeReadOnly();
        private static readonly string[] _requestUdpConnnectFieldNames = new string[] { "message" };
        private static readonly uint[] _requestUdpConnnectFieldTags = new uint[] { 10 };
        public static RequestUdpConnnect DefaultInstance {
          get { return defaultInstance; }
        }

        public override RequestUdpConnnect DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RequestUdpConnnect ThisMessage {
          get { return this; }
        }

        public const int MessageFieldNumber = 1;
        private bool hasMessage;
        private string message_ = "";
        public bool HasMessage {
          get { return hasMessage; }
        }
        public string Message {
          get { return message_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _requestUdpConnnectFieldNames;
          if (hasMessage) {
            output.WriteString(1, field_names[0], Message);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasMessage) {
            size += pb::CodedOutputStream.ComputeStringSize(1, Message);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasMessage) {
            hash ^= message_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          RequestUdpConnnect other = obj as RequestUdpConnnect;
          if (other == null) return false;
          if (hasMessage != other.hasMessage || (hasMessage && !message_.Equals(other.message_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("message", hasMessage, message_, writer);
        }
        #endregion

        public static RequestUdpConnnect ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestUdpConnnect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestUdpConnnect ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestUdpConnnect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestUdpConnnect ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestUdpConnnect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RequestUdpConnnect ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RequestUdpConnnect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RequestUdpConnnect ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestUdpConnnect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RequestUdpConnnect MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RequestUdpConnnect prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<RequestUdpConnnect, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RequestUdpConnnect cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RequestUdpConnnect result;

          private RequestUdpConnnect PrepareBuilder() {
            if (resultIsReadOnly) {
              RequestUdpConnnect original = result;
              result = new RequestUdpConnnect();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RequestUdpConnnect MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override RequestUdpConnnect DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.RequestUdpConnnect.DefaultInstance; }
          }

          public override RequestUdpConnnect BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is RequestUdpConnnect) {
              return MergeFrom((RequestUdpConnnect) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RequestUdpConnnect other) {
            if (other == global::Network.Packet.Request.Types.RequestUdpConnnect.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasMessage) {
              Message = other.Message;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestUdpConnnectFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestUdpConnnectFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasMessage = input.ReadString(ref result.message_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasMessage {
            get { return result.hasMessage; }
          }
          public string Message {
            get { return result.Message; }
            set { SetMessage(value); }
          }
          public Builder SetMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMessage = true;
            result.message_ = value;
            return this;
          }
          public Builder ClearMessage() {
            PrepareBuilder();
            result.hasMessage = false;
            result.message_ = "";
            return this;
          }
        }
        static RequestUdpConnnect() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class SessionRequestCommandData : pb::GeneratedMessageLite<SessionRequestCommandData, SessionRequestCommandData.Builder> {
        private SessionRequestCommandData() { }
        private static readonly SessionRequestCommandData defaultInstance = new SessionRequestCommandData().MakeReadOnly();
        private static readonly string[] _sessionRequestCommandDataFieldNames = new string[] { "chat_message", "command", "ready_state", "request_cheat_code", "selected_character", "tick", "username" };
        private static readonly uint[] _sessionRequestCommandDataFieldTags = new uint[] { 242, 8, 80, 4000, 160, 16, 74 };
        public static SessionRequestCommandData DefaultInstance {
          get { return defaultInstance; }
        }

        public override SessionRequestCommandData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override SessionRequestCommandData ThisMessage {
          get { return this; }
        }

        public const int CommandFieldNumber = 1;
        private bool hasCommand;
        private global::Network.Packet.RequestCommandHandle command_ = global::Network.Packet.RequestCommandHandle.kCommandLobby_BindUsername;
        public bool HasCommand {
          get { return hasCommand; }
        }
        public global::Network.Packet.RequestCommandHandle Command {
          get { return command_; }
        }

        public const int TickFieldNumber = 2;
        private bool hasTick;
        private long tick_;
        public bool HasTick {
          get { return hasTick; }
        }
        public long Tick {
          get { return tick_; }
        }

        public const int UsernameFieldNumber = 9;
        private bool hasUsername;
        private string username_ = "";
        public bool HasUsername {
          get { return hasUsername; }
        }
        public string Username {
          get { return username_; }
        }

        public const int ReadyStateFieldNumber = 10;
        private bool hasReadyState;
        private bool readyState_;
        public bool HasReadyState {
          get { return hasReadyState; }
        }
        public bool ReadyState {
          get { return readyState_; }
        }

        public const int SelectedCharacterFieldNumber = 20;
        private bool hasSelectedCharacter;
        private global::Network.Packet.EntityType selectedCharacter_ = global::Network.Packet.EntityType.kNoneEntityType;
        public bool HasSelectedCharacter {
          get { return hasSelectedCharacter; }
        }
        public global::Network.Packet.EntityType SelectedCharacter {
          get { return selectedCharacter_; }
        }

        public const int ChatMessageFieldNumber = 30;
        private bool hasChatMessage;
        private string chatMessage_ = "";
        public bool HasChatMessage {
          get { return hasChatMessage; }
        }
        public string ChatMessage {
          get { return chatMessage_; }
        }

        public const int RequestCheatCodeFieldNumber = 500;
        private bool hasRequestCheatCode;
        private global::Network.Packet.CheatCodeType requestCheatCode_ = global::Network.Packet.CheatCodeType.kNone;
        public bool HasRequestCheatCode {
          get { return hasRequestCheatCode; }
        }
        public global::Network.Packet.CheatCodeType RequestCheatCode {
          get { return requestCheatCode_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _sessionRequestCommandDataFieldNames;
          if (hasCommand) {
            output.WriteEnum(1, field_names[1], (int) Command, Command);
          }
          if (hasTick) {
            output.WriteInt64(2, field_names[5], Tick);
          }
          if (hasUsername) {
            output.WriteString(9, field_names[6], Username);
          }
          if (hasReadyState) {
            output.WriteBool(10, field_names[2], ReadyState);
          }
          if (hasSelectedCharacter) {
            output.WriteEnum(20, field_names[4], (int) SelectedCharacter, SelectedCharacter);
          }
          if (hasChatMessage) {
            output.WriteString(30, field_names[0], ChatMessage);
          }
          if (hasRequestCheatCode) {
            output.WriteEnum(500, field_names[3], (int) RequestCheatCode, RequestCheatCode);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasCommand) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Command);
          }
          if (hasTick) {
            size += pb::CodedOutputStream.ComputeInt64Size(2, Tick);
          }
          if (hasUsername) {
            size += pb::CodedOutputStream.ComputeStringSize(9, Username);
          }
          if (hasReadyState) {
            size += pb::CodedOutputStream.ComputeBoolSize(10, ReadyState);
          }
          if (hasSelectedCharacter) {
            size += pb::CodedOutputStream.ComputeEnumSize(20, (int) SelectedCharacter);
          }
          if (hasChatMessage) {
            size += pb::CodedOutputStream.ComputeStringSize(30, ChatMessage);
          }
          if (hasRequestCheatCode) {
            size += pb::CodedOutputStream.ComputeEnumSize(500, (int) RequestCheatCode);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasCommand) {
            hash ^= command_.GetHashCode();
          }
          if (hasTick) {
            hash ^= tick_.GetHashCode();
          }
          if (hasUsername) {
            hash ^= username_.GetHashCode();
          }
          if (hasReadyState) {
            hash ^= readyState_.GetHashCode();
          }
          if (hasSelectedCharacter) {
            hash ^= selectedCharacter_.GetHashCode();
          }
          if (hasChatMessage) {
            hash ^= chatMessage_.GetHashCode();
          }
          if (hasRequestCheatCode) {
            hash ^= requestCheatCode_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          SessionRequestCommandData other = obj as SessionRequestCommandData;
          if (other == null) return false;
          if (hasCommand != other.hasCommand || (hasCommand && !command_.Equals(other.command_))) return false;
          if (hasTick != other.hasTick || (hasTick && !tick_.Equals(other.tick_))) return false;
          if (hasUsername != other.hasUsername || (hasUsername && !username_.Equals(other.username_))) return false;
          if (hasReadyState != other.hasReadyState || (hasReadyState && !readyState_.Equals(other.readyState_))) return false;
          if (hasSelectedCharacter != other.hasSelectedCharacter || (hasSelectedCharacter && !selectedCharacter_.Equals(other.selectedCharacter_))) return false;
          if (hasChatMessage != other.hasChatMessage || (hasChatMessage && !chatMessage_.Equals(other.chatMessage_))) return false;
          if (hasRequestCheatCode != other.hasRequestCheatCode || (hasRequestCheatCode && !requestCheatCode_.Equals(other.requestCheatCode_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("command", hasCommand, command_, writer);
          PrintField("tick", hasTick, tick_, writer);
          PrintField("username", hasUsername, username_, writer);
          PrintField("ready_state", hasReadyState, readyState_, writer);
          PrintField("selected_character", hasSelectedCharacter, selectedCharacter_, writer);
          PrintField("chat_message", hasChatMessage, chatMessage_, writer);
          PrintField("request_cheat_code", hasRequestCheatCode, requestCheatCode_, writer);
        }
        #endregion

        public static SessionRequestCommandData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SessionRequestCommandData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SessionRequestCommandData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SessionRequestCommandData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SessionRequestCommandData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SessionRequestCommandData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SessionRequestCommandData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SessionRequestCommandData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SessionRequestCommandData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SessionRequestCommandData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SessionRequestCommandData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SessionRequestCommandData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<SessionRequestCommandData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(SessionRequestCommandData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private SessionRequestCommandData result;

          private SessionRequestCommandData PrepareBuilder() {
            if (resultIsReadOnly) {
              SessionRequestCommandData original = result;
              result = new SessionRequestCommandData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override SessionRequestCommandData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override SessionRequestCommandData DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.SessionRequestCommandData.DefaultInstance; }
          }

          public override SessionRequestCommandData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is SessionRequestCommandData) {
              return MergeFrom((SessionRequestCommandData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(SessionRequestCommandData other) {
            if (other == global::Network.Packet.Request.Types.SessionRequestCommandData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.HasTick) {
              Tick = other.Tick;
            }
            if (other.HasUsername) {
              Username = other.Username;
            }
            if (other.HasReadyState) {
              ReadyState = other.ReadyState;
            }
            if (other.HasSelectedCharacter) {
              SelectedCharacter = other.SelectedCharacter;
            }
            if (other.HasChatMessage) {
              ChatMessage = other.ChatMessage;
            }
            if (other.HasRequestCheatCode) {
              RequestCheatCode = other.RequestCheatCode;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_sessionRequestCommandDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _sessionRequestCommandDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.command_, out unknown)) {
                    result.hasCommand = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 16: {
                  result.hasTick = input.ReadInt64(ref result.tick_);
                  break;
                }
                case 74: {
                  result.hasUsername = input.ReadString(ref result.username_);
                  break;
                }
                case 80: {
                  result.hasReadyState = input.ReadBool(ref result.readyState_);
                  break;
                }
                case 160: {
                  object unknown;
                  if(input.ReadEnum(ref result.selectedCharacter_, out unknown)) {
                    result.hasSelectedCharacter = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 242: {
                  result.hasChatMessage = input.ReadString(ref result.chatMessage_);
                  break;
                }
                case 4000: {
                  object unknown;
                  if(input.ReadEnum(ref result.requestCheatCode_, out unknown)) {
                    result.hasRequestCheatCode = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
              }
            }

            return this;
          }


          public bool HasCommand {
           get { return result.hasCommand; }
          }
          public global::Network.Packet.RequestCommandHandle Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(global::Network.Packet.RequestCommandHandle value) {
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = global::Network.Packet.RequestCommandHandle.kCommandLobby_BindUsername;
            return this;
          }

          public bool HasTick {
            get { return result.hasTick; }
          }
          public long Tick {
            get { return result.Tick; }
            set { SetTick(value); }
          }
          public Builder SetTick(long value) {
            PrepareBuilder();
            result.hasTick = true;
            result.tick_ = value;
            return this;
          }
          public Builder ClearTick() {
            PrepareBuilder();
            result.hasTick = false;
            result.tick_ = 0L;
            return this;
          }

          public bool HasUsername {
            get { return result.hasUsername; }
          }
          public string Username {
            get { return result.Username; }
            set { SetUsername(value); }
          }
          public Builder SetUsername(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUsername = true;
            result.username_ = value;
            return this;
          }
          public Builder ClearUsername() {
            PrepareBuilder();
            result.hasUsername = false;
            result.username_ = "";
            return this;
          }

          public bool HasReadyState {
            get { return result.hasReadyState; }
          }
          public bool ReadyState {
            get { return result.ReadyState; }
            set { SetReadyState(value); }
          }
          public Builder SetReadyState(bool value) {
            PrepareBuilder();
            result.hasReadyState = true;
            result.readyState_ = value;
            return this;
          }
          public Builder ClearReadyState() {
            PrepareBuilder();
            result.hasReadyState = false;
            result.readyState_ = false;
            return this;
          }

          public bool HasSelectedCharacter {
           get { return result.hasSelectedCharacter; }
          }
          public global::Network.Packet.EntityType SelectedCharacter {
            get { return result.SelectedCharacter; }
            set { SetSelectedCharacter(value); }
          }
          public Builder SetSelectedCharacter(global::Network.Packet.EntityType value) {
            PrepareBuilder();
            result.hasSelectedCharacter = true;
            result.selectedCharacter_ = value;
            return this;
          }
          public Builder ClearSelectedCharacter() {
            PrepareBuilder();
            result.hasSelectedCharacter = false;
            result.selectedCharacter_ = global::Network.Packet.EntityType.kNoneEntityType;
            return this;
          }

          public bool HasChatMessage {
            get { return result.hasChatMessage; }
          }
          public string ChatMessage {
            get { return result.ChatMessage; }
            set { SetChatMessage(value); }
          }
          public Builder SetChatMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasChatMessage = true;
            result.chatMessage_ = value;
            return this;
          }
          public Builder ClearChatMessage() {
            PrepareBuilder();
            result.hasChatMessage = false;
            result.chatMessage_ = "";
            return this;
          }

          public bool HasRequestCheatCode {
           get { return result.hasRequestCheatCode; }
          }
          public global::Network.Packet.CheatCodeType RequestCheatCode {
            get { return result.RequestCheatCode; }
            set { SetRequestCheatCode(value); }
          }
          public Builder SetRequestCheatCode(global::Network.Packet.CheatCodeType value) {
            PrepareBuilder();
            result.hasRequestCheatCode = true;
            result.requestCheatCode_ = value;
            return this;
          }
          public Builder ClearRequestCheatCode() {
            PrepareBuilder();
            result.hasRequestCheatCode = false;
            result.requestCheatCode_ = global::Network.Packet.CheatCodeType.kNone;
            return this;
          }
        }
        static SessionRequestCommandData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class UseWeaponData : pb::GeneratedMessageLite<UseWeaponData, UseWeaponData.Builder> {
        private UseWeaponData() { }
        private static readonly UseWeaponData defaultInstance = new UseWeaponData().MakeReadOnly();
        private static readonly string[] _useWeaponDataFieldNames = new string[] { "direction", "origin" };
        private static readonly uint[] _useWeaponDataFieldTags = new uint[] { 18, 10 };
        public static UseWeaponData DefaultInstance {
          get { return defaultInstance; }
        }

        public override UseWeaponData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override UseWeaponData ThisMessage {
          get { return this; }
        }

        public const int OriginFieldNumber = 1;
        private bool hasOrigin;
        private global::Network.Packet.Vector3Data origin_;
        public bool HasOrigin {
          get { return hasOrigin; }
        }
        public global::Network.Packet.Vector3Data Origin {
          get { return origin_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int DirectionFieldNumber = 2;
        private bool hasDirection;
        private global::Network.Packet.Vector2Data direction_;
        public bool HasDirection {
          get { return hasDirection; }
        }
        public global::Network.Packet.Vector2Data Direction {
          get { return direction_ ?? global::Network.Packet.Vector2Data.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _useWeaponDataFieldNames;
          if (hasOrigin) {
            output.WriteMessage(1, field_names[1], Origin);
          }
          if (hasDirection) {
            output.WriteMessage(2, field_names[0], Direction);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasOrigin) {
            size += pb::CodedOutputStream.ComputeMessageSize(1, Origin);
          }
          if (hasDirection) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, Direction);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasOrigin) hash ^= origin_.GetHashCode();
          if (hasDirection) hash ^= direction_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          UseWeaponData other = obj as UseWeaponData;
          if (other == null) return false;
          if (hasOrigin != other.hasOrigin || (hasOrigin && !origin_.Equals(other.origin_))) return false;
          if (hasDirection != other.hasDirection || (hasDirection && !direction_.Equals(other.direction_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("origin", hasOrigin, origin_, writer);
          PrintField("direction", hasDirection, direction_, writer);
        }
        #endregion

        public static UseWeaponData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UseWeaponData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UseWeaponData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UseWeaponData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UseWeaponData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UseWeaponData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static UseWeaponData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static UseWeaponData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static UseWeaponData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UseWeaponData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private UseWeaponData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(UseWeaponData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<UseWeaponData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(UseWeaponData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private UseWeaponData result;

          private UseWeaponData PrepareBuilder() {
            if (resultIsReadOnly) {
              UseWeaponData original = result;
              result = new UseWeaponData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override UseWeaponData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override UseWeaponData DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.UseWeaponData.DefaultInstance; }
          }

          public override UseWeaponData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is UseWeaponData) {
              return MergeFrom((UseWeaponData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(UseWeaponData other) {
            if (other == global::Network.Packet.Request.Types.UseWeaponData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasOrigin) {
              MergeOrigin(other.Origin);
            }
            if (other.HasDirection) {
              MergeDirection(other.Direction);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_useWeaponDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _useWeaponDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasOrigin) {
                    subBuilder.MergeFrom(Origin);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Origin = subBuilder.BuildPartial();
                  break;
                }
                case 18: {
                  global::Network.Packet.Vector2Data.Builder subBuilder = global::Network.Packet.Vector2Data.CreateBuilder();
                  if (result.hasDirection) {
                    subBuilder.MergeFrom(Direction);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Direction = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasOrigin {
           get { return result.hasOrigin; }
          }
          public global::Network.Packet.Vector3Data Origin {
            get { return result.Origin; }
            set { SetOrigin(value); }
          }
          public Builder SetOrigin(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasOrigin = true;
            result.origin_ = value;
            return this;
          }
          public Builder SetOrigin(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasOrigin = true;
            result.origin_ = builderForValue.Build();
            return this;
          }
          public Builder MergeOrigin(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasOrigin &&
                result.origin_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.origin_ = global::Network.Packet.Vector3Data.CreateBuilder(result.origin_).MergeFrom(value).BuildPartial();
            } else {
              result.origin_ = value;
            }
            result.hasOrigin = true;
            return this;
          }
          public Builder ClearOrigin() {
            PrepareBuilder();
            result.hasOrigin = false;
            result.origin_ = null;
            return this;
          }

          public bool HasDirection {
           get { return result.hasDirection; }
          }
          public global::Network.Packet.Vector2Data Direction {
            get { return result.Direction; }
            set { SetDirection(value); }
          }
          public Builder SetDirection(global::Network.Packet.Vector2Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDirection = true;
            result.direction_ = value;
            return this;
          }
          public Builder SetDirection(global::Network.Packet.Vector2Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasDirection = true;
            result.direction_ = builderForValue.Build();
            return this;
          }
          public Builder MergeDirection(global::Network.Packet.Vector2Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasDirection &&
                result.direction_ != global::Network.Packet.Vector2Data.DefaultInstance) {
                result.direction_ = global::Network.Packet.Vector2Data.CreateBuilder(result.direction_).MergeFrom(value).BuildPartial();
            } else {
              result.direction_ = value;
            }
            result.hasDirection = true;
            return this;
          }
          public Builder ClearDirection() {
            PrepareBuilder();
            result.hasDirection = false;
            result.direction_ = null;
            return this;
          }
        }
        static UseWeaponData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class InputData : pb::GeneratedMessageLite<InputData, InputData.Builder> {
        private InputData() { }
        private static readonly InputData defaultInstance = new InputData().MakeReadOnly();
        private static readonly string[] _inputDataFieldNames = new string[] { "jump_wish", "mouse_position", "movement_direction", "revive_wish", "use_weapon_data", "view_direction" };
        private static readonly uint[] _inputDataFieldTags = new uint[] { 176, 98, 82, 168, 162, 90 };
        public static InputData DefaultInstance {
          get { return defaultInstance; }
        }

        public override InputData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override InputData ThisMessage {
          get { return this; }
        }

        public const int MovementDirectionFieldNumber = 10;
        private bool hasMovementDirection;
        private global::Network.Packet.Vector2Data movementDirection_;
        public bool HasMovementDirection {
          get { return hasMovementDirection; }
        }
        public global::Network.Packet.Vector2Data MovementDirection {
          get { return movementDirection_ ?? global::Network.Packet.Vector2Data.DefaultInstance; }
        }

        public const int ViewDirectionFieldNumber = 11;
        private bool hasViewDirection;
        private global::Network.Packet.Vector2Data viewDirection_;
        public bool HasViewDirection {
          get { return hasViewDirection; }
        }
        public global::Network.Packet.Vector2Data ViewDirection {
          get { return viewDirection_ ?? global::Network.Packet.Vector2Data.DefaultInstance; }
        }

        public const int MousePositionFieldNumber = 12;
        private bool hasMousePosition;
        private global::Network.Packet.Vector3Data mousePosition_;
        public bool HasMousePosition {
          get { return hasMousePosition; }
        }
        public global::Network.Packet.Vector3Data MousePosition {
          get { return mousePosition_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int UseWeaponDataFieldNumber = 20;
        private bool hasUseWeaponData;
        private global::Network.Packet.Request.Types.UseWeaponData useWeaponData_;
        public bool HasUseWeaponData {
          get { return hasUseWeaponData; }
        }
        public global::Network.Packet.Request.Types.UseWeaponData UseWeaponData {
          get { return useWeaponData_ ?? global::Network.Packet.Request.Types.UseWeaponData.DefaultInstance; }
        }

        public const int ReviveWishFieldNumber = 21;
        private bool hasReviveWish;
        private bool reviveWish_;
        public bool HasReviveWish {
          get { return hasReviveWish; }
        }
        public bool ReviveWish {
          get { return reviveWish_; }
        }

        public const int JumpWishFieldNumber = 22;
        private bool hasJumpWish;
        private bool jumpWish_;
        public bool HasJumpWish {
          get { return hasJumpWish; }
        }
        public bool JumpWish {
          get { return jumpWish_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _inputDataFieldNames;
          if (hasMovementDirection) {
            output.WriteMessage(10, field_names[2], MovementDirection);
          }
          if (hasViewDirection) {
            output.WriteMessage(11, field_names[5], ViewDirection);
          }
          if (hasMousePosition) {
            output.WriteMessage(12, field_names[1], MousePosition);
          }
          if (hasUseWeaponData) {
            output.WriteMessage(20, field_names[4], UseWeaponData);
          }
          if (hasReviveWish) {
            output.WriteBool(21, field_names[3], ReviveWish);
          }
          if (hasJumpWish) {
            output.WriteBool(22, field_names[0], JumpWish);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasMovementDirection) {
            size += pb::CodedOutputStream.ComputeMessageSize(10, MovementDirection);
          }
          if (hasViewDirection) {
            size += pb::CodedOutputStream.ComputeMessageSize(11, ViewDirection);
          }
          if (hasMousePosition) {
            size += pb::CodedOutputStream.ComputeMessageSize(12, MousePosition);
          }
          if (hasUseWeaponData) {
            size += pb::CodedOutputStream.ComputeMessageSize(20, UseWeaponData);
          }
          if (hasReviveWish) {
            size += pb::CodedOutputStream.ComputeBoolSize(21, ReviveWish);
          }
          if (hasJumpWish) {
            size += pb::CodedOutputStream.ComputeBoolSize(22, JumpWish);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasMovementDirection) hash ^= movementDirection_.GetHashCode();
          if (hasViewDirection) hash ^= viewDirection_.GetHashCode();
          if (hasMousePosition) hash ^= mousePosition_.GetHashCode();
          if (hasUseWeaponData) hash ^= useWeaponData_.GetHashCode();
          if (hasReviveWish) {
            hash ^= reviveWish_.GetHashCode();
          }
          if (hasJumpWish) {
            hash ^= jumpWish_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          InputData other = obj as InputData;
          if (other == null) return false;
          if (hasMovementDirection != other.hasMovementDirection || (hasMovementDirection && !movementDirection_.Equals(other.movementDirection_))) return false;
          if (hasViewDirection != other.hasViewDirection || (hasViewDirection && !viewDirection_.Equals(other.viewDirection_))) return false;
          if (hasMousePosition != other.hasMousePosition || (hasMousePosition && !mousePosition_.Equals(other.mousePosition_))) return false;
          if (hasUseWeaponData != other.hasUseWeaponData || (hasUseWeaponData && !useWeaponData_.Equals(other.useWeaponData_))) return false;
          if (hasReviveWish != other.hasReviveWish || (hasReviveWish && !reviveWish_.Equals(other.reviveWish_))) return false;
          if (hasJumpWish != other.hasJumpWish || (hasJumpWish && !jumpWish_.Equals(other.jumpWish_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("movement_direction", hasMovementDirection, movementDirection_, writer);
          PrintField("view_direction", hasViewDirection, viewDirection_, writer);
          PrintField("mouse_position", hasMousePosition, mousePosition_, writer);
          PrintField("use_weapon_data", hasUseWeaponData, useWeaponData_, writer);
          PrintField("revive_wish", hasReviveWish, reviveWish_, writer);
          PrintField("jump_wish", hasJumpWish, jumpWish_, writer);
        }
        #endregion

        public static InputData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static InputData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static InputData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static InputData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static InputData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static InputData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static InputData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static InputData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static InputData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static InputData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private InputData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(InputData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<InputData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(InputData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private InputData result;

          private InputData PrepareBuilder() {
            if (resultIsReadOnly) {
              InputData original = result;
              result = new InputData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override InputData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override InputData DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.InputData.DefaultInstance; }
          }

          public override InputData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is InputData) {
              return MergeFrom((InputData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(InputData other) {
            if (other == global::Network.Packet.Request.Types.InputData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasMovementDirection) {
              MergeMovementDirection(other.MovementDirection);
            }
            if (other.HasViewDirection) {
              MergeViewDirection(other.ViewDirection);
            }
            if (other.HasMousePosition) {
              MergeMousePosition(other.MousePosition);
            }
            if (other.HasUseWeaponData) {
              MergeUseWeaponData(other.UseWeaponData);
            }
            if (other.HasReviveWish) {
              ReviveWish = other.ReviveWish;
            }
            if (other.HasJumpWish) {
              JumpWish = other.JumpWish;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_inputDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _inputDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 82: {
                  global::Network.Packet.Vector2Data.Builder subBuilder = global::Network.Packet.Vector2Data.CreateBuilder();
                  if (result.hasMovementDirection) {
                    subBuilder.MergeFrom(MovementDirection);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  MovementDirection = subBuilder.BuildPartial();
                  break;
                }
                case 90: {
                  global::Network.Packet.Vector2Data.Builder subBuilder = global::Network.Packet.Vector2Data.CreateBuilder();
                  if (result.hasViewDirection) {
                    subBuilder.MergeFrom(ViewDirection);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  ViewDirection = subBuilder.BuildPartial();
                  break;
                }
                case 98: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasMousePosition) {
                    subBuilder.MergeFrom(MousePosition);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  MousePosition = subBuilder.BuildPartial();
                  break;
                }
                case 162: {
                  global::Network.Packet.Request.Types.UseWeaponData.Builder subBuilder = global::Network.Packet.Request.Types.UseWeaponData.CreateBuilder();
                  if (result.hasUseWeaponData) {
                    subBuilder.MergeFrom(UseWeaponData);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  UseWeaponData = subBuilder.BuildPartial();
                  break;
                }
                case 168: {
                  result.hasReviveWish = input.ReadBool(ref result.reviveWish_);
                  break;
                }
                case 176: {
                  result.hasJumpWish = input.ReadBool(ref result.jumpWish_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasMovementDirection {
           get { return result.hasMovementDirection; }
          }
          public global::Network.Packet.Vector2Data MovementDirection {
            get { return result.MovementDirection; }
            set { SetMovementDirection(value); }
          }
          public Builder SetMovementDirection(global::Network.Packet.Vector2Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMovementDirection = true;
            result.movementDirection_ = value;
            return this;
          }
          public Builder SetMovementDirection(global::Network.Packet.Vector2Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasMovementDirection = true;
            result.movementDirection_ = builderForValue.Build();
            return this;
          }
          public Builder MergeMovementDirection(global::Network.Packet.Vector2Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasMovementDirection &&
                result.movementDirection_ != global::Network.Packet.Vector2Data.DefaultInstance) {
                result.movementDirection_ = global::Network.Packet.Vector2Data.CreateBuilder(result.movementDirection_).MergeFrom(value).BuildPartial();
            } else {
              result.movementDirection_ = value;
            }
            result.hasMovementDirection = true;
            return this;
          }
          public Builder ClearMovementDirection() {
            PrepareBuilder();
            result.hasMovementDirection = false;
            result.movementDirection_ = null;
            return this;
          }

          public bool HasViewDirection {
           get { return result.hasViewDirection; }
          }
          public global::Network.Packet.Vector2Data ViewDirection {
            get { return result.ViewDirection; }
            set { SetViewDirection(value); }
          }
          public Builder SetViewDirection(global::Network.Packet.Vector2Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasViewDirection = true;
            result.viewDirection_ = value;
            return this;
          }
          public Builder SetViewDirection(global::Network.Packet.Vector2Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasViewDirection = true;
            result.viewDirection_ = builderForValue.Build();
            return this;
          }
          public Builder MergeViewDirection(global::Network.Packet.Vector2Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasViewDirection &&
                result.viewDirection_ != global::Network.Packet.Vector2Data.DefaultInstance) {
                result.viewDirection_ = global::Network.Packet.Vector2Data.CreateBuilder(result.viewDirection_).MergeFrom(value).BuildPartial();
            } else {
              result.viewDirection_ = value;
            }
            result.hasViewDirection = true;
            return this;
          }
          public Builder ClearViewDirection() {
            PrepareBuilder();
            result.hasViewDirection = false;
            result.viewDirection_ = null;
            return this;
          }

          public bool HasMousePosition {
           get { return result.hasMousePosition; }
          }
          public global::Network.Packet.Vector3Data MousePosition {
            get { return result.MousePosition; }
            set { SetMousePosition(value); }
          }
          public Builder SetMousePosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMousePosition = true;
            result.mousePosition_ = value;
            return this;
          }
          public Builder SetMousePosition(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasMousePosition = true;
            result.mousePosition_ = builderForValue.Build();
            return this;
          }
          public Builder MergeMousePosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasMousePosition &&
                result.mousePosition_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.mousePosition_ = global::Network.Packet.Vector3Data.CreateBuilder(result.mousePosition_).MergeFrom(value).BuildPartial();
            } else {
              result.mousePosition_ = value;
            }
            result.hasMousePosition = true;
            return this;
          }
          public Builder ClearMousePosition() {
            PrepareBuilder();
            result.hasMousePosition = false;
            result.mousePosition_ = null;
            return this;
          }

          public bool HasUseWeaponData {
           get { return result.hasUseWeaponData; }
          }
          public global::Network.Packet.Request.Types.UseWeaponData UseWeaponData {
            get { return result.UseWeaponData; }
            set { SetUseWeaponData(value); }
          }
          public Builder SetUseWeaponData(global::Network.Packet.Request.Types.UseWeaponData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasUseWeaponData = true;
            result.useWeaponData_ = value;
            return this;
          }
          public Builder SetUseWeaponData(global::Network.Packet.Request.Types.UseWeaponData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasUseWeaponData = true;
            result.useWeaponData_ = builderForValue.Build();
            return this;
          }
          public Builder MergeUseWeaponData(global::Network.Packet.Request.Types.UseWeaponData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasUseWeaponData &&
                result.useWeaponData_ != global::Network.Packet.Request.Types.UseWeaponData.DefaultInstance) {
                result.useWeaponData_ = global::Network.Packet.Request.Types.UseWeaponData.CreateBuilder(result.useWeaponData_).MergeFrom(value).BuildPartial();
            } else {
              result.useWeaponData_ = value;
            }
            result.hasUseWeaponData = true;
            return this;
          }
          public Builder ClearUseWeaponData() {
            PrepareBuilder();
            result.hasUseWeaponData = false;
            result.useWeaponData_ = null;
            return this;
          }

          public bool HasReviveWish {
            get { return result.hasReviveWish; }
          }
          public bool ReviveWish {
            get { return result.ReviveWish; }
            set { SetReviveWish(value); }
          }
          public Builder SetReviveWish(bool value) {
            PrepareBuilder();
            result.hasReviveWish = true;
            result.reviveWish_ = value;
            return this;
          }
          public Builder ClearReviveWish() {
            PrepareBuilder();
            result.hasReviveWish = false;
            result.reviveWish_ = false;
            return this;
          }

          public bool HasJumpWish {
            get { return result.hasJumpWish; }
          }
          public bool JumpWish {
            get { return result.JumpWish; }
            set { SetJumpWish(value); }
          }
          public Builder SetJumpWish(bool value) {
            PrepareBuilder();
            result.hasJumpWish = true;
            result.jumpWish_ = value;
            return this;
          }
          public Builder ClearJumpWish() {
            PrepareBuilder();
            result.hasJumpWish = false;
            result.jumpWish_ = false;
            return this;
          }
        }
        static InputData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RequestInitialData : pb::GeneratedMessageLite<RequestInitialData, RequestInitialData.Builder> {
        private RequestInitialData() { }
        private static readonly RequestInitialData defaultInstance = new RequestInitialData().MakeReadOnly();
        private static readonly string[] _requestInitialDataFieldNames = new string[] { "allocated_user_id", "client_token_id" };
        private static readonly uint[] _requestInitialDataFieldTags = new uint[] { 8, 16 };
        public static RequestInitialData DefaultInstance {
          get { return defaultInstance; }
        }

        public override RequestInitialData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RequestInitialData ThisMessage {
          get { return this; }
        }

        public const int AllocatedUserIdFieldNumber = 1;
        private bool hasAllocatedUserId;
        private int allocatedUserId_;
        public bool HasAllocatedUserId {
          get { return hasAllocatedUserId; }
        }
        public int AllocatedUserId {
          get { return allocatedUserId_; }
        }

        public const int ClientTokenIdFieldNumber = 2;
        private bool hasClientTokenId;
        private int clientTokenId_;
        public bool HasClientTokenId {
          get { return hasClientTokenId; }
        }
        public int ClientTokenId {
          get { return clientTokenId_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _requestInitialDataFieldNames;
          if (hasAllocatedUserId) {
            output.WriteInt32(1, field_names[0], AllocatedUserId);
          }
          if (hasClientTokenId) {
            output.WriteInt32(2, field_names[1], ClientTokenId);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasAllocatedUserId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, AllocatedUserId);
          }
          if (hasClientTokenId) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, ClientTokenId);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasAllocatedUserId) {
            hash ^= allocatedUserId_.GetHashCode();
          }
          if (hasClientTokenId) {
            hash ^= clientTokenId_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          RequestInitialData other = obj as RequestInitialData;
          if (other == null) return false;
          if (hasAllocatedUserId != other.hasAllocatedUserId || (hasAllocatedUserId && !allocatedUserId_.Equals(other.allocatedUserId_))) return false;
          if (hasClientTokenId != other.hasClientTokenId || (hasClientTokenId && !clientTokenId_.Equals(other.clientTokenId_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("allocated_user_id", hasAllocatedUserId, allocatedUserId_, writer);
          PrintField("client_token_id", hasClientTokenId, clientTokenId_, writer);
        }
        #endregion

        public static RequestInitialData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestInitialData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestInitialData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestInitialData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestInitialData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestInitialData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RequestInitialData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RequestInitialData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RequestInitialData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestInitialData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RequestInitialData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RequestInitialData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<RequestInitialData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RequestInitialData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RequestInitialData result;

          private RequestInitialData PrepareBuilder() {
            if (resultIsReadOnly) {
              RequestInitialData original = result;
              result = new RequestInitialData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RequestInitialData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override RequestInitialData DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.RequestInitialData.DefaultInstance; }
          }

          public override RequestInitialData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is RequestInitialData) {
              return MergeFrom((RequestInitialData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RequestInitialData other) {
            if (other == global::Network.Packet.Request.Types.RequestInitialData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasAllocatedUserId) {
              AllocatedUserId = other.AllocatedUserId;
            }
            if (other.HasClientTokenId) {
              ClientTokenId = other.ClientTokenId;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestInitialDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestInitialDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasAllocatedUserId = input.ReadInt32(ref result.allocatedUserId_);
                  break;
                }
                case 16: {
                  result.hasClientTokenId = input.ReadInt32(ref result.clientTokenId_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasAllocatedUserId {
            get { return result.hasAllocatedUserId; }
          }
          public int AllocatedUserId {
            get { return result.AllocatedUserId; }
            set { SetAllocatedUserId(value); }
          }
          public Builder SetAllocatedUserId(int value) {
            PrepareBuilder();
            result.hasAllocatedUserId = true;
            result.allocatedUserId_ = value;
            return this;
          }
          public Builder ClearAllocatedUserId() {
            PrepareBuilder();
            result.hasAllocatedUserId = false;
            result.allocatedUserId_ = 0;
            return this;
          }

          public bool HasClientTokenId {
            get { return result.hasClientTokenId; }
          }
          public int ClientTokenId {
            get { return result.ClientTokenId; }
            set { SetClientTokenId(value); }
          }
          public Builder SetClientTokenId(int value) {
            PrepareBuilder();
            result.hasClientTokenId = true;
            result.clientTokenId_ = value;
            return this;
          }
          public Builder ClearClientTokenId() {
            PrepareBuilder();
            result.hasClientTokenId = false;
            result.clientTokenId_ = 0;
            return this;
          }
        }
        static RequestInitialData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RequestEntityBindData : pb::GeneratedMessageLite<RequestEntityBindData, RequestEntityBindData.Builder> {
        private RequestEntityBindData() { }
        private static readonly RequestEntityBindData defaultInstance = new RequestEntityBindData().MakeReadOnly();
        private static readonly string[] _requestEntityBindDataFieldNames = new string[] { "bind_request_entity_id" };
        private static readonly uint[] _requestEntityBindDataFieldTags = new uint[] { 8 };
        public static RequestEntityBindData DefaultInstance {
          get { return defaultInstance; }
        }

        public override RequestEntityBindData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RequestEntityBindData ThisMessage {
          get { return this; }
        }

        public const int BindRequestEntityIdFieldNumber = 1;
        private bool hasBindRequestEntityId;
        private int bindRequestEntityId_;
        public bool HasBindRequestEntityId {
          get { return hasBindRequestEntityId; }
        }
        public int BindRequestEntityId {
          get { return bindRequestEntityId_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _requestEntityBindDataFieldNames;
          if (hasBindRequestEntityId) {
            output.WriteInt32(1, field_names[0], BindRequestEntityId);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasBindRequestEntityId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, BindRequestEntityId);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasBindRequestEntityId) {
            hash ^= bindRequestEntityId_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          RequestEntityBindData other = obj as RequestEntityBindData;
          if (other == null) return false;
          if (hasBindRequestEntityId != other.hasBindRequestEntityId || (hasBindRequestEntityId && !bindRequestEntityId_.Equals(other.bindRequestEntityId_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("bind_request_entity_id", hasBindRequestEntityId, bindRequestEntityId_, writer);
        }
        #endregion

        public static RequestEntityBindData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestEntityBindData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestEntityBindData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestEntityBindData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestEntityBindData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestEntityBindData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RequestEntityBindData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RequestEntityBindData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RequestEntityBindData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestEntityBindData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RequestEntityBindData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RequestEntityBindData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<RequestEntityBindData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RequestEntityBindData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RequestEntityBindData result;

          private RequestEntityBindData PrepareBuilder() {
            if (resultIsReadOnly) {
              RequestEntityBindData original = result;
              result = new RequestEntityBindData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RequestEntityBindData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override RequestEntityBindData DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.RequestEntityBindData.DefaultInstance; }
          }

          public override RequestEntityBindData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is RequestEntityBindData) {
              return MergeFrom((RequestEntityBindData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RequestEntityBindData other) {
            if (other == global::Network.Packet.Request.Types.RequestEntityBindData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasBindRequestEntityId) {
              BindRequestEntityId = other.BindRequestEntityId;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestEntityBindDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestEntityBindDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasBindRequestEntityId = input.ReadInt32(ref result.bindRequestEntityId_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasBindRequestEntityId {
            get { return result.hasBindRequestEntityId; }
          }
          public int BindRequestEntityId {
            get { return result.BindRequestEntityId; }
            set { SetBindRequestEntityId(value); }
          }
          public Builder SetBindRequestEntityId(int value) {
            PrepareBuilder();
            result.hasBindRequestEntityId = true;
            result.bindRequestEntityId_ = value;
            return this;
          }
          public Builder ClearBindRequestEntityId() {
            PrepareBuilder();
            result.hasBindRequestEntityId = false;
            result.bindRequestEntityId_ = 0;
            return this;
          }
        }
        static RequestEntityBindData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RequestItemObjectObtainData : pb::GeneratedMessageLite<RequestItemObjectObtainData, RequestItemObjectObtainData.Builder> {
        private RequestItemObjectObtainData() { }
        private static readonly RequestItemObjectObtainData defaultInstance = new RequestItemObjectObtainData().MakeReadOnly();
        private static readonly string[] _requestItemObjectObtainDataFieldNames = new string[] { "item_object_id" };
        private static readonly uint[] _requestItemObjectObtainDataFieldTags = new uint[] { 8 };
        public static RequestItemObjectObtainData DefaultInstance {
          get { return defaultInstance; }
        }

        public override RequestItemObjectObtainData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RequestItemObjectObtainData ThisMessage {
          get { return this; }
        }

        public const int ItemObjectIdFieldNumber = 1;
        private bool hasItemObjectId;
        private int itemObjectId_;
        public bool HasItemObjectId {
          get { return hasItemObjectId; }
        }
        public int ItemObjectId {
          get { return itemObjectId_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _requestItemObjectObtainDataFieldNames;
          if (hasItemObjectId) {
            output.WriteInt32(1, field_names[0], ItemObjectId);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasItemObjectId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, ItemObjectId);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasItemObjectId) {
            hash ^= itemObjectId_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          RequestItemObjectObtainData other = obj as RequestItemObjectObtainData;
          if (other == null) return false;
          if (hasItemObjectId != other.hasItemObjectId || (hasItemObjectId && !itemObjectId_.Equals(other.itemObjectId_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("item_object_id", hasItemObjectId, itemObjectId_, writer);
        }
        #endregion

        public static RequestItemObjectObtainData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestItemObjectObtainData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestItemObjectObtainData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestItemObjectObtainData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestItemObjectObtainData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestItemObjectObtainData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RequestItemObjectObtainData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RequestItemObjectObtainData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RequestItemObjectObtainData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestItemObjectObtainData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RequestItemObjectObtainData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RequestItemObjectObtainData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<RequestItemObjectObtainData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RequestItemObjectObtainData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RequestItemObjectObtainData result;

          private RequestItemObjectObtainData PrepareBuilder() {
            if (resultIsReadOnly) {
              RequestItemObjectObtainData original = result;
              result = new RequestItemObjectObtainData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RequestItemObjectObtainData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override RequestItemObjectObtainData DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.RequestItemObjectObtainData.DefaultInstance; }
          }

          public override RequestItemObjectObtainData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is RequestItemObjectObtainData) {
              return MergeFrom((RequestItemObjectObtainData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RequestItemObjectObtainData other) {
            if (other == global::Network.Packet.Request.Types.RequestItemObjectObtainData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasItemObjectId) {
              ItemObjectId = other.ItemObjectId;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestItemObjectObtainDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestItemObjectObtainDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasItemObjectId = input.ReadInt32(ref result.itemObjectId_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasItemObjectId {
            get { return result.hasItemObjectId; }
          }
          public int ItemObjectId {
            get { return result.ItemObjectId; }
            set { SetItemObjectId(value); }
          }
          public Builder SetItemObjectId(int value) {
            PrepareBuilder();
            result.hasItemObjectId = true;
            result.itemObjectId_ = value;
            return this;
          }
          public Builder ClearItemObjectId() {
            PrepareBuilder();
            result.hasItemObjectId = false;
            result.itemObjectId_ = 0;
            return this;
          }
        }
        static RequestItemObjectObtainData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RequestEquipWeaponData : pb::GeneratedMessageLite<RequestEquipWeaponData, RequestEquipWeaponData.Builder> {
        private RequestEquipWeaponData() { }
        private static readonly RequestEquipWeaponData defaultInstance = new RequestEquipWeaponData().MakeReadOnly();
        private static readonly string[] _requestEquipWeaponDataFieldNames = new string[] { "weapon_entity_id" };
        private static readonly uint[] _requestEquipWeaponDataFieldTags = new uint[] { 8 };
        public static RequestEquipWeaponData DefaultInstance {
          get { return defaultInstance; }
        }

        public override RequestEquipWeaponData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RequestEquipWeaponData ThisMessage {
          get { return this; }
        }

        public const int WeaponEntityIdFieldNumber = 1;
        private bool hasWeaponEntityId;
        private int weaponEntityId_;
        public bool HasWeaponEntityId {
          get { return hasWeaponEntityId; }
        }
        public int WeaponEntityId {
          get { return weaponEntityId_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _requestEquipWeaponDataFieldNames;
          if (hasWeaponEntityId) {
            output.WriteInt32(1, field_names[0], WeaponEntityId);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasWeaponEntityId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, WeaponEntityId);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasWeaponEntityId) {
            hash ^= weaponEntityId_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          RequestEquipWeaponData other = obj as RequestEquipWeaponData;
          if (other == null) return false;
          if (hasWeaponEntityId != other.hasWeaponEntityId || (hasWeaponEntityId && !weaponEntityId_.Equals(other.weaponEntityId_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("weapon_entity_id", hasWeaponEntityId, weaponEntityId_, writer);
        }
        #endregion

        public static RequestEquipWeaponData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestEquipWeaponData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestEquipWeaponData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestEquipWeaponData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestEquipWeaponData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestEquipWeaponData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RequestEquipWeaponData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RequestEquipWeaponData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RequestEquipWeaponData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestEquipWeaponData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RequestEquipWeaponData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RequestEquipWeaponData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<RequestEquipWeaponData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RequestEquipWeaponData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RequestEquipWeaponData result;

          private RequestEquipWeaponData PrepareBuilder() {
            if (resultIsReadOnly) {
              RequestEquipWeaponData original = result;
              result = new RequestEquipWeaponData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RequestEquipWeaponData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override RequestEquipWeaponData DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.RequestEquipWeaponData.DefaultInstance; }
          }

          public override RequestEquipWeaponData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is RequestEquipWeaponData) {
              return MergeFrom((RequestEquipWeaponData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RequestEquipWeaponData other) {
            if (other == global::Network.Packet.Request.Types.RequestEquipWeaponData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasWeaponEntityId) {
              WeaponEntityId = other.WeaponEntityId;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestEquipWeaponDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestEquipWeaponDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasWeaponEntityId = input.ReadInt32(ref result.weaponEntityId_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasWeaponEntityId {
            get { return result.hasWeaponEntityId; }
          }
          public int WeaponEntityId {
            get { return result.WeaponEntityId; }
            set { SetWeaponEntityId(value); }
          }
          public Builder SetWeaponEntityId(int value) {
            PrepareBuilder();
            result.hasWeaponEntityId = true;
            result.weaponEntityId_ = value;
            return this;
          }
          public Builder ClearWeaponEntityId() {
            PrepareBuilder();
            result.hasWeaponEntityId = false;
            result.weaponEntityId_ = 0;
            return this;
          }
        }
        static RequestEquipWeaponData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RequestTitleInput : pb::GeneratedMessageLite<RequestTitleInput, RequestTitleInput.Builder> {
        private RequestTitleInput() { }
        private static readonly RequestTitleInput defaultInstance = new RequestTitleInput().MakeReadOnly();
        private static readonly string[] _requestTitleInputFieldNames = new string[] { "input_data", "look_at_data", "player_name_data", "position_data", "session_id" };
        private static readonly uint[] _requestTitleInputFieldTags = new uint[] { 90, 106, 82, 98, 40 };
        public static RequestTitleInput DefaultInstance {
          get { return defaultInstance; }
        }

        public override RequestTitleInput DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RequestTitleInput ThisMessage {
          get { return this; }
        }

        public const int SessionIdFieldNumber = 5;
        private bool hasSessionId;
        private int sessionId_;
        public bool HasSessionId {
          get { return hasSessionId; }
        }
        public int SessionId {
          get { return sessionId_; }
        }

        public const int PlayerNameDataFieldNumber = 10;
        private bool hasPlayerNameData;
        private string playerNameData_ = "";
        public bool HasPlayerNameData {
          get { return hasPlayerNameData; }
        }
        public string PlayerNameData {
          get { return playerNameData_; }
        }

        public const int InputDataFieldNumber = 11;
        private bool hasInputData;
        private global::Network.Packet.Vector3Data inputData_;
        public bool HasInputData {
          get { return hasInputData; }
        }
        public global::Network.Packet.Vector3Data InputData {
          get { return inputData_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int PositionDataFieldNumber = 12;
        private bool hasPositionData;
        private global::Network.Packet.Vector3Data positionData_;
        public bool HasPositionData {
          get { return hasPositionData; }
        }
        public global::Network.Packet.Vector3Data PositionData {
          get { return positionData_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int LookAtDataFieldNumber = 13;
        private bool hasLookAtData;
        private global::Network.Packet.Vector3Data lookAtData_;
        public bool HasLookAtData {
          get { return hasLookAtData; }
        }
        public global::Network.Packet.Vector3Data LookAtData {
          get { return lookAtData_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _requestTitleInputFieldNames;
          if (hasSessionId) {
            output.WriteInt32(5, field_names[4], SessionId);
          }
          if (hasPlayerNameData) {
            output.WriteString(10, field_names[2], PlayerNameData);
          }
          if (hasInputData) {
            output.WriteMessage(11, field_names[0], InputData);
          }
          if (hasPositionData) {
            output.WriteMessage(12, field_names[3], PositionData);
          }
          if (hasLookAtData) {
            output.WriteMessage(13, field_names[1], LookAtData);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasSessionId) {
            size += pb::CodedOutputStream.ComputeInt32Size(5, SessionId);
          }
          if (hasPlayerNameData) {
            size += pb::CodedOutputStream.ComputeStringSize(10, PlayerNameData);
          }
          if (hasInputData) {
            size += pb::CodedOutputStream.ComputeMessageSize(11, InputData);
          }
          if (hasPositionData) {
            size += pb::CodedOutputStream.ComputeMessageSize(12, PositionData);
          }
          if (hasLookAtData) {
            size += pb::CodedOutputStream.ComputeMessageSize(13, LookAtData);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasSessionId) {
            hash ^= sessionId_.GetHashCode();
          }
          if (hasPlayerNameData) {
            hash ^= playerNameData_.GetHashCode();
          }
          if (hasInputData) hash ^= inputData_.GetHashCode();
          if (hasPositionData) hash ^= positionData_.GetHashCode();
          if (hasLookAtData) hash ^= lookAtData_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          RequestTitleInput other = obj as RequestTitleInput;
          if (other == null) return false;
          if (hasSessionId != other.hasSessionId || (hasSessionId && !sessionId_.Equals(other.sessionId_))) return false;
          if (hasPlayerNameData != other.hasPlayerNameData || (hasPlayerNameData && !playerNameData_.Equals(other.playerNameData_))) return false;
          if (hasInputData != other.hasInputData || (hasInputData && !inputData_.Equals(other.inputData_))) return false;
          if (hasPositionData != other.hasPositionData || (hasPositionData && !positionData_.Equals(other.positionData_))) return false;
          if (hasLookAtData != other.hasLookAtData || (hasLookAtData && !lookAtData_.Equals(other.lookAtData_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("session_id", hasSessionId, sessionId_, writer);
          PrintField("player_name_data", hasPlayerNameData, playerNameData_, writer);
          PrintField("input_data", hasInputData, inputData_, writer);
          PrintField("position_data", hasPositionData, positionData_, writer);
          PrintField("look_at_data", hasLookAtData, lookAtData_, writer);
        }
        #endregion

        public static RequestTitleInput ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestTitleInput ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestTitleInput ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestTitleInput ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestTitleInput ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestTitleInput ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RequestTitleInput ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RequestTitleInput ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RequestTitleInput ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestTitleInput ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RequestTitleInput MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RequestTitleInput prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<RequestTitleInput, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RequestTitleInput cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RequestTitleInput result;

          private RequestTitleInput PrepareBuilder() {
            if (resultIsReadOnly) {
              RequestTitleInput original = result;
              result = new RequestTitleInput();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RequestTitleInput MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override RequestTitleInput DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.RequestTitleInput.DefaultInstance; }
          }

          public override RequestTitleInput BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is RequestTitleInput) {
              return MergeFrom((RequestTitleInput) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RequestTitleInput other) {
            if (other == global::Network.Packet.Request.Types.RequestTitleInput.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasSessionId) {
              SessionId = other.SessionId;
            }
            if (other.HasPlayerNameData) {
              PlayerNameData = other.PlayerNameData;
            }
            if (other.HasInputData) {
              MergeInputData(other.InputData);
            }
            if (other.HasPositionData) {
              MergePositionData(other.PositionData);
            }
            if (other.HasLookAtData) {
              MergeLookAtData(other.LookAtData);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestTitleInputFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestTitleInputFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 40: {
                  result.hasSessionId = input.ReadInt32(ref result.sessionId_);
                  break;
                }
                case 82: {
                  result.hasPlayerNameData = input.ReadString(ref result.playerNameData_);
                  break;
                }
                case 90: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasInputData) {
                    subBuilder.MergeFrom(InputData);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  InputData = subBuilder.BuildPartial();
                  break;
                }
                case 98: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasPositionData) {
                    subBuilder.MergeFrom(PositionData);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  PositionData = subBuilder.BuildPartial();
                  break;
                }
                case 106: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasLookAtData) {
                    subBuilder.MergeFrom(LookAtData);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  LookAtData = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasSessionId {
            get { return result.hasSessionId; }
          }
          public int SessionId {
            get { return result.SessionId; }
            set { SetSessionId(value); }
          }
          public Builder SetSessionId(int value) {
            PrepareBuilder();
            result.hasSessionId = true;
            result.sessionId_ = value;
            return this;
          }
          public Builder ClearSessionId() {
            PrepareBuilder();
            result.hasSessionId = false;
            result.sessionId_ = 0;
            return this;
          }

          public bool HasPlayerNameData {
            get { return result.hasPlayerNameData; }
          }
          public string PlayerNameData {
            get { return result.PlayerNameData; }
            set { SetPlayerNameData(value); }
          }
          public Builder SetPlayerNameData(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPlayerNameData = true;
            result.playerNameData_ = value;
            return this;
          }
          public Builder ClearPlayerNameData() {
            PrepareBuilder();
            result.hasPlayerNameData = false;
            result.playerNameData_ = "";
            return this;
          }

          public bool HasInputData {
           get { return result.hasInputData; }
          }
          public global::Network.Packet.Vector3Data InputData {
            get { return result.InputData; }
            set { SetInputData(value); }
          }
          public Builder SetInputData(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasInputData = true;
            result.inputData_ = value;
            return this;
          }
          public Builder SetInputData(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasInputData = true;
            result.inputData_ = builderForValue.Build();
            return this;
          }
          public Builder MergeInputData(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasInputData &&
                result.inputData_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.inputData_ = global::Network.Packet.Vector3Data.CreateBuilder(result.inputData_).MergeFrom(value).BuildPartial();
            } else {
              result.inputData_ = value;
            }
            result.hasInputData = true;
            return this;
          }
          public Builder ClearInputData() {
            PrepareBuilder();
            result.hasInputData = false;
            result.inputData_ = null;
            return this;
          }

          public bool HasPositionData {
           get { return result.hasPositionData; }
          }
          public global::Network.Packet.Vector3Data PositionData {
            get { return result.PositionData; }
            set { SetPositionData(value); }
          }
          public Builder SetPositionData(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPositionData = true;
            result.positionData_ = value;
            return this;
          }
          public Builder SetPositionData(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasPositionData = true;
            result.positionData_ = builderForValue.Build();
            return this;
          }
          public Builder MergePositionData(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasPositionData &&
                result.positionData_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.positionData_ = global::Network.Packet.Vector3Data.CreateBuilder(result.positionData_).MergeFrom(value).BuildPartial();
            } else {
              result.positionData_ = value;
            }
            result.hasPositionData = true;
            return this;
          }
          public Builder ClearPositionData() {
            PrepareBuilder();
            result.hasPositionData = false;
            result.positionData_ = null;
            return this;
          }

          public bool HasLookAtData {
           get { return result.hasLookAtData; }
          }
          public global::Network.Packet.Vector3Data LookAtData {
            get { return result.LookAtData; }
            set { SetLookAtData(value); }
          }
          public Builder SetLookAtData(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasLookAtData = true;
            result.lookAtData_ = value;
            return this;
          }
          public Builder SetLookAtData(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasLookAtData = true;
            result.lookAtData_ = builderForValue.Build();
            return this;
          }
          public Builder MergeLookAtData(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasLookAtData &&
                result.lookAtData_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.lookAtData_ = global::Network.Packet.Vector3Data.CreateBuilder(result.lookAtData_).MergeFrom(value).BuildPartial();
            } else {
              result.lookAtData_ = value;
            }
            result.hasLookAtData = true;
            return this;
          }
          public Builder ClearLookAtData() {
            PrepareBuilder();
            result.hasLookAtData = false;
            result.lookAtData_ = null;
            return this;
          }
        }
        static RequestTitleInput() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RequestClientReadyState : pb::GeneratedMessageLite<RequestClientReadyState, RequestClientReadyState.Builder> {
        private RequestClientReadyState() { }
        private static readonly RequestClientReadyState defaultInstance = new RequestClientReadyState().MakeReadOnly();
        private static readonly string[] _requestClientReadyStateFieldNames = new string[] { "is_ready" };
        private static readonly uint[] _requestClientReadyStateFieldTags = new uint[] { 8 };
        public static RequestClientReadyState DefaultInstance {
          get { return defaultInstance; }
        }

        public override RequestClientReadyState DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override RequestClientReadyState ThisMessage {
          get { return this; }
        }

        public const int IsReadyFieldNumber = 1;
        private bool hasIsReady;
        private bool isReady_;
        public bool HasIsReady {
          get { return hasIsReady; }
        }
        public bool IsReady {
          get { return isReady_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _requestClientReadyStateFieldNames;
          if (hasIsReady) {
            output.WriteBool(1, field_names[0], IsReady);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasIsReady) {
            size += pb::CodedOutputStream.ComputeBoolSize(1, IsReady);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasIsReady) {
            hash ^= isReady_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          RequestClientReadyState other = obj as RequestClientReadyState;
          if (other == null) return false;
          if (hasIsReady != other.hasIsReady || (hasIsReady && !isReady_.Equals(other.isReady_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("is_ready", hasIsReady, isReady_, writer);
        }
        #endregion

        public static RequestClientReadyState ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestClientReadyState ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestClientReadyState ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RequestClientReadyState ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RequestClientReadyState ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestClientReadyState ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RequestClientReadyState ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RequestClientReadyState ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RequestClientReadyState ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RequestClientReadyState ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RequestClientReadyState MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RequestClientReadyState prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<RequestClientReadyState, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RequestClientReadyState cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private RequestClientReadyState result;

          private RequestClientReadyState PrepareBuilder() {
            if (resultIsReadOnly) {
              RequestClientReadyState original = result;
              result = new RequestClientReadyState();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override RequestClientReadyState MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override RequestClientReadyState DefaultInstanceForType {
            get { return global::Network.Packet.Request.Types.RequestClientReadyState.DefaultInstance; }
          }

          public override RequestClientReadyState BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is RequestClientReadyState) {
              return MergeFrom((RequestClientReadyState) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(RequestClientReadyState other) {
            if (other == global::Network.Packet.Request.Types.RequestClientReadyState.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasIsReady) {
              IsReady = other.IsReady;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_requestClientReadyStateFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _requestClientReadyStateFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasIsReady = input.ReadBool(ref result.isReady_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasIsReady {
            get { return result.hasIsReady; }
          }
          public bool IsReady {
            get { return result.IsReady; }
            set { SetIsReady(value); }
          }
          public Builder SetIsReady(bool value) {
            PrepareBuilder();
            result.hasIsReady = true;
            result.isReady_ = value;
            return this;
          }
          public Builder ClearIsReady() {
            PrepareBuilder();
            result.hasIsReady = false;
            result.isReady_ = false;
            return this;
          }
        }
        static RequestClientReadyState() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

    }
    #endregion

    public const int HandleFieldNumber = 10;
    private bool hasHandle;
    private global::Network.Packet.RequestHandle handle_ = global::Network.Packet.RequestHandle.kRequestError;
    public bool HasHandle {
      get { return hasHandle; }
    }
    public global::Network.Packet.RequestHandle Handle {
      get { return handle_; }
    }

    public const int PakcetIdFieldNumber = 20;
    private bool hasPakcetId;
    private ulong pakcetId_;
    public bool HasPakcetId {
      get { return hasPakcetId; }
    }
    public ulong PakcetId {
      get { return pakcetId_; }
    }

    public const int UserTokenFieldNumber = 30;
    private bool hasUserToken;
    private global::Network.Packet.UserTokenData userToken_;
    public bool HasUserToken {
      get { return hasUserToken; }
    }
    public global::Network.Packet.UserTokenData UserToken {
      get { return userToken_ ?? global::Network.Packet.UserTokenData.DefaultInstance; }
    }

    public const int RequestUdpConnnectFieldNumber = 90;
    private bool hasRequestUdpConnnect;
    private global::Network.Packet.Request.Types.RequestUdpConnnect requestUdpConnnect_;
    public bool HasRequestUdpConnnect {
      get { return hasRequestUdpConnnect; }
    }
    public global::Network.Packet.Request.Types.RequestUdpConnnect RequestUdpConnnect {
      get { return requestUdpConnnect_ ?? global::Network.Packet.Request.Types.RequestUdpConnnect.DefaultInstance; }
    }

    public const int SessionRequestCommandDataFieldNumber = 100;
    private bool hasSessionRequestCommandData;
    private global::Network.Packet.Request.Types.SessionRequestCommandData sessionRequestCommandData_;
    public bool HasSessionRequestCommandData {
      get { return hasSessionRequestCommandData; }
    }
    public global::Network.Packet.Request.Types.SessionRequestCommandData SessionRequestCommandData {
      get { return sessionRequestCommandData_ ?? global::Network.Packet.Request.Types.SessionRequestCommandData.DefaultInstance; }
    }

    public const int UpdateInputFieldNumber = 110;
    private bool hasUpdateInput;
    private global::Network.Packet.Request.Types.InputData updateInput_;
    public bool HasUpdateInput {
      get { return hasUpdateInput; }
    }
    public global::Network.Packet.Request.Types.InputData UpdateInput {
      get { return updateInput_ ?? global::Network.Packet.Request.Types.InputData.DefaultInstance; }
    }

    public const int RequestInitialDataFieldNumber = 120;
    private bool hasRequestInitialData;
    private global::Network.Packet.Request.Types.RequestInitialData requestInitialData_;
    public bool HasRequestInitialData {
      get { return hasRequestInitialData; }
    }
    public global::Network.Packet.Request.Types.RequestInitialData RequestInitialData {
      get { return requestInitialData_ ?? global::Network.Packet.Request.Types.RequestInitialData.DefaultInstance; }
    }

    public const int RequestEntityBindFieldNumber = 140;
    private bool hasRequestEntityBind;
    private global::Network.Packet.Request.Types.RequestEntityBindData requestEntityBind_;
    public bool HasRequestEntityBind {
      get { return hasRequestEntityBind; }
    }
    public global::Network.Packet.Request.Types.RequestEntityBindData RequestEntityBind {
      get { return requestEntityBind_ ?? global::Network.Packet.Request.Types.RequestEntityBindData.DefaultInstance; }
    }

    public const int RequestItemObjectObtainDataFieldNumber = 150;
    private bool hasRequestItemObjectObtainData;
    private global::Network.Packet.Request.Types.RequestItemObjectObtainData requestItemObjectObtainData_;
    public bool HasRequestItemObjectObtainData {
      get { return hasRequestItemObjectObtainData; }
    }
    public global::Network.Packet.Request.Types.RequestItemObjectObtainData RequestItemObjectObtainData {
      get { return requestItemObjectObtainData_ ?? global::Network.Packet.Request.Types.RequestItemObjectObtainData.DefaultInstance; }
    }

    public const int SwapInventoryIndexFieldNumber = 152;
    private bool hasSwapInventoryIndex;
    private int swapInventoryIndex_;
    public bool HasSwapInventoryIndex {
      get { return hasSwapInventoryIndex; }
    }
    public int SwapInventoryIndex {
      get { return swapInventoryIndex_; }
    }

    public const int CheckPointNumberFieldNumber = 155;
    private bool hasCheckPointNumber;
    private int checkPointNumber_;
    public bool HasCheckPointNumber {
      get { return hasCheckPointNumber; }
    }
    public int CheckPointNumber {
      get { return checkPointNumber_; }
    }

    public const int RequestEquipWeaponFieldNumber = 160;
    private bool hasRequestEquipWeapon;
    private global::Network.Packet.Request.Types.RequestEquipWeaponData requestEquipWeapon_;
    public bool HasRequestEquipWeapon {
      get { return hasRequestEquipWeapon; }
    }
    public global::Network.Packet.Request.Types.RequestEquipWeaponData RequestEquipWeapon {
      get { return requestEquipWeapon_ ?? global::Network.Packet.Request.Types.RequestEquipWeaponData.DefaultInstance; }
    }

    public const int RequestTitleInputFieldNumber = 190;
    private bool hasRequestTitleInput;
    private global::Network.Packet.Request.Types.RequestTitleInput requestTitleInput_;
    public bool HasRequestTitleInput {
      get { return hasRequestTitleInput; }
    }
    public global::Network.Packet.Request.Types.RequestTitleInput RequestTitleInput {
      get { return requestTitleInput_ ?? global::Network.Packet.Request.Types.RequestTitleInput.DefaultInstance; }
    }

    public const int RequestClientReadyStateFieldNumber = 200;
    private bool hasRequestClientReadyState;
    private global::Network.Packet.Request.Types.RequestClientReadyState requestClientReadyState_;
    public bool HasRequestClientReadyState {
      get { return hasRequestClientReadyState; }
    }
    public global::Network.Packet.Request.Types.RequestClientReadyState RequestClientReadyState {
      get { return requestClientReadyState_ ?? global::Network.Packet.Request.Types.RequestClientReadyState.DefaultInstance; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _requestFieldNames;
      if (hasHandle) {
        output.WriteEnum(10, field_names[1], (int) Handle, Handle);
      }
      if (hasPakcetId) {
        output.WriteUInt64(20, field_names[2], PakcetId);
      }
      if (hasUserToken) {
        output.WriteMessage(30, field_names[13], UserToken);
      }
      if (hasRequestUdpConnnect) {
        output.WriteMessage(90, field_names[9], RequestUdpConnnect);
      }
      if (hasSessionRequestCommandData) {
        output.WriteMessage(100, field_names[10], SessionRequestCommandData);
      }
      if (hasUpdateInput) {
        output.WriteMessage(110, field_names[12], UpdateInput);
      }
      if (hasRequestInitialData) {
        output.WriteMessage(120, field_names[6], RequestInitialData);
      }
      if (hasRequestEntityBind) {
        output.WriteMessage(140, field_names[4], RequestEntityBind);
      }
      if (hasRequestItemObjectObtainData) {
        output.WriteMessage(150, field_names[7], RequestItemObjectObtainData);
      }
      if (hasSwapInventoryIndex) {
        output.WriteInt32(152, field_names[11], SwapInventoryIndex);
      }
      if (hasCheckPointNumber) {
        output.WriteInt32(155, field_names[0], CheckPointNumber);
      }
      if (hasRequestEquipWeapon) {
        output.WriteMessage(160, field_names[5], RequestEquipWeapon);
      }
      if (hasRequestTitleInput) {
        output.WriteMessage(190, field_names[8], RequestTitleInput);
      }
      if (hasRequestClientReadyState) {
        output.WriteMessage(200, field_names[3], RequestClientReadyState);
      }
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasHandle) {
        size += pb::CodedOutputStream.ComputeEnumSize(10, (int) Handle);
      }
      if (hasPakcetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(20, PakcetId);
      }
      if (hasUserToken) {
        size += pb::CodedOutputStream.ComputeMessageSize(30, UserToken);
      }
      if (hasRequestUdpConnnect) {
        size += pb::CodedOutputStream.ComputeMessageSize(90, RequestUdpConnnect);
      }
      if (hasSessionRequestCommandData) {
        size += pb::CodedOutputStream.ComputeMessageSize(100, SessionRequestCommandData);
      }
      if (hasUpdateInput) {
        size += pb::CodedOutputStream.ComputeMessageSize(110, UpdateInput);
      }
      if (hasRequestInitialData) {
        size += pb::CodedOutputStream.ComputeMessageSize(120, RequestInitialData);
      }
      if (hasRequestEntityBind) {
        size += pb::CodedOutputStream.ComputeMessageSize(140, RequestEntityBind);
      }
      if (hasRequestItemObjectObtainData) {
        size += pb::CodedOutputStream.ComputeMessageSize(150, RequestItemObjectObtainData);
      }
      if (hasSwapInventoryIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(152, SwapInventoryIndex);
      }
      if (hasCheckPointNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(155, CheckPointNumber);
      }
      if (hasRequestEquipWeapon) {
        size += pb::CodedOutputStream.ComputeMessageSize(160, RequestEquipWeapon);
      }
      if (hasRequestTitleInput) {
        size += pb::CodedOutputStream.ComputeMessageSize(190, RequestTitleInput);
      }
      if (hasRequestClientReadyState) {
        size += pb::CodedOutputStream.ComputeMessageSize(200, RequestClientReadyState);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasHandle) {
        hash ^= handle_.GetHashCode();
      }
      if (hasPakcetId) {
        hash ^= pakcetId_.GetHashCode();
      }
      if (hasUserToken) hash ^= userToken_.GetHashCode();
      if (hasRequestUdpConnnect) hash ^= requestUdpConnnect_.GetHashCode();
      if (hasSessionRequestCommandData) hash ^= sessionRequestCommandData_.GetHashCode();
      if (hasUpdateInput) hash ^= updateInput_.GetHashCode();
      if (hasRequestInitialData) hash ^= requestInitialData_.GetHashCode();
      if (hasRequestEntityBind) hash ^= requestEntityBind_.GetHashCode();
      if (hasRequestItemObjectObtainData) hash ^= requestItemObjectObtainData_.GetHashCode();
      if (hasSwapInventoryIndex) {
        hash ^= swapInventoryIndex_.GetHashCode();
      }
      if (hasCheckPointNumber) {
        hash ^= checkPointNumber_.GetHashCode();
      }
      if (hasRequestEquipWeapon) hash ^= requestEquipWeapon_.GetHashCode();
      if (hasRequestTitleInput) hash ^= requestTitleInput_.GetHashCode();
      if (hasRequestClientReadyState) hash ^= requestClientReadyState_.GetHashCode();
      return hash;
    }

    public override bool Equals(object obj) {
      Request other = obj as Request;
      if (other == null) return false;
      if (hasHandle != other.hasHandle || (hasHandle && !handle_.Equals(other.handle_))) return false;
      if (hasPakcetId != other.hasPakcetId || (hasPakcetId && !pakcetId_.Equals(other.pakcetId_))) return false;
      if (hasUserToken != other.hasUserToken || (hasUserToken && !userToken_.Equals(other.userToken_))) return false;
      if (hasRequestUdpConnnect != other.hasRequestUdpConnnect || (hasRequestUdpConnnect && !requestUdpConnnect_.Equals(other.requestUdpConnnect_))) return false;
      if (hasSessionRequestCommandData != other.hasSessionRequestCommandData || (hasSessionRequestCommandData && !sessionRequestCommandData_.Equals(other.sessionRequestCommandData_))) return false;
      if (hasUpdateInput != other.hasUpdateInput || (hasUpdateInput && !updateInput_.Equals(other.updateInput_))) return false;
      if (hasRequestInitialData != other.hasRequestInitialData || (hasRequestInitialData && !requestInitialData_.Equals(other.requestInitialData_))) return false;
      if (hasRequestEntityBind != other.hasRequestEntityBind || (hasRequestEntityBind && !requestEntityBind_.Equals(other.requestEntityBind_))) return false;
      if (hasRequestItemObjectObtainData != other.hasRequestItemObjectObtainData || (hasRequestItemObjectObtainData && !requestItemObjectObtainData_.Equals(other.requestItemObjectObtainData_))) return false;
      if (hasSwapInventoryIndex != other.hasSwapInventoryIndex || (hasSwapInventoryIndex && !swapInventoryIndex_.Equals(other.swapInventoryIndex_))) return false;
      if (hasCheckPointNumber != other.hasCheckPointNumber || (hasCheckPointNumber && !checkPointNumber_.Equals(other.checkPointNumber_))) return false;
      if (hasRequestEquipWeapon != other.hasRequestEquipWeapon || (hasRequestEquipWeapon && !requestEquipWeapon_.Equals(other.requestEquipWeapon_))) return false;
      if (hasRequestTitleInput != other.hasRequestTitleInput || (hasRequestTitleInput && !requestTitleInput_.Equals(other.requestTitleInput_))) return false;
      if (hasRequestClientReadyState != other.hasRequestClientReadyState || (hasRequestClientReadyState && !requestClientReadyState_.Equals(other.requestClientReadyState_))) return false;
      return true;
    }

    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("handle", hasHandle, handle_, writer);
      PrintField("pakcet_id", hasPakcetId, pakcetId_, writer);
      PrintField("user_token", hasUserToken, userToken_, writer);
      PrintField("request_udp_connnect", hasRequestUdpConnnect, requestUdpConnnect_, writer);
      PrintField("session_request_command_data", hasSessionRequestCommandData, sessionRequestCommandData_, writer);
      PrintField("update_input", hasUpdateInput, updateInput_, writer);
      PrintField("request_initial_data", hasRequestInitialData, requestInitialData_, writer);
      PrintField("request_entity_bind", hasRequestEntityBind, requestEntityBind_, writer);
      PrintField("request_item_object_obtain_data", hasRequestItemObjectObtainData, requestItemObjectObtainData_, writer);
      PrintField("swap_inventory_index", hasSwapInventoryIndex, swapInventoryIndex_, writer);
      PrintField("check_point_number", hasCheckPointNumber, checkPointNumber_, writer);
      PrintField("request_equip_weapon", hasRequestEquipWeapon, requestEquipWeapon_, writer);
      PrintField("request_title_input", hasRequestTitleInput, requestTitleInput_, writer);
      PrintField("request_client_ready_state", hasRequestClientReadyState, requestClientReadyState_, writer);
    }
    #endregion

    public static Request ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Request ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Request ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Request ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Request MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Request prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Request, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Request cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Request result;

      private Request PrepareBuilder() {
        if (resultIsReadOnly) {
          Request original = result;
          result = new Request();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Request MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override Request DefaultInstanceForType {
        get { return global::Network.Packet.Request.DefaultInstance; }
      }

      public override Request BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Request) {
          return MergeFrom((Request) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Request other) {
        if (other == global::Network.Packet.Request.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHandle) {
          Handle = other.Handle;
        }
        if (other.HasPakcetId) {
          PakcetId = other.PakcetId;
        }
        if (other.HasUserToken) {
          MergeUserToken(other.UserToken);
        }
        if (other.HasRequestUdpConnnect) {
          MergeRequestUdpConnnect(other.RequestUdpConnnect);
        }
        if (other.HasSessionRequestCommandData) {
          MergeSessionRequestCommandData(other.SessionRequestCommandData);
        }
        if (other.HasUpdateInput) {
          MergeUpdateInput(other.UpdateInput);
        }
        if (other.HasRequestInitialData) {
          MergeRequestInitialData(other.RequestInitialData);
        }
        if (other.HasRequestEntityBind) {
          MergeRequestEntityBind(other.RequestEntityBind);
        }
        if (other.HasRequestItemObjectObtainData) {
          MergeRequestItemObjectObtainData(other.RequestItemObjectObtainData);
        }
        if (other.HasSwapInventoryIndex) {
          SwapInventoryIndex = other.SwapInventoryIndex;
        }
        if (other.HasCheckPointNumber) {
          CheckPointNumber = other.CheckPointNumber;
        }
        if (other.HasRequestEquipWeapon) {
          MergeRequestEquipWeapon(other.RequestEquipWeapon);
        }
        if (other.HasRequestTitleInput) {
          MergeRequestTitleInput(other.RequestTitleInput);
        }
        if (other.HasRequestClientReadyState) {
          MergeRequestClientReadyState(other.RequestClientReadyState);
        }
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 80: {
              object unknown;
              if(input.ReadEnum(ref result.handle_, out unknown)) {
                result.hasHandle = true;
              } else if(unknown is int) {
              }
              break;
            }
            case 160: {
              result.hasPakcetId = input.ReadUInt64(ref result.pakcetId_);
              break;
            }
            case 242: {
              global::Network.Packet.UserTokenData.Builder subBuilder = global::Network.Packet.UserTokenData.CreateBuilder();
              if (result.hasUserToken) {
                subBuilder.MergeFrom(UserToken);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserToken = subBuilder.BuildPartial();
              break;
            }
            case 722: {
              global::Network.Packet.Request.Types.RequestUdpConnnect.Builder subBuilder = global::Network.Packet.Request.Types.RequestUdpConnnect.CreateBuilder();
              if (result.hasRequestUdpConnnect) {
                subBuilder.MergeFrom(RequestUdpConnnect);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestUdpConnnect = subBuilder.BuildPartial();
              break;
            }
            case 802: {
              global::Network.Packet.Request.Types.SessionRequestCommandData.Builder subBuilder = global::Network.Packet.Request.Types.SessionRequestCommandData.CreateBuilder();
              if (result.hasSessionRequestCommandData) {
                subBuilder.MergeFrom(SessionRequestCommandData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SessionRequestCommandData = subBuilder.BuildPartial();
              break;
            }
            case 882: {
              global::Network.Packet.Request.Types.InputData.Builder subBuilder = global::Network.Packet.Request.Types.InputData.CreateBuilder();
              if (result.hasUpdateInput) {
                subBuilder.MergeFrom(UpdateInput);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UpdateInput = subBuilder.BuildPartial();
              break;
            }
            case 962: {
              global::Network.Packet.Request.Types.RequestInitialData.Builder subBuilder = global::Network.Packet.Request.Types.RequestInitialData.CreateBuilder();
              if (result.hasRequestInitialData) {
                subBuilder.MergeFrom(RequestInitialData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestInitialData = subBuilder.BuildPartial();
              break;
            }
            case 1122: {
              global::Network.Packet.Request.Types.RequestEntityBindData.Builder subBuilder = global::Network.Packet.Request.Types.RequestEntityBindData.CreateBuilder();
              if (result.hasRequestEntityBind) {
                subBuilder.MergeFrom(RequestEntityBind);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestEntityBind = subBuilder.BuildPartial();
              break;
            }
            case 1202: {
              global::Network.Packet.Request.Types.RequestItemObjectObtainData.Builder subBuilder = global::Network.Packet.Request.Types.RequestItemObjectObtainData.CreateBuilder();
              if (result.hasRequestItemObjectObtainData) {
                subBuilder.MergeFrom(RequestItemObjectObtainData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestItemObjectObtainData = subBuilder.BuildPartial();
              break;
            }
            case 1216: {
              result.hasSwapInventoryIndex = input.ReadInt32(ref result.swapInventoryIndex_);
              break;
            }
            case 1240: {
              result.hasCheckPointNumber = input.ReadInt32(ref result.checkPointNumber_);
              break;
            }
            case 1282: {
              global::Network.Packet.Request.Types.RequestEquipWeaponData.Builder subBuilder = global::Network.Packet.Request.Types.RequestEquipWeaponData.CreateBuilder();
              if (result.hasRequestEquipWeapon) {
                subBuilder.MergeFrom(RequestEquipWeapon);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestEquipWeapon = subBuilder.BuildPartial();
              break;
            }
            case 1522: {
              global::Network.Packet.Request.Types.RequestTitleInput.Builder subBuilder = global::Network.Packet.Request.Types.RequestTitleInput.CreateBuilder();
              if (result.hasRequestTitleInput) {
                subBuilder.MergeFrom(RequestTitleInput);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestTitleInput = subBuilder.BuildPartial();
              break;
            }
            case 1602: {
              global::Network.Packet.Request.Types.RequestClientReadyState.Builder subBuilder = global::Network.Packet.Request.Types.RequestClientReadyState.CreateBuilder();
              if (result.hasRequestClientReadyState) {
                subBuilder.MergeFrom(RequestClientReadyState);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestClientReadyState = subBuilder.BuildPartial();
              break;
            }
          }
        }

        return this;
      }


      public bool HasHandle {
       get { return result.hasHandle; }
      }
      public global::Network.Packet.RequestHandle Handle {
        get { return result.Handle; }
        set { SetHandle(value); }
      }
      public Builder SetHandle(global::Network.Packet.RequestHandle value) {
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = value;
        return this;
      }
      public Builder ClearHandle() {
        PrepareBuilder();
        result.hasHandle = false;
        result.handle_ = global::Network.Packet.RequestHandle.kRequestError;
        return this;
      }

      public bool HasPakcetId {
        get { return result.hasPakcetId; }
      }
      public ulong PakcetId {
        get { return result.PakcetId; }
        set { SetPakcetId(value); }
      }
      public Builder SetPakcetId(ulong value) {
        PrepareBuilder();
        result.hasPakcetId = true;
        result.pakcetId_ = value;
        return this;
      }
      public Builder ClearPakcetId() {
        PrepareBuilder();
        result.hasPakcetId = false;
        result.pakcetId_ = 0UL;
        return this;
      }

      public bool HasUserToken {
       get { return result.hasUserToken; }
      }
      public global::Network.Packet.UserTokenData UserToken {
        get { return result.UserToken; }
        set { SetUserToken(value); }
      }
      public Builder SetUserToken(global::Network.Packet.UserTokenData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserToken = true;
        result.userToken_ = value;
        return this;
      }
      public Builder SetUserToken(global::Network.Packet.UserTokenData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserToken = true;
        result.userToken_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserToken(global::Network.Packet.UserTokenData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserToken &&
            result.userToken_ != global::Network.Packet.UserTokenData.DefaultInstance) {
            result.userToken_ = global::Network.Packet.UserTokenData.CreateBuilder(result.userToken_).MergeFrom(value).BuildPartial();
        } else {
          result.userToken_ = value;
        }
        result.hasUserToken = true;
        return this;
      }
      public Builder ClearUserToken() {
        PrepareBuilder();
        result.hasUserToken = false;
        result.userToken_ = null;
        return this;
      }

      public bool HasRequestUdpConnnect {
       get { return result.hasRequestUdpConnnect; }
      }
      public global::Network.Packet.Request.Types.RequestUdpConnnect RequestUdpConnnect {
        get { return result.RequestUdpConnnect; }
        set { SetRequestUdpConnnect(value); }
      }
      public Builder SetRequestUdpConnnect(global::Network.Packet.Request.Types.RequestUdpConnnect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestUdpConnnect = true;
        result.requestUdpConnnect_ = value;
        return this;
      }
      public Builder SetRequestUdpConnnect(global::Network.Packet.Request.Types.RequestUdpConnnect.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestUdpConnnect = true;
        result.requestUdpConnnect_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestUdpConnnect(global::Network.Packet.Request.Types.RequestUdpConnnect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestUdpConnnect &&
            result.requestUdpConnnect_ != global::Network.Packet.Request.Types.RequestUdpConnnect.DefaultInstance) {
            result.requestUdpConnnect_ = global::Network.Packet.Request.Types.RequestUdpConnnect.CreateBuilder(result.requestUdpConnnect_).MergeFrom(value).BuildPartial();
        } else {
          result.requestUdpConnnect_ = value;
        }
        result.hasRequestUdpConnnect = true;
        return this;
      }
      public Builder ClearRequestUdpConnnect() {
        PrepareBuilder();
        result.hasRequestUdpConnnect = false;
        result.requestUdpConnnect_ = null;
        return this;
      }

      public bool HasSessionRequestCommandData {
       get { return result.hasSessionRequestCommandData; }
      }
      public global::Network.Packet.Request.Types.SessionRequestCommandData SessionRequestCommandData {
        get { return result.SessionRequestCommandData; }
        set { SetSessionRequestCommandData(value); }
      }
      public Builder SetSessionRequestCommandData(global::Network.Packet.Request.Types.SessionRequestCommandData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionRequestCommandData = true;
        result.sessionRequestCommandData_ = value;
        return this;
      }
      public Builder SetSessionRequestCommandData(global::Network.Packet.Request.Types.SessionRequestCommandData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSessionRequestCommandData = true;
        result.sessionRequestCommandData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSessionRequestCommandData(global::Network.Packet.Request.Types.SessionRequestCommandData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSessionRequestCommandData &&
            result.sessionRequestCommandData_ != global::Network.Packet.Request.Types.SessionRequestCommandData.DefaultInstance) {
            result.sessionRequestCommandData_ = global::Network.Packet.Request.Types.SessionRequestCommandData.CreateBuilder(result.sessionRequestCommandData_).MergeFrom(value).BuildPartial();
        } else {
          result.sessionRequestCommandData_ = value;
        }
        result.hasSessionRequestCommandData = true;
        return this;
      }
      public Builder ClearSessionRequestCommandData() {
        PrepareBuilder();
        result.hasSessionRequestCommandData = false;
        result.sessionRequestCommandData_ = null;
        return this;
      }

      public bool HasUpdateInput {
       get { return result.hasUpdateInput; }
      }
      public global::Network.Packet.Request.Types.InputData UpdateInput {
        get { return result.UpdateInput; }
        set { SetUpdateInput(value); }
      }
      public Builder SetUpdateInput(global::Network.Packet.Request.Types.InputData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpdateInput = true;
        result.updateInput_ = value;
        return this;
      }
      public Builder SetUpdateInput(global::Network.Packet.Request.Types.InputData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUpdateInput = true;
        result.updateInput_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUpdateInput(global::Network.Packet.Request.Types.InputData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUpdateInput &&
            result.updateInput_ != global::Network.Packet.Request.Types.InputData.DefaultInstance) {
            result.updateInput_ = global::Network.Packet.Request.Types.InputData.CreateBuilder(result.updateInput_).MergeFrom(value).BuildPartial();
        } else {
          result.updateInput_ = value;
        }
        result.hasUpdateInput = true;
        return this;
      }
      public Builder ClearUpdateInput() {
        PrepareBuilder();
        result.hasUpdateInput = false;
        result.updateInput_ = null;
        return this;
      }

      public bool HasRequestInitialData {
       get { return result.hasRequestInitialData; }
      }
      public global::Network.Packet.Request.Types.RequestInitialData RequestInitialData {
        get { return result.RequestInitialData; }
        set { SetRequestInitialData(value); }
      }
      public Builder SetRequestInitialData(global::Network.Packet.Request.Types.RequestInitialData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestInitialData = true;
        result.requestInitialData_ = value;
        return this;
      }
      public Builder SetRequestInitialData(global::Network.Packet.Request.Types.RequestInitialData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestInitialData = true;
        result.requestInitialData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestInitialData(global::Network.Packet.Request.Types.RequestInitialData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestInitialData &&
            result.requestInitialData_ != global::Network.Packet.Request.Types.RequestInitialData.DefaultInstance) {
            result.requestInitialData_ = global::Network.Packet.Request.Types.RequestInitialData.CreateBuilder(result.requestInitialData_).MergeFrom(value).BuildPartial();
        } else {
          result.requestInitialData_ = value;
        }
        result.hasRequestInitialData = true;
        return this;
      }
      public Builder ClearRequestInitialData() {
        PrepareBuilder();
        result.hasRequestInitialData = false;
        result.requestInitialData_ = null;
        return this;
      }

      public bool HasRequestEntityBind {
       get { return result.hasRequestEntityBind; }
      }
      public global::Network.Packet.Request.Types.RequestEntityBindData RequestEntityBind {
        get { return result.RequestEntityBind; }
        set { SetRequestEntityBind(value); }
      }
      public Builder SetRequestEntityBind(global::Network.Packet.Request.Types.RequestEntityBindData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestEntityBind = true;
        result.requestEntityBind_ = value;
        return this;
      }
      public Builder SetRequestEntityBind(global::Network.Packet.Request.Types.RequestEntityBindData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestEntityBind = true;
        result.requestEntityBind_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestEntityBind(global::Network.Packet.Request.Types.RequestEntityBindData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestEntityBind &&
            result.requestEntityBind_ != global::Network.Packet.Request.Types.RequestEntityBindData.DefaultInstance) {
            result.requestEntityBind_ = global::Network.Packet.Request.Types.RequestEntityBindData.CreateBuilder(result.requestEntityBind_).MergeFrom(value).BuildPartial();
        } else {
          result.requestEntityBind_ = value;
        }
        result.hasRequestEntityBind = true;
        return this;
      }
      public Builder ClearRequestEntityBind() {
        PrepareBuilder();
        result.hasRequestEntityBind = false;
        result.requestEntityBind_ = null;
        return this;
      }

      public bool HasRequestItemObjectObtainData {
       get { return result.hasRequestItemObjectObtainData; }
      }
      public global::Network.Packet.Request.Types.RequestItemObjectObtainData RequestItemObjectObtainData {
        get { return result.RequestItemObjectObtainData; }
        set { SetRequestItemObjectObtainData(value); }
      }
      public Builder SetRequestItemObjectObtainData(global::Network.Packet.Request.Types.RequestItemObjectObtainData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestItemObjectObtainData = true;
        result.requestItemObjectObtainData_ = value;
        return this;
      }
      public Builder SetRequestItemObjectObtainData(global::Network.Packet.Request.Types.RequestItemObjectObtainData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestItemObjectObtainData = true;
        result.requestItemObjectObtainData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestItemObjectObtainData(global::Network.Packet.Request.Types.RequestItemObjectObtainData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestItemObjectObtainData &&
            result.requestItemObjectObtainData_ != global::Network.Packet.Request.Types.RequestItemObjectObtainData.DefaultInstance) {
            result.requestItemObjectObtainData_ = global::Network.Packet.Request.Types.RequestItemObjectObtainData.CreateBuilder(result.requestItemObjectObtainData_).MergeFrom(value).BuildPartial();
        } else {
          result.requestItemObjectObtainData_ = value;
        }
        result.hasRequestItemObjectObtainData = true;
        return this;
      }
      public Builder ClearRequestItemObjectObtainData() {
        PrepareBuilder();
        result.hasRequestItemObjectObtainData = false;
        result.requestItemObjectObtainData_ = null;
        return this;
      }

      public bool HasSwapInventoryIndex {
        get { return result.hasSwapInventoryIndex; }
      }
      public int SwapInventoryIndex {
        get { return result.SwapInventoryIndex; }
        set { SetSwapInventoryIndex(value); }
      }
      public Builder SetSwapInventoryIndex(int value) {
        PrepareBuilder();
        result.hasSwapInventoryIndex = true;
        result.swapInventoryIndex_ = value;
        return this;
      }
      public Builder ClearSwapInventoryIndex() {
        PrepareBuilder();
        result.hasSwapInventoryIndex = false;
        result.swapInventoryIndex_ = 0;
        return this;
      }

      public bool HasCheckPointNumber {
        get { return result.hasCheckPointNumber; }
      }
      public int CheckPointNumber {
        get { return result.CheckPointNumber; }
        set { SetCheckPointNumber(value); }
      }
      public Builder SetCheckPointNumber(int value) {
        PrepareBuilder();
        result.hasCheckPointNumber = true;
        result.checkPointNumber_ = value;
        return this;
      }
      public Builder ClearCheckPointNumber() {
        PrepareBuilder();
        result.hasCheckPointNumber = false;
        result.checkPointNumber_ = 0;
        return this;
      }

      public bool HasRequestEquipWeapon {
       get { return result.hasRequestEquipWeapon; }
      }
      public global::Network.Packet.Request.Types.RequestEquipWeaponData RequestEquipWeapon {
        get { return result.RequestEquipWeapon; }
        set { SetRequestEquipWeapon(value); }
      }
      public Builder SetRequestEquipWeapon(global::Network.Packet.Request.Types.RequestEquipWeaponData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestEquipWeapon = true;
        result.requestEquipWeapon_ = value;
        return this;
      }
      public Builder SetRequestEquipWeapon(global::Network.Packet.Request.Types.RequestEquipWeaponData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestEquipWeapon = true;
        result.requestEquipWeapon_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestEquipWeapon(global::Network.Packet.Request.Types.RequestEquipWeaponData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestEquipWeapon &&
            result.requestEquipWeapon_ != global::Network.Packet.Request.Types.RequestEquipWeaponData.DefaultInstance) {
            result.requestEquipWeapon_ = global::Network.Packet.Request.Types.RequestEquipWeaponData.CreateBuilder(result.requestEquipWeapon_).MergeFrom(value).BuildPartial();
        } else {
          result.requestEquipWeapon_ = value;
        }
        result.hasRequestEquipWeapon = true;
        return this;
      }
      public Builder ClearRequestEquipWeapon() {
        PrepareBuilder();
        result.hasRequestEquipWeapon = false;
        result.requestEquipWeapon_ = null;
        return this;
      }

      public bool HasRequestTitleInput {
       get { return result.hasRequestTitleInput; }
      }
      public global::Network.Packet.Request.Types.RequestTitleInput RequestTitleInput {
        get { return result.RequestTitleInput; }
        set { SetRequestTitleInput(value); }
      }
      public Builder SetRequestTitleInput(global::Network.Packet.Request.Types.RequestTitleInput value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestTitleInput = true;
        result.requestTitleInput_ = value;
        return this;
      }
      public Builder SetRequestTitleInput(global::Network.Packet.Request.Types.RequestTitleInput.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestTitleInput = true;
        result.requestTitleInput_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestTitleInput(global::Network.Packet.Request.Types.RequestTitleInput value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestTitleInput &&
            result.requestTitleInput_ != global::Network.Packet.Request.Types.RequestTitleInput.DefaultInstance) {
            result.requestTitleInput_ = global::Network.Packet.Request.Types.RequestTitleInput.CreateBuilder(result.requestTitleInput_).MergeFrom(value).BuildPartial();
        } else {
          result.requestTitleInput_ = value;
        }
        result.hasRequestTitleInput = true;
        return this;
      }
      public Builder ClearRequestTitleInput() {
        PrepareBuilder();
        result.hasRequestTitleInput = false;
        result.requestTitleInput_ = null;
        return this;
      }

      public bool HasRequestClientReadyState {
       get { return result.hasRequestClientReadyState; }
      }
      public global::Network.Packet.Request.Types.RequestClientReadyState RequestClientReadyState {
        get { return result.RequestClientReadyState; }
        set { SetRequestClientReadyState(value); }
      }
      public Builder SetRequestClientReadyState(global::Network.Packet.Request.Types.RequestClientReadyState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestClientReadyState = true;
        result.requestClientReadyState_ = value;
        return this;
      }
      public Builder SetRequestClientReadyState(global::Network.Packet.Request.Types.RequestClientReadyState.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestClientReadyState = true;
        result.requestClientReadyState_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestClientReadyState(global::Network.Packet.Request.Types.RequestClientReadyState value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestClientReadyState &&
            result.requestClientReadyState_ != global::Network.Packet.Request.Types.RequestClientReadyState.DefaultInstance) {
            result.requestClientReadyState_ = global::Network.Packet.Request.Types.RequestClientReadyState.CreateBuilder(result.requestClientReadyState_).MergeFrom(value).BuildPartial();
        } else {
          result.requestClientReadyState_ = value;
        }
        result.hasRequestClientReadyState = true;
        return this;
      }
      public Builder ClearRequestClientReadyState() {
        PrepareBuilder();
        result.hasRequestClientReadyState = false;
        result.requestClientReadyState_ = null;
        return this;
      }
    }
    static Request() {
      object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::GeneratedMessageLite<Response, Response.Builder> {
    private Response() { }
    private static readonly Response defaultInstance = new Response().MakeReadOnly();
    private static readonly string[] _responseFieldNames = new string[] { "detector_action_data", "entity_action_data", "entity_spawn_data", "entity_state_data", "entity_transform_data", "handle", "item_object_action_data", "item_object_state_data", "locator_action_data", "locator_state_data", "log_message", "pakcet_id", "remote_play_cinema_name", "session_Response_command_data", "user_disconnected_data" };
    private static readonly uint[] _responseFieldTags = new uint[] { 2082, 2002, 1602, 1762, 1842, 80, 3282, 3202, 2482, 2402, 962, 160, 3522, 802, 882 };
    public static Response DefaultInstance {
      get { return defaultInstance; }
    }

    public override Response DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Response ThisMessage {
      get { return this; }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum EntityAction {
        kDestroy = 4,
        kDie = 5,
        kUseWeapon = 10,
        kAttack = 11,
        kEquipWeapon = 20,
        kUnequipWeapon = 21,
        kAnimation = 22,
        kRegenHp = 30,
        kTriggerString = 40,
      }

      public enum AnimationType {
        kTrigger = 1,
        kBool = 2,
        kFloat = 3,
        kInt = 4,
        kOther = 5,
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class SessionResponseCommandData : pb::GeneratedMessageLite<SessionResponseCommandData, SessionResponseCommandData.Builder> {
        private SessionResponseCommandData() { }
        private static readonly SessionResponseCommandData defaultInstance = new SessionResponseCommandData().MakeReadOnly();
        private static readonly string[] _sessionResponseCommandDataFieldNames = new string[] { "change_map_name", "chat_message", "chat_username", "command", "denied_reason", "dropped_weapon_item_type", "obtained_item_type", "poori_script_code", "server_operation_result_code", "tick" };
        private static readonly uint[] _sessionResponseCommandDataFieldTags = new uint[] { 82, 322, 242, 8, 26, 200, 160, 400, 16, 40 };
        public static SessionResponseCommandData DefaultInstance {
          get { return defaultInstance; }
        }

        public override SessionResponseCommandData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override SessionResponseCommandData ThisMessage {
          get { return this; }
        }

        public const int CommandFieldNumber = 1;
        private bool hasCommand;
        private global::Network.Packet.ResponseCommandHandle command_ = global::Network.Packet.ResponseCommandHandle.kCommandServerOperationResult;
        public bool HasCommand {
          get { return hasCommand; }
        }
        public global::Network.Packet.ResponseCommandHandle Command {
          get { return command_; }
        }

        public const int ServerOperationResultCodeFieldNumber = 2;
        private bool hasServerOperationResultCode;
        private int serverOperationResultCode_;
        public bool HasServerOperationResultCode {
          get { return hasServerOperationResultCode; }
        }
        public int ServerOperationResultCode {
          get { return serverOperationResultCode_; }
        }

        public const int DeniedReasonFieldNumber = 3;
        private bool hasDeniedReason;
        private string deniedReason_ = "";
        public bool HasDeniedReason {
          get { return hasDeniedReason; }
        }
        public string DeniedReason {
          get { return deniedReason_; }
        }

        public const int TickFieldNumber = 5;
        private bool hasTick;
        private long tick_;
        public bool HasTick {
          get { return hasTick; }
        }
        public long Tick {
          get { return tick_; }
        }

        public const int ChangeMapNameFieldNumber = 10;
        private bool hasChangeMapName;
        private string changeMapName_ = "";
        public bool HasChangeMapName {
          get { return hasChangeMapName; }
        }
        public string ChangeMapName {
          get { return changeMapName_; }
        }

        public const int ObtainedItemTypeFieldNumber = 20;
        private bool hasObtainedItemType;
        private global::Network.Packet.ItemType obtainedItemType_ = global::Network.Packet.ItemType.kNoneItemType;
        public bool HasObtainedItemType {
          get { return hasObtainedItemType; }
        }
        public global::Network.Packet.ItemType ObtainedItemType {
          get { return obtainedItemType_; }
        }

        public const int DroppedWeaponItemTypeFieldNumber = 25;
        private bool hasDroppedWeaponItemType;
        private global::Network.Packet.ItemType droppedWeaponItemType_ = global::Network.Packet.ItemType.kNoneItemType;
        public bool HasDroppedWeaponItemType {
          get { return hasDroppedWeaponItemType; }
        }
        public global::Network.Packet.ItemType DroppedWeaponItemType {
          get { return droppedWeaponItemType_; }
        }

        public const int ChatUsernameFieldNumber = 30;
        private bool hasChatUsername;
        private string chatUsername_ = "";
        public bool HasChatUsername {
          get { return hasChatUsername; }
        }
        public string ChatUsername {
          get { return chatUsername_; }
        }

        public const int ChatMessageFieldNumber = 40;
        private bool hasChatMessage;
        private string chatMessage_ = "";
        public bool HasChatMessage {
          get { return hasChatMessage; }
        }
        public string ChatMessage {
          get { return chatMessage_; }
        }

        public const int PooriScriptCodeFieldNumber = 50;
        private bool hasPooriScriptCode;
        private int pooriScriptCode_;
        public bool HasPooriScriptCode {
          get { return hasPooriScriptCode; }
        }
        public int PooriScriptCode {
          get { return pooriScriptCode_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _sessionResponseCommandDataFieldNames;
          if (hasCommand) {
            output.WriteEnum(1, field_names[3], (int) Command, Command);
          }
          if (hasServerOperationResultCode) {
            output.WriteInt32(2, field_names[8], ServerOperationResultCode);
          }
          if (hasDeniedReason) {
            output.WriteString(3, field_names[4], DeniedReason);
          }
          if (hasTick) {
            output.WriteInt64(5, field_names[9], Tick);
          }
          if (hasChangeMapName) {
            output.WriteString(10, field_names[0], ChangeMapName);
          }
          if (hasObtainedItemType) {
            output.WriteEnum(20, field_names[6], (int) ObtainedItemType, ObtainedItemType);
          }
          if (hasDroppedWeaponItemType) {
            output.WriteEnum(25, field_names[5], (int) DroppedWeaponItemType, DroppedWeaponItemType);
          }
          if (hasChatUsername) {
            output.WriteString(30, field_names[2], ChatUsername);
          }
          if (hasChatMessage) {
            output.WriteString(40, field_names[1], ChatMessage);
          }
          if (hasPooriScriptCode) {
            output.WriteInt32(50, field_names[7], PooriScriptCode);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasCommand) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Command);
          }
          if (hasServerOperationResultCode) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, ServerOperationResultCode);
          }
          if (hasDeniedReason) {
            size += pb::CodedOutputStream.ComputeStringSize(3, DeniedReason);
          }
          if (hasTick) {
            size += pb::CodedOutputStream.ComputeInt64Size(5, Tick);
          }
          if (hasChangeMapName) {
            size += pb::CodedOutputStream.ComputeStringSize(10, ChangeMapName);
          }
          if (hasObtainedItemType) {
            size += pb::CodedOutputStream.ComputeEnumSize(20, (int) ObtainedItemType);
          }
          if (hasDroppedWeaponItemType) {
            size += pb::CodedOutputStream.ComputeEnumSize(25, (int) DroppedWeaponItemType);
          }
          if (hasChatUsername) {
            size += pb::CodedOutputStream.ComputeStringSize(30, ChatUsername);
          }
          if (hasChatMessage) {
            size += pb::CodedOutputStream.ComputeStringSize(40, ChatMessage);
          }
          if (hasPooriScriptCode) {
            size += pb::CodedOutputStream.ComputeInt32Size(50, PooriScriptCode);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasCommand) {
            hash ^= command_.GetHashCode();
          }
          if (hasServerOperationResultCode) {
            hash ^= serverOperationResultCode_.GetHashCode();
          }
          if (hasDeniedReason) {
            hash ^= deniedReason_.GetHashCode();
          }
          if (hasTick) {
            hash ^= tick_.GetHashCode();
          }
          if (hasChangeMapName) {
            hash ^= changeMapName_.GetHashCode();
          }
          if (hasObtainedItemType) {
            hash ^= obtainedItemType_.GetHashCode();
          }
          if (hasDroppedWeaponItemType) {
            hash ^= droppedWeaponItemType_.GetHashCode();
          }
          if (hasChatUsername) {
            hash ^= chatUsername_.GetHashCode();
          }
          if (hasChatMessage) {
            hash ^= chatMessage_.GetHashCode();
          }
          if (hasPooriScriptCode) {
            hash ^= pooriScriptCode_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          SessionResponseCommandData other = obj as SessionResponseCommandData;
          if (other == null) return false;
          if (hasCommand != other.hasCommand || (hasCommand && !command_.Equals(other.command_))) return false;
          if (hasServerOperationResultCode != other.hasServerOperationResultCode || (hasServerOperationResultCode && !serverOperationResultCode_.Equals(other.serverOperationResultCode_))) return false;
          if (hasDeniedReason != other.hasDeniedReason || (hasDeniedReason && !deniedReason_.Equals(other.deniedReason_))) return false;
          if (hasTick != other.hasTick || (hasTick && !tick_.Equals(other.tick_))) return false;
          if (hasChangeMapName != other.hasChangeMapName || (hasChangeMapName && !changeMapName_.Equals(other.changeMapName_))) return false;
          if (hasObtainedItemType != other.hasObtainedItemType || (hasObtainedItemType && !obtainedItemType_.Equals(other.obtainedItemType_))) return false;
          if (hasDroppedWeaponItemType != other.hasDroppedWeaponItemType || (hasDroppedWeaponItemType && !droppedWeaponItemType_.Equals(other.droppedWeaponItemType_))) return false;
          if (hasChatUsername != other.hasChatUsername || (hasChatUsername && !chatUsername_.Equals(other.chatUsername_))) return false;
          if (hasChatMessage != other.hasChatMessage || (hasChatMessage && !chatMessage_.Equals(other.chatMessage_))) return false;
          if (hasPooriScriptCode != other.hasPooriScriptCode || (hasPooriScriptCode && !pooriScriptCode_.Equals(other.pooriScriptCode_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("command", hasCommand, command_, writer);
          PrintField("server_operation_result_code", hasServerOperationResultCode, serverOperationResultCode_, writer);
          PrintField("denied_reason", hasDeniedReason, deniedReason_, writer);
          PrintField("tick", hasTick, tick_, writer);
          PrintField("change_map_name", hasChangeMapName, changeMapName_, writer);
          PrintField("obtained_item_type", hasObtainedItemType, obtainedItemType_, writer);
          PrintField("dropped_weapon_item_type", hasDroppedWeaponItemType, droppedWeaponItemType_, writer);
          PrintField("chat_username", hasChatUsername, chatUsername_, writer);
          PrintField("chat_message", hasChatMessage, chatMessage_, writer);
          PrintField("poori_script_code", hasPooriScriptCode, pooriScriptCode_, writer);
        }
        #endregion

        public static SessionResponseCommandData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SessionResponseCommandData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SessionResponseCommandData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SessionResponseCommandData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SessionResponseCommandData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SessionResponseCommandData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SessionResponseCommandData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SessionResponseCommandData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SessionResponseCommandData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SessionResponseCommandData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SessionResponseCommandData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SessionResponseCommandData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<SessionResponseCommandData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(SessionResponseCommandData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private SessionResponseCommandData result;

          private SessionResponseCommandData PrepareBuilder() {
            if (resultIsReadOnly) {
              SessionResponseCommandData original = result;
              result = new SessionResponseCommandData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override SessionResponseCommandData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override SessionResponseCommandData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.SessionResponseCommandData.DefaultInstance; }
          }

          public override SessionResponseCommandData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is SessionResponseCommandData) {
              return MergeFrom((SessionResponseCommandData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(SessionResponseCommandData other) {
            if (other == global::Network.Packet.Response.Types.SessionResponseCommandData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasCommand) {
              Command = other.Command;
            }
            if (other.HasServerOperationResultCode) {
              ServerOperationResultCode = other.ServerOperationResultCode;
            }
            if (other.HasDeniedReason) {
              DeniedReason = other.DeniedReason;
            }
            if (other.HasTick) {
              Tick = other.Tick;
            }
            if (other.HasChangeMapName) {
              ChangeMapName = other.ChangeMapName;
            }
            if (other.HasObtainedItemType) {
              ObtainedItemType = other.ObtainedItemType;
            }
            if (other.HasDroppedWeaponItemType) {
              DroppedWeaponItemType = other.DroppedWeaponItemType;
            }
            if (other.HasChatUsername) {
              ChatUsername = other.ChatUsername;
            }
            if (other.HasChatMessage) {
              ChatMessage = other.ChatMessage;
            }
            if (other.HasPooriScriptCode) {
              PooriScriptCode = other.PooriScriptCode;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_sessionResponseCommandDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _sessionResponseCommandDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.command_, out unknown)) {
                    result.hasCommand = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 16: {
                  result.hasServerOperationResultCode = input.ReadInt32(ref result.serverOperationResultCode_);
                  break;
                }
                case 26: {
                  result.hasDeniedReason = input.ReadString(ref result.deniedReason_);
                  break;
                }
                case 40: {
                  result.hasTick = input.ReadInt64(ref result.tick_);
                  break;
                }
                case 82: {
                  result.hasChangeMapName = input.ReadString(ref result.changeMapName_);
                  break;
                }
                case 160: {
                  object unknown;
                  if(input.ReadEnum(ref result.obtainedItemType_, out unknown)) {
                    result.hasObtainedItemType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 200: {
                  object unknown;
                  if(input.ReadEnum(ref result.droppedWeaponItemType_, out unknown)) {
                    result.hasDroppedWeaponItemType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 242: {
                  result.hasChatUsername = input.ReadString(ref result.chatUsername_);
                  break;
                }
                case 322: {
                  result.hasChatMessage = input.ReadString(ref result.chatMessage_);
                  break;
                }
                case 400: {
                  result.hasPooriScriptCode = input.ReadInt32(ref result.pooriScriptCode_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasCommand {
           get { return result.hasCommand; }
          }
          public global::Network.Packet.ResponseCommandHandle Command {
            get { return result.Command; }
            set { SetCommand(value); }
          }
          public Builder SetCommand(global::Network.Packet.ResponseCommandHandle value) {
            PrepareBuilder();
            result.hasCommand = true;
            result.command_ = value;
            return this;
          }
          public Builder ClearCommand() {
            PrepareBuilder();
            result.hasCommand = false;
            result.command_ = global::Network.Packet.ResponseCommandHandle.kCommandServerOperationResult;
            return this;
          }

          public bool HasServerOperationResultCode {
            get { return result.hasServerOperationResultCode; }
          }
          public int ServerOperationResultCode {
            get { return result.ServerOperationResultCode; }
            set { SetServerOperationResultCode(value); }
          }
          public Builder SetServerOperationResultCode(int value) {
            PrepareBuilder();
            result.hasServerOperationResultCode = true;
            result.serverOperationResultCode_ = value;
            return this;
          }
          public Builder ClearServerOperationResultCode() {
            PrepareBuilder();
            result.hasServerOperationResultCode = false;
            result.serverOperationResultCode_ = 0;
            return this;
          }

          public bool HasDeniedReason {
            get { return result.hasDeniedReason; }
          }
          public string DeniedReason {
            get { return result.DeniedReason; }
            set { SetDeniedReason(value); }
          }
          public Builder SetDeniedReason(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDeniedReason = true;
            result.deniedReason_ = value;
            return this;
          }
          public Builder ClearDeniedReason() {
            PrepareBuilder();
            result.hasDeniedReason = false;
            result.deniedReason_ = "";
            return this;
          }

          public bool HasTick {
            get { return result.hasTick; }
          }
          public long Tick {
            get { return result.Tick; }
            set { SetTick(value); }
          }
          public Builder SetTick(long value) {
            PrepareBuilder();
            result.hasTick = true;
            result.tick_ = value;
            return this;
          }
          public Builder ClearTick() {
            PrepareBuilder();
            result.hasTick = false;
            result.tick_ = 0L;
            return this;
          }

          public bool HasChangeMapName {
            get { return result.hasChangeMapName; }
          }
          public string ChangeMapName {
            get { return result.ChangeMapName; }
            set { SetChangeMapName(value); }
          }
          public Builder SetChangeMapName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasChangeMapName = true;
            result.changeMapName_ = value;
            return this;
          }
          public Builder ClearChangeMapName() {
            PrepareBuilder();
            result.hasChangeMapName = false;
            result.changeMapName_ = "";
            return this;
          }

          public bool HasObtainedItemType {
           get { return result.hasObtainedItemType; }
          }
          public global::Network.Packet.ItemType ObtainedItemType {
            get { return result.ObtainedItemType; }
            set { SetObtainedItemType(value); }
          }
          public Builder SetObtainedItemType(global::Network.Packet.ItemType value) {
            PrepareBuilder();
            result.hasObtainedItemType = true;
            result.obtainedItemType_ = value;
            return this;
          }
          public Builder ClearObtainedItemType() {
            PrepareBuilder();
            result.hasObtainedItemType = false;
            result.obtainedItemType_ = global::Network.Packet.ItemType.kNoneItemType;
            return this;
          }

          public bool HasDroppedWeaponItemType {
           get { return result.hasDroppedWeaponItemType; }
          }
          public global::Network.Packet.ItemType DroppedWeaponItemType {
            get { return result.DroppedWeaponItemType; }
            set { SetDroppedWeaponItemType(value); }
          }
          public Builder SetDroppedWeaponItemType(global::Network.Packet.ItemType value) {
            PrepareBuilder();
            result.hasDroppedWeaponItemType = true;
            result.droppedWeaponItemType_ = value;
            return this;
          }
          public Builder ClearDroppedWeaponItemType() {
            PrepareBuilder();
            result.hasDroppedWeaponItemType = false;
            result.droppedWeaponItemType_ = global::Network.Packet.ItemType.kNoneItemType;
            return this;
          }

          public bool HasChatUsername {
            get { return result.hasChatUsername; }
          }
          public string ChatUsername {
            get { return result.ChatUsername; }
            set { SetChatUsername(value); }
          }
          public Builder SetChatUsername(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasChatUsername = true;
            result.chatUsername_ = value;
            return this;
          }
          public Builder ClearChatUsername() {
            PrepareBuilder();
            result.hasChatUsername = false;
            result.chatUsername_ = "";
            return this;
          }

          public bool HasChatMessage {
            get { return result.hasChatMessage; }
          }
          public string ChatMessage {
            get { return result.ChatMessage; }
            set { SetChatMessage(value); }
          }
          public Builder SetChatMessage(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasChatMessage = true;
            result.chatMessage_ = value;
            return this;
          }
          public Builder ClearChatMessage() {
            PrepareBuilder();
            result.hasChatMessage = false;
            result.chatMessage_ = "";
            return this;
          }

          public bool HasPooriScriptCode {
            get { return result.hasPooriScriptCode; }
          }
          public int PooriScriptCode {
            get { return result.PooriScriptCode; }
            set { SetPooriScriptCode(value); }
          }
          public Builder SetPooriScriptCode(int value) {
            PrepareBuilder();
            result.hasPooriScriptCode = true;
            result.pooriScriptCode_ = value;
            return this;
          }
          public Builder ClearPooriScriptCode() {
            PrepareBuilder();
            result.hasPooriScriptCode = false;
            result.pooriScriptCode_ = 0;
            return this;
          }
        }
        static SessionResponseCommandData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class UserDisconnectedData : pb::GeneratedMessageLite<UserDisconnectedData, UserDisconnectedData.Builder> {
        private UserDisconnectedData() { }
        private static readonly UserDisconnectedData defaultInstance = new UserDisconnectedData().MakeReadOnly();
        private static readonly string[] _userDisconnectedDataFieldNames = new string[] { "disconnected_user_token" };
        private static readonly uint[] _userDisconnectedDataFieldTags = new uint[] { 10 };
        public static UserDisconnectedData DefaultInstance {
          get { return defaultInstance; }
        }

        public override UserDisconnectedData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override UserDisconnectedData ThisMessage {
          get { return this; }
        }

        public const int DisconnectedUserTokenFieldNumber = 1;
        private bool hasDisconnectedUserToken;
        private global::Network.Packet.UserTokenData disconnectedUserToken_;
        public bool HasDisconnectedUserToken {
          get { return hasDisconnectedUserToken; }
        }
        public global::Network.Packet.UserTokenData DisconnectedUserToken {
          get { return disconnectedUserToken_ ?? global::Network.Packet.UserTokenData.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _userDisconnectedDataFieldNames;
          if (hasDisconnectedUserToken) {
            output.WriteMessage(1, field_names[0], DisconnectedUserToken);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasDisconnectedUserToken) {
            size += pb::CodedOutputStream.ComputeMessageSize(1, DisconnectedUserToken);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasDisconnectedUserToken) hash ^= disconnectedUserToken_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          UserDisconnectedData other = obj as UserDisconnectedData;
          if (other == null) return false;
          if (hasDisconnectedUserToken != other.hasDisconnectedUserToken || (hasDisconnectedUserToken && !disconnectedUserToken_.Equals(other.disconnectedUserToken_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("disconnected_user_token", hasDisconnectedUserToken, disconnectedUserToken_, writer);
        }
        #endregion

        public static UserDisconnectedData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UserDisconnectedData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UserDisconnectedData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UserDisconnectedData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UserDisconnectedData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UserDisconnectedData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static UserDisconnectedData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static UserDisconnectedData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static UserDisconnectedData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UserDisconnectedData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private UserDisconnectedData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(UserDisconnectedData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<UserDisconnectedData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(UserDisconnectedData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private UserDisconnectedData result;

          private UserDisconnectedData PrepareBuilder() {
            if (resultIsReadOnly) {
              UserDisconnectedData original = result;
              result = new UserDisconnectedData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override UserDisconnectedData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override UserDisconnectedData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.UserDisconnectedData.DefaultInstance; }
          }

          public override UserDisconnectedData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is UserDisconnectedData) {
              return MergeFrom((UserDisconnectedData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(UserDisconnectedData other) {
            if (other == global::Network.Packet.Response.Types.UserDisconnectedData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasDisconnectedUserToken) {
              MergeDisconnectedUserToken(other.DisconnectedUserToken);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_userDisconnectedDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _userDisconnectedDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  global::Network.Packet.UserTokenData.Builder subBuilder = global::Network.Packet.UserTokenData.CreateBuilder();
                  if (result.hasDisconnectedUserToken) {
                    subBuilder.MergeFrom(DisconnectedUserToken);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  DisconnectedUserToken = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasDisconnectedUserToken {
           get { return result.hasDisconnectedUserToken; }
          }
          public global::Network.Packet.UserTokenData DisconnectedUserToken {
            get { return result.DisconnectedUserToken; }
            set { SetDisconnectedUserToken(value); }
          }
          public Builder SetDisconnectedUserToken(global::Network.Packet.UserTokenData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDisconnectedUserToken = true;
            result.disconnectedUserToken_ = value;
            return this;
          }
          public Builder SetDisconnectedUserToken(global::Network.Packet.UserTokenData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasDisconnectedUserToken = true;
            result.disconnectedUserToken_ = builderForValue.Build();
            return this;
          }
          public Builder MergeDisconnectedUserToken(global::Network.Packet.UserTokenData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasDisconnectedUserToken &&
                result.disconnectedUserToken_ != global::Network.Packet.UserTokenData.DefaultInstance) {
                result.disconnectedUserToken_ = global::Network.Packet.UserTokenData.CreateBuilder(result.disconnectedUserToken_).MergeFrom(value).BuildPartial();
            } else {
              result.disconnectedUserToken_ = value;
            }
            result.hasDisconnectedUserToken = true;
            return this;
          }
          public Builder ClearDisconnectedUserToken() {
            PrepareBuilder();
            result.hasDisconnectedUserToken = false;
            result.disconnectedUserToken_ = null;
            return this;
          }
        }
        static UserDisconnectedData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class LogMessage : pb::GeneratedMessageLite<LogMessage, LogMessage.Builder> {
        private LogMessage() { }
        private static readonly LogMessage defaultInstance = new LogMessage().MakeReadOnly();
        private static readonly string[] _logMessageFieldNames = new string[] { "error_code", "log_message" };
        private static readonly uint[] _logMessageFieldTags = new uint[] { 16, 10 };
        public static LogMessage DefaultInstance {
          get { return defaultInstance; }
        }

        public override LogMessage DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override LogMessage ThisMessage {
          get { return this; }
        }

        public const int LogMessage_FieldNumber = 1;
        private bool hasLogMessage_;
        private string logMessage_ = "";
        public bool HasLogMessage_ {
          get { return hasLogMessage_; }
        }
        public string LogMessage_ {
          get { return logMessage_; }
        }

        public const int ErrorCodeFieldNumber = 2;
        private bool hasErrorCode;
        private global::Network.Packet.ErrorCode errorCode_ = global::Network.Packet.ErrorCode.kOK;
        public bool HasErrorCode {
          get { return hasErrorCode; }
        }
        public global::Network.Packet.ErrorCode ErrorCode {
          get { return errorCode_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _logMessageFieldNames;
          if (hasLogMessage_) {
            output.WriteString(1, field_names[1], LogMessage_);
          }
          if (hasErrorCode) {
            output.WriteEnum(2, field_names[0], (int) ErrorCode, ErrorCode);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasLogMessage_) {
            size += pb::CodedOutputStream.ComputeStringSize(1, LogMessage_);
          }
          if (hasErrorCode) {
            size += pb::CodedOutputStream.ComputeEnumSize(2, (int) ErrorCode);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasLogMessage_) {
            hash ^= logMessage_.GetHashCode();
          }
          if (hasErrorCode) {
            hash ^= errorCode_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          LogMessage other = obj as LogMessage;
          if (other == null) return false;
          if (hasLogMessage_ != other.hasLogMessage_ || (hasLogMessage_ && !logMessage_.Equals(other.logMessage_))) return false;
          if (hasErrorCode != other.hasErrorCode || (hasErrorCode && !errorCode_.Equals(other.errorCode_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("log_message", hasLogMessage_, logMessage_, writer);
          PrintField("error_code", hasErrorCode, errorCode_, writer);
        }
        #endregion

        public static LogMessage ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LogMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LogMessage ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LogMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LogMessage ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LogMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static LogMessage ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static LogMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static LogMessage ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LogMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private LogMessage MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(LogMessage prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<LogMessage, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(LogMessage cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private LogMessage result;

          private LogMessage PrepareBuilder() {
            if (resultIsReadOnly) {
              LogMessage original = result;
              result = new LogMessage();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override LogMessage MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override LogMessage DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.LogMessage.DefaultInstance; }
          }

          public override LogMessage BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is LogMessage) {
              return MergeFrom((LogMessage) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(LogMessage other) {
            if (other == global::Network.Packet.Response.Types.LogMessage.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasLogMessage_) {
              LogMessage_ = other.LogMessage_;
            }
            if (other.HasErrorCode) {
              ErrorCode = other.ErrorCode;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_logMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _logMessageFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasLogMessage_ = input.ReadString(ref result.logMessage_);
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.errorCode_, out unknown)) {
                    result.hasErrorCode = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
              }
            }

            return this;
          }


          public bool HasLogMessage_ {
            get { return result.hasLogMessage_; }
          }
          public string LogMessage_ {
            get { return result.LogMessage_; }
            set { SetLogMessage_(value); }
          }
          public Builder SetLogMessage_(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasLogMessage_ = true;
            result.logMessage_ = value;
            return this;
          }
          public Builder ClearLogMessage_() {
            PrepareBuilder();
            result.hasLogMessage_ = false;
            result.logMessage_ = "";
            return this;
          }

          public bool HasErrorCode {
           get { return result.hasErrorCode; }
          }
          public global::Network.Packet.ErrorCode ErrorCode {
            get { return result.ErrorCode; }
            set { SetErrorCode(value); }
          }
          public Builder SetErrorCode(global::Network.Packet.ErrorCode value) {
            PrepareBuilder();
            result.hasErrorCode = true;
            result.errorCode_ = value;
            return this;
          }
          public Builder ClearErrorCode() {
            PrepareBuilder();
            result.hasErrorCode = false;
            result.errorCode_ = global::Network.Packet.ErrorCode.kOK;
            return this;
          }
        }
        static LogMessage() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class EntitySpawnData : pb::GeneratedMessageLite<EntitySpawnData, EntitySpawnData.Builder> {
        private EntitySpawnData() { }
        private static readonly EntitySpawnData defaultInstance = new EntitySpawnData().MakeReadOnly();
        private static readonly string[] _entitySpawnDataFieldNames = new string[] { "entity_id", "entity_state_data", "entity_type", "faction_type", "spawn_position", "spawn_rotation" };
        private static readonly uint[] _entitySpawnDataFieldTags = new uint[] { 8, 34, 16, 24, 42, 50 };
        public static EntitySpawnData DefaultInstance {
          get { return defaultInstance; }
        }

        public override EntitySpawnData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override EntitySpawnData ThisMessage {
          get { return this; }
        }

        public const int EntityIdFieldNumber = 1;
        private bool hasEntityId;
        private int entityId_;
        public bool HasEntityId {
          get { return hasEntityId; }
        }
        public int EntityId {
          get { return entityId_; }
        }

        public const int EntityTypeFieldNumber = 2;
        private bool hasEntityType;
        private global::Network.Packet.EntityType entityType_ = global::Network.Packet.EntityType.kNoneEntityType;
        public bool HasEntityType {
          get { return hasEntityType; }
        }
        public global::Network.Packet.EntityType EntityType {
          get { return entityType_; }
        }

        public const int FactionTypeFieldNumber = 3;
        private bool hasFactionType;
        private global::Network.Packet.FactionType factionType_ = global::Network.Packet.FactionType.kNoneFactionType;
        public bool HasFactionType {
          get { return hasFactionType; }
        }
        public global::Network.Packet.FactionType FactionType {
          get { return factionType_; }
        }

        public const int EntityStateDataFieldNumber = 4;
        private bool hasEntityStateData;
        private global::Network.Packet.Response.Types.EntityStateData entityStateData_;
        public bool HasEntityStateData {
          get { return hasEntityStateData; }
        }
        public global::Network.Packet.Response.Types.EntityStateData EntityStateData {
          get { return entityStateData_ ?? global::Network.Packet.Response.Types.EntityStateData.DefaultInstance; }
        }

        public const int SpawnPositionFieldNumber = 5;
        private bool hasSpawnPosition;
        private global::Network.Packet.Vector3Data spawnPosition_;
        public bool HasSpawnPosition {
          get { return hasSpawnPosition; }
        }
        public global::Network.Packet.Vector3Data SpawnPosition {
          get { return spawnPosition_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int SpawnRotationFieldNumber = 6;
        private bool hasSpawnRotation;
        private global::Network.Packet.Vector4Data spawnRotation_;
        public bool HasSpawnRotation {
          get { return hasSpawnRotation; }
        }
        public global::Network.Packet.Vector4Data SpawnRotation {
          get { return spawnRotation_ ?? global::Network.Packet.Vector4Data.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _entitySpawnDataFieldNames;
          if (hasEntityId) {
            output.WriteInt32(1, field_names[0], EntityId);
          }
          if (hasEntityType) {
            output.WriteEnum(2, field_names[2], (int) EntityType, EntityType);
          }
          if (hasFactionType) {
            output.WriteEnum(3, field_names[3], (int) FactionType, FactionType);
          }
          if (hasEntityStateData) {
            output.WriteMessage(4, field_names[1], EntityStateData);
          }
          if (hasSpawnPosition) {
            output.WriteMessage(5, field_names[4], SpawnPosition);
          }
          if (hasSpawnRotation) {
            output.WriteMessage(6, field_names[5], SpawnRotation);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasEntityId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, EntityId);
          }
          if (hasEntityType) {
            size += pb::CodedOutputStream.ComputeEnumSize(2, (int) EntityType);
          }
          if (hasFactionType) {
            size += pb::CodedOutputStream.ComputeEnumSize(3, (int) FactionType);
          }
          if (hasEntityStateData) {
            size += pb::CodedOutputStream.ComputeMessageSize(4, EntityStateData);
          }
          if (hasSpawnPosition) {
            size += pb::CodedOutputStream.ComputeMessageSize(5, SpawnPosition);
          }
          if (hasSpawnRotation) {
            size += pb::CodedOutputStream.ComputeMessageSize(6, SpawnRotation);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasEntityId) {
            hash ^= entityId_.GetHashCode();
          }
          if (hasEntityType) {
            hash ^= entityType_.GetHashCode();
          }
          if (hasFactionType) {
            hash ^= factionType_.GetHashCode();
          }
          if (hasEntityStateData) hash ^= entityStateData_.GetHashCode();
          if (hasSpawnPosition) hash ^= spawnPosition_.GetHashCode();
          if (hasSpawnRotation) hash ^= spawnRotation_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          EntitySpawnData other = obj as EntitySpawnData;
          if (other == null) return false;
          if (hasEntityId != other.hasEntityId || (hasEntityId && !entityId_.Equals(other.entityId_))) return false;
          if (hasEntityType != other.hasEntityType || (hasEntityType && !entityType_.Equals(other.entityType_))) return false;
          if (hasFactionType != other.hasFactionType || (hasFactionType && !factionType_.Equals(other.factionType_))) return false;
          if (hasEntityStateData != other.hasEntityStateData || (hasEntityStateData && !entityStateData_.Equals(other.entityStateData_))) return false;
          if (hasSpawnPosition != other.hasSpawnPosition || (hasSpawnPosition && !spawnPosition_.Equals(other.spawnPosition_))) return false;
          if (hasSpawnRotation != other.hasSpawnRotation || (hasSpawnRotation && !spawnRotation_.Equals(other.spawnRotation_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("entity_id", hasEntityId, entityId_, writer);
          PrintField("entity_type", hasEntityType, entityType_, writer);
          PrintField("faction_type", hasFactionType, factionType_, writer);
          PrintField("entity_state_data", hasEntityStateData, entityStateData_, writer);
          PrintField("spawn_position", hasSpawnPosition, spawnPosition_, writer);
          PrintField("spawn_rotation", hasSpawnRotation, spawnRotation_, writer);
        }
        #endregion

        public static EntitySpawnData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EntitySpawnData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EntitySpawnData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EntitySpawnData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EntitySpawnData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EntitySpawnData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static EntitySpawnData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static EntitySpawnData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static EntitySpawnData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EntitySpawnData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private EntitySpawnData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(EntitySpawnData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<EntitySpawnData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(EntitySpawnData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private EntitySpawnData result;

          private EntitySpawnData PrepareBuilder() {
            if (resultIsReadOnly) {
              EntitySpawnData original = result;
              result = new EntitySpawnData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override EntitySpawnData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override EntitySpawnData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.EntitySpawnData.DefaultInstance; }
          }

          public override EntitySpawnData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is EntitySpawnData) {
              return MergeFrom((EntitySpawnData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(EntitySpawnData other) {
            if (other == global::Network.Packet.Response.Types.EntitySpawnData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasEntityId) {
              EntityId = other.EntityId;
            }
            if (other.HasEntityType) {
              EntityType = other.EntityType;
            }
            if (other.HasFactionType) {
              FactionType = other.FactionType;
            }
            if (other.HasEntityStateData) {
              MergeEntityStateData(other.EntityStateData);
            }
            if (other.HasSpawnPosition) {
              MergeSpawnPosition(other.SpawnPosition);
            }
            if (other.HasSpawnRotation) {
              MergeSpawnRotation(other.SpawnRotation);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_entitySpawnDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _entitySpawnDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasEntityId = input.ReadInt32(ref result.entityId_);
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.entityType_, out unknown)) {
                    result.hasEntityType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 24: {
                  object unknown;
                  if(input.ReadEnum(ref result.factionType_, out unknown)) {
                    result.hasFactionType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 34: {
                  global::Network.Packet.Response.Types.EntityStateData.Builder subBuilder = global::Network.Packet.Response.Types.EntityStateData.CreateBuilder();
                  if (result.hasEntityStateData) {
                    subBuilder.MergeFrom(EntityStateData);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  EntityStateData = subBuilder.BuildPartial();
                  break;
                }
                case 42: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasSpawnPosition) {
                    subBuilder.MergeFrom(SpawnPosition);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  SpawnPosition = subBuilder.BuildPartial();
                  break;
                }
                case 50: {
                  global::Network.Packet.Vector4Data.Builder subBuilder = global::Network.Packet.Vector4Data.CreateBuilder();
                  if (result.hasSpawnRotation) {
                    subBuilder.MergeFrom(SpawnRotation);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  SpawnRotation = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasEntityId {
            get { return result.hasEntityId; }
          }
          public int EntityId {
            get { return result.EntityId; }
            set { SetEntityId(value); }
          }
          public Builder SetEntityId(int value) {
            PrepareBuilder();
            result.hasEntityId = true;
            result.entityId_ = value;
            return this;
          }
          public Builder ClearEntityId() {
            PrepareBuilder();
            result.hasEntityId = false;
            result.entityId_ = 0;
            return this;
          }

          public bool HasEntityType {
           get { return result.hasEntityType; }
          }
          public global::Network.Packet.EntityType EntityType {
            get { return result.EntityType; }
            set { SetEntityType(value); }
          }
          public Builder SetEntityType(global::Network.Packet.EntityType value) {
            PrepareBuilder();
            result.hasEntityType = true;
            result.entityType_ = value;
            return this;
          }
          public Builder ClearEntityType() {
            PrepareBuilder();
            result.hasEntityType = false;
            result.entityType_ = global::Network.Packet.EntityType.kNoneEntityType;
            return this;
          }

          public bool HasFactionType {
           get { return result.hasFactionType; }
          }
          public global::Network.Packet.FactionType FactionType {
            get { return result.FactionType; }
            set { SetFactionType(value); }
          }
          public Builder SetFactionType(global::Network.Packet.FactionType value) {
            PrepareBuilder();
            result.hasFactionType = true;
            result.factionType_ = value;
            return this;
          }
          public Builder ClearFactionType() {
            PrepareBuilder();
            result.hasFactionType = false;
            result.factionType_ = global::Network.Packet.FactionType.kNoneFactionType;
            return this;
          }

          public bool HasEntityStateData {
           get { return result.hasEntityStateData; }
          }
          public global::Network.Packet.Response.Types.EntityStateData EntityStateData {
            get { return result.EntityStateData; }
            set { SetEntityStateData(value); }
          }
          public Builder SetEntityStateData(global::Network.Packet.Response.Types.EntityStateData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasEntityStateData = true;
            result.entityStateData_ = value;
            return this;
          }
          public Builder SetEntityStateData(global::Network.Packet.Response.Types.EntityStateData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasEntityStateData = true;
            result.entityStateData_ = builderForValue.Build();
            return this;
          }
          public Builder MergeEntityStateData(global::Network.Packet.Response.Types.EntityStateData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasEntityStateData &&
                result.entityStateData_ != global::Network.Packet.Response.Types.EntityStateData.DefaultInstance) {
                result.entityStateData_ = global::Network.Packet.Response.Types.EntityStateData.CreateBuilder(result.entityStateData_).MergeFrom(value).BuildPartial();
            } else {
              result.entityStateData_ = value;
            }
            result.hasEntityStateData = true;
            return this;
          }
          public Builder ClearEntityStateData() {
            PrepareBuilder();
            result.hasEntityStateData = false;
            result.entityStateData_ = null;
            return this;
          }

          public bool HasSpawnPosition {
           get { return result.hasSpawnPosition; }
          }
          public global::Network.Packet.Vector3Data SpawnPosition {
            get { return result.SpawnPosition; }
            set { SetSpawnPosition(value); }
          }
          public Builder SetSpawnPosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSpawnPosition = true;
            result.spawnPosition_ = value;
            return this;
          }
          public Builder SetSpawnPosition(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasSpawnPosition = true;
            result.spawnPosition_ = builderForValue.Build();
            return this;
          }
          public Builder MergeSpawnPosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasSpawnPosition &&
                result.spawnPosition_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.spawnPosition_ = global::Network.Packet.Vector3Data.CreateBuilder(result.spawnPosition_).MergeFrom(value).BuildPartial();
            } else {
              result.spawnPosition_ = value;
            }
            result.hasSpawnPosition = true;
            return this;
          }
          public Builder ClearSpawnPosition() {
            PrepareBuilder();
            result.hasSpawnPosition = false;
            result.spawnPosition_ = null;
            return this;
          }

          public bool HasSpawnRotation {
           get { return result.hasSpawnRotation; }
          }
          public global::Network.Packet.Vector4Data SpawnRotation {
            get { return result.SpawnRotation; }
            set { SetSpawnRotation(value); }
          }
          public Builder SetSpawnRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasSpawnRotation = true;
            result.spawnRotation_ = value;
            return this;
          }
          public Builder SetSpawnRotation(global::Network.Packet.Vector4Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasSpawnRotation = true;
            result.spawnRotation_ = builderForValue.Build();
            return this;
          }
          public Builder MergeSpawnRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasSpawnRotation &&
                result.spawnRotation_ != global::Network.Packet.Vector4Data.DefaultInstance) {
                result.spawnRotation_ = global::Network.Packet.Vector4Data.CreateBuilder(result.spawnRotation_).MergeFrom(value).BuildPartial();
            } else {
              result.spawnRotation_ = value;
            }
            result.hasSpawnRotation = true;
            return this;
          }
          public Builder ClearSpawnRotation() {
            PrepareBuilder();
            result.hasSpawnRotation = false;
            result.spawnRotation_ = null;
            return this;
          }
        }
        static EntitySpawnData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class EntityStateData : pb::GeneratedMessageLite<EntityStateData, EntityStateData.Builder> {
        private EntityStateData() { }
        private static readonly EntityStateData defaultInstance = new EntityStateData().MakeReadOnly();
        private static readonly string[] _entityStateDataFieldNames = new string[] { "binded_client_id", "entity_id", "entity_type", "equipped_weapon_entity_id", "equipped_weapon_type", "faction_type", "hp", "is_alive", "is_enabled" };
        private static readonly uint[] _entityStateDataFieldTags = new uint[] { 40, 8, 16, 80, 56, 24, 160, 168, 32 };
        public static EntityStateData DefaultInstance {
          get { return defaultInstance; }
        }

        public override EntityStateData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override EntityStateData ThisMessage {
          get { return this; }
        }

        public const int EntityIdFieldNumber = 1;
        private bool hasEntityId;
        private int entityId_;
        public bool HasEntityId {
          get { return hasEntityId; }
        }
        public int EntityId {
          get { return entityId_; }
        }

        public const int EntityTypeFieldNumber = 2;
        private bool hasEntityType;
        private global::Network.Packet.EntityType entityType_ = global::Network.Packet.EntityType.kNoneEntityType;
        public bool HasEntityType {
          get { return hasEntityType; }
        }
        public global::Network.Packet.EntityType EntityType {
          get { return entityType_; }
        }

        public const int FactionTypeFieldNumber = 3;
        private bool hasFactionType;
        private global::Network.Packet.FactionType factionType_ = global::Network.Packet.FactionType.kNoneFactionType;
        public bool HasFactionType {
          get { return hasFactionType; }
        }
        public global::Network.Packet.FactionType FactionType {
          get { return factionType_; }
        }

        public const int IsEnabledFieldNumber = 4;
        private bool hasIsEnabled;
        private bool isEnabled_;
        public bool HasIsEnabled {
          get { return hasIsEnabled; }
        }
        public bool IsEnabled {
          get { return isEnabled_; }
        }

        public const int BindedClientIdFieldNumber = 5;
        private bool hasBindedClientId;
        private int bindedClientId_;
        public bool HasBindedClientId {
          get { return hasBindedClientId; }
        }
        public int BindedClientId {
          get { return bindedClientId_; }
        }

        public const int EquippedWeaponTypeFieldNumber = 7;
        private bool hasEquippedWeaponType;
        private global::Network.Packet.ItemType equippedWeaponType_ = global::Network.Packet.ItemType.kNoneItemType;
        public bool HasEquippedWeaponType {
          get { return hasEquippedWeaponType; }
        }
        public global::Network.Packet.ItemType EquippedWeaponType {
          get { return equippedWeaponType_; }
        }

        public const int EquippedWeaponEntityIdFieldNumber = 10;
        private bool hasEquippedWeaponEntityId;
        private int equippedWeaponEntityId_;
        public bool HasEquippedWeaponEntityId {
          get { return hasEquippedWeaponEntityId; }
        }
        public int EquippedWeaponEntityId {
          get { return equippedWeaponEntityId_; }
        }

        public const int HpFieldNumber = 20;
        private bool hasHp;
        private int hp_;
        public bool HasHp {
          get { return hasHp; }
        }
        public int Hp {
          get { return hp_; }
        }

        public const int IsAliveFieldNumber = 21;
        private bool hasIsAlive;
        private bool isAlive_;
        public bool HasIsAlive {
          get { return hasIsAlive; }
        }
        public bool IsAlive {
          get { return isAlive_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _entityStateDataFieldNames;
          if (hasEntityId) {
            output.WriteInt32(1, field_names[1], EntityId);
          }
          if (hasEntityType) {
            output.WriteEnum(2, field_names[2], (int) EntityType, EntityType);
          }
          if (hasFactionType) {
            output.WriteEnum(3, field_names[5], (int) FactionType, FactionType);
          }
          if (hasIsEnabled) {
            output.WriteBool(4, field_names[8], IsEnabled);
          }
          if (hasBindedClientId) {
            output.WriteInt32(5, field_names[0], BindedClientId);
          }
          if (hasEquippedWeaponType) {
            output.WriteEnum(7, field_names[4], (int) EquippedWeaponType, EquippedWeaponType);
          }
          if (hasEquippedWeaponEntityId) {
            output.WriteInt32(10, field_names[3], EquippedWeaponEntityId);
          }
          if (hasHp) {
            output.WriteInt32(20, field_names[6], Hp);
          }
          if (hasIsAlive) {
            output.WriteBool(21, field_names[7], IsAlive);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasEntityId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, EntityId);
          }
          if (hasEntityType) {
            size += pb::CodedOutputStream.ComputeEnumSize(2, (int) EntityType);
          }
          if (hasFactionType) {
            size += pb::CodedOutputStream.ComputeEnumSize(3, (int) FactionType);
          }
          if (hasIsEnabled) {
            size += pb::CodedOutputStream.ComputeBoolSize(4, IsEnabled);
          }
          if (hasBindedClientId) {
            size += pb::CodedOutputStream.ComputeInt32Size(5, BindedClientId);
          }
          if (hasEquippedWeaponType) {
            size += pb::CodedOutputStream.ComputeEnumSize(7, (int) EquippedWeaponType);
          }
          if (hasEquippedWeaponEntityId) {
            size += pb::CodedOutputStream.ComputeInt32Size(10, EquippedWeaponEntityId);
          }
          if (hasHp) {
            size += pb::CodedOutputStream.ComputeInt32Size(20, Hp);
          }
          if (hasIsAlive) {
            size += pb::CodedOutputStream.ComputeBoolSize(21, IsAlive);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasEntityId) {
            hash ^= entityId_.GetHashCode();
          }
          if (hasEntityType) {
            hash ^= entityType_.GetHashCode();
          }
          if (hasFactionType) {
            hash ^= factionType_.GetHashCode();
          }
          if (hasIsEnabled) {
            hash ^= isEnabled_.GetHashCode();
          }
          if (hasBindedClientId) {
            hash ^= bindedClientId_.GetHashCode();
          }
          if (hasEquippedWeaponType) {
            hash ^= equippedWeaponType_.GetHashCode();
          }
          if (hasEquippedWeaponEntityId) {
            hash ^= equippedWeaponEntityId_.GetHashCode();
          }
          if (hasHp) {
            hash ^= hp_.GetHashCode();
          }
          if (hasIsAlive) {
            hash ^= isAlive_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          EntityStateData other = obj as EntityStateData;
          if (other == null) return false;
          if (hasEntityId != other.hasEntityId || (hasEntityId && !entityId_.Equals(other.entityId_))) return false;
          if (hasEntityType != other.hasEntityType || (hasEntityType && !entityType_.Equals(other.entityType_))) return false;
          if (hasFactionType != other.hasFactionType || (hasFactionType && !factionType_.Equals(other.factionType_))) return false;
          if (hasIsEnabled != other.hasIsEnabled || (hasIsEnabled && !isEnabled_.Equals(other.isEnabled_))) return false;
          if (hasBindedClientId != other.hasBindedClientId || (hasBindedClientId && !bindedClientId_.Equals(other.bindedClientId_))) return false;
          if (hasEquippedWeaponType != other.hasEquippedWeaponType || (hasEquippedWeaponType && !equippedWeaponType_.Equals(other.equippedWeaponType_))) return false;
          if (hasEquippedWeaponEntityId != other.hasEquippedWeaponEntityId || (hasEquippedWeaponEntityId && !equippedWeaponEntityId_.Equals(other.equippedWeaponEntityId_))) return false;
          if (hasHp != other.hasHp || (hasHp && !hp_.Equals(other.hp_))) return false;
          if (hasIsAlive != other.hasIsAlive || (hasIsAlive && !isAlive_.Equals(other.isAlive_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("entity_id", hasEntityId, entityId_, writer);
          PrintField("entity_type", hasEntityType, entityType_, writer);
          PrintField("faction_type", hasFactionType, factionType_, writer);
          PrintField("is_enabled", hasIsEnabled, isEnabled_, writer);
          PrintField("binded_client_id", hasBindedClientId, bindedClientId_, writer);
          PrintField("equipped_weapon_type", hasEquippedWeaponType, equippedWeaponType_, writer);
          PrintField("equipped_weapon_entity_id", hasEquippedWeaponEntityId, equippedWeaponEntityId_, writer);
          PrintField("hp", hasHp, hp_, writer);
          PrintField("is_alive", hasIsAlive, isAlive_, writer);
        }
        #endregion

        public static EntityStateData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EntityStateData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EntityStateData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EntityStateData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EntityStateData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EntityStateData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static EntityStateData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static EntityStateData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static EntityStateData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EntityStateData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private EntityStateData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(EntityStateData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<EntityStateData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(EntityStateData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private EntityStateData result;

          private EntityStateData PrepareBuilder() {
            if (resultIsReadOnly) {
              EntityStateData original = result;
              result = new EntityStateData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override EntityStateData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override EntityStateData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.EntityStateData.DefaultInstance; }
          }

          public override EntityStateData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is EntityStateData) {
              return MergeFrom((EntityStateData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(EntityStateData other) {
            if (other == global::Network.Packet.Response.Types.EntityStateData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasEntityId) {
              EntityId = other.EntityId;
            }
            if (other.HasEntityType) {
              EntityType = other.EntityType;
            }
            if (other.HasFactionType) {
              FactionType = other.FactionType;
            }
            if (other.HasIsEnabled) {
              IsEnabled = other.IsEnabled;
            }
            if (other.HasBindedClientId) {
              BindedClientId = other.BindedClientId;
            }
            if (other.HasEquippedWeaponType) {
              EquippedWeaponType = other.EquippedWeaponType;
            }
            if (other.HasEquippedWeaponEntityId) {
              EquippedWeaponEntityId = other.EquippedWeaponEntityId;
            }
            if (other.HasHp) {
              Hp = other.Hp;
            }
            if (other.HasIsAlive) {
              IsAlive = other.IsAlive;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_entityStateDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _entityStateDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasEntityId = input.ReadInt32(ref result.entityId_);
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.entityType_, out unknown)) {
                    result.hasEntityType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 24: {
                  object unknown;
                  if(input.ReadEnum(ref result.factionType_, out unknown)) {
                    result.hasFactionType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 32: {
                  result.hasIsEnabled = input.ReadBool(ref result.isEnabled_);
                  break;
                }
                case 40: {
                  result.hasBindedClientId = input.ReadInt32(ref result.bindedClientId_);
                  break;
                }
                case 56: {
                  object unknown;
                  if(input.ReadEnum(ref result.equippedWeaponType_, out unknown)) {
                    result.hasEquippedWeaponType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 80: {
                  result.hasEquippedWeaponEntityId = input.ReadInt32(ref result.equippedWeaponEntityId_);
                  break;
                }
                case 160: {
                  result.hasHp = input.ReadInt32(ref result.hp_);
                  break;
                }
                case 168: {
                  result.hasIsAlive = input.ReadBool(ref result.isAlive_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasEntityId {
            get { return result.hasEntityId; }
          }
          public int EntityId {
            get { return result.EntityId; }
            set { SetEntityId(value); }
          }
          public Builder SetEntityId(int value) {
            PrepareBuilder();
            result.hasEntityId = true;
            result.entityId_ = value;
            return this;
          }
          public Builder ClearEntityId() {
            PrepareBuilder();
            result.hasEntityId = false;
            result.entityId_ = 0;
            return this;
          }

          public bool HasEntityType {
           get { return result.hasEntityType; }
          }
          public global::Network.Packet.EntityType EntityType {
            get { return result.EntityType; }
            set { SetEntityType(value); }
          }
          public Builder SetEntityType(global::Network.Packet.EntityType value) {
            PrepareBuilder();
            result.hasEntityType = true;
            result.entityType_ = value;
            return this;
          }
          public Builder ClearEntityType() {
            PrepareBuilder();
            result.hasEntityType = false;
            result.entityType_ = global::Network.Packet.EntityType.kNoneEntityType;
            return this;
          }

          public bool HasFactionType {
           get { return result.hasFactionType; }
          }
          public global::Network.Packet.FactionType FactionType {
            get { return result.FactionType; }
            set { SetFactionType(value); }
          }
          public Builder SetFactionType(global::Network.Packet.FactionType value) {
            PrepareBuilder();
            result.hasFactionType = true;
            result.factionType_ = value;
            return this;
          }
          public Builder ClearFactionType() {
            PrepareBuilder();
            result.hasFactionType = false;
            result.factionType_ = global::Network.Packet.FactionType.kNoneFactionType;
            return this;
          }

          public bool HasIsEnabled {
            get { return result.hasIsEnabled; }
          }
          public bool IsEnabled {
            get { return result.IsEnabled; }
            set { SetIsEnabled(value); }
          }
          public Builder SetIsEnabled(bool value) {
            PrepareBuilder();
            result.hasIsEnabled = true;
            result.isEnabled_ = value;
            return this;
          }
          public Builder ClearIsEnabled() {
            PrepareBuilder();
            result.hasIsEnabled = false;
            result.isEnabled_ = false;
            return this;
          }

          public bool HasBindedClientId {
            get { return result.hasBindedClientId; }
          }
          public int BindedClientId {
            get { return result.BindedClientId; }
            set { SetBindedClientId(value); }
          }
          public Builder SetBindedClientId(int value) {
            PrepareBuilder();
            result.hasBindedClientId = true;
            result.bindedClientId_ = value;
            return this;
          }
          public Builder ClearBindedClientId() {
            PrepareBuilder();
            result.hasBindedClientId = false;
            result.bindedClientId_ = 0;
            return this;
          }

          public bool HasEquippedWeaponType {
           get { return result.hasEquippedWeaponType; }
          }
          public global::Network.Packet.ItemType EquippedWeaponType {
            get { return result.EquippedWeaponType; }
            set { SetEquippedWeaponType(value); }
          }
          public Builder SetEquippedWeaponType(global::Network.Packet.ItemType value) {
            PrepareBuilder();
            result.hasEquippedWeaponType = true;
            result.equippedWeaponType_ = value;
            return this;
          }
          public Builder ClearEquippedWeaponType() {
            PrepareBuilder();
            result.hasEquippedWeaponType = false;
            result.equippedWeaponType_ = global::Network.Packet.ItemType.kNoneItemType;
            return this;
          }

          public bool HasEquippedWeaponEntityId {
            get { return result.hasEquippedWeaponEntityId; }
          }
          public int EquippedWeaponEntityId {
            get { return result.EquippedWeaponEntityId; }
            set { SetEquippedWeaponEntityId(value); }
          }
          public Builder SetEquippedWeaponEntityId(int value) {
            PrepareBuilder();
            result.hasEquippedWeaponEntityId = true;
            result.equippedWeaponEntityId_ = value;
            return this;
          }
          public Builder ClearEquippedWeaponEntityId() {
            PrepareBuilder();
            result.hasEquippedWeaponEntityId = false;
            result.equippedWeaponEntityId_ = 0;
            return this;
          }

          public bool HasHp {
            get { return result.hasHp; }
          }
          public int Hp {
            get { return result.Hp; }
            set { SetHp(value); }
          }
          public Builder SetHp(int value) {
            PrepareBuilder();
            result.hasHp = true;
            result.hp_ = value;
            return this;
          }
          public Builder ClearHp() {
            PrepareBuilder();
            result.hasHp = false;
            result.hp_ = 0;
            return this;
          }

          public bool HasIsAlive {
            get { return result.hasIsAlive; }
          }
          public bool IsAlive {
            get { return result.IsAlive; }
            set { SetIsAlive(value); }
          }
          public Builder SetIsAlive(bool value) {
            PrepareBuilder();
            result.hasIsAlive = true;
            result.isAlive_ = value;
            return this;
          }
          public Builder ClearIsAlive() {
            PrepareBuilder();
            result.hasIsAlive = false;
            result.isAlive_ = false;
            return this;
          }
        }
        static EntityStateData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class EntityTransformData : pb::GeneratedMessageLite<EntityTransformData, EntityTransformData.Builder> {
        private EntityTransformData() { }
        private static readonly EntityTransformData defaultInstance = new EntityTransformData().MakeReadOnly();
        private static readonly string[] _entityTransformDataFieldNames = new string[] { "Velocity", "entity_id", "is_teleported", "position", "rotation" };
        private static readonly uint[] _entityTransformDataFieldTags = new uint[] { 34, 8, 40, 18, 26 };
        public static EntityTransformData DefaultInstance {
          get { return defaultInstance; }
        }

        public override EntityTransformData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override EntityTransformData ThisMessage {
          get { return this; }
        }

        public const int EntityIdFieldNumber = 1;
        private bool hasEntityId;
        private int entityId_;
        public bool HasEntityId {
          get { return hasEntityId; }
        }
        public int EntityId {
          get { return entityId_; }
        }

        public const int PositionFieldNumber = 2;
        private bool hasPosition;
        private global::Network.Packet.Vector3Data position_;
        public bool HasPosition {
          get { return hasPosition; }
        }
        public global::Network.Packet.Vector3Data Position {
          get { return position_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int RotationFieldNumber = 3;
        private bool hasRotation;
        private global::Network.Packet.Vector4Data rotation_;
        public bool HasRotation {
          get { return hasRotation; }
        }
        public global::Network.Packet.Vector4Data Rotation {
          get { return rotation_ ?? global::Network.Packet.Vector4Data.DefaultInstance; }
        }

        public const int VelocityFieldNumber = 4;
        private bool hasVelocity;
        private global::Network.Packet.Vector3Data velocity_;
        public bool HasVelocity {
          get { return hasVelocity; }
        }
        public global::Network.Packet.Vector3Data Velocity {
          get { return velocity_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int IsTeleportedFieldNumber = 5;
        private bool hasIsTeleported;
        private bool isTeleported_;
        public bool HasIsTeleported {
          get { return hasIsTeleported; }
        }
        public bool IsTeleported {
          get { return isTeleported_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _entityTransformDataFieldNames;
          if (hasEntityId) {
            output.WriteInt32(1, field_names[1], EntityId);
          }
          if (hasPosition) {
            output.WriteMessage(2, field_names[3], Position);
          }
          if (hasRotation) {
            output.WriteMessage(3, field_names[4], Rotation);
          }
          if (hasVelocity) {
            output.WriteMessage(4, field_names[0], Velocity);
          }
          if (hasIsTeleported) {
            output.WriteBool(5, field_names[2], IsTeleported);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasEntityId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, EntityId);
          }
          if (hasPosition) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, Position);
          }
          if (hasRotation) {
            size += pb::CodedOutputStream.ComputeMessageSize(3, Rotation);
          }
          if (hasVelocity) {
            size += pb::CodedOutputStream.ComputeMessageSize(4, Velocity);
          }
          if (hasIsTeleported) {
            size += pb::CodedOutputStream.ComputeBoolSize(5, IsTeleported);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasEntityId) {
            hash ^= entityId_.GetHashCode();
          }
          if (hasPosition) hash ^= position_.GetHashCode();
          if (hasRotation) hash ^= rotation_.GetHashCode();
          if (hasVelocity) hash ^= velocity_.GetHashCode();
          if (hasIsTeleported) {
            hash ^= isTeleported_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          EntityTransformData other = obj as EntityTransformData;
          if (other == null) return false;
          if (hasEntityId != other.hasEntityId || (hasEntityId && !entityId_.Equals(other.entityId_))) return false;
          if (hasPosition != other.hasPosition || (hasPosition && !position_.Equals(other.position_))) return false;
          if (hasRotation != other.hasRotation || (hasRotation && !rotation_.Equals(other.rotation_))) return false;
          if (hasVelocity != other.hasVelocity || (hasVelocity && !velocity_.Equals(other.velocity_))) return false;
          if (hasIsTeleported != other.hasIsTeleported || (hasIsTeleported && !isTeleported_.Equals(other.isTeleported_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("entity_id", hasEntityId, entityId_, writer);
          PrintField("position", hasPosition, position_, writer);
          PrintField("rotation", hasRotation, rotation_, writer);
          PrintField("Velocity", hasVelocity, velocity_, writer);
          PrintField("is_teleported", hasIsTeleported, isTeleported_, writer);
        }
        #endregion

        public static EntityTransformData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EntityTransformData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EntityTransformData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EntityTransformData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EntityTransformData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EntityTransformData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static EntityTransformData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static EntityTransformData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static EntityTransformData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EntityTransformData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private EntityTransformData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(EntityTransformData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<EntityTransformData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(EntityTransformData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private EntityTransformData result;

          private EntityTransformData PrepareBuilder() {
            if (resultIsReadOnly) {
              EntityTransformData original = result;
              result = new EntityTransformData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override EntityTransformData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override EntityTransformData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.EntityTransformData.DefaultInstance; }
          }

          public override EntityTransformData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is EntityTransformData) {
              return MergeFrom((EntityTransformData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(EntityTransformData other) {
            if (other == global::Network.Packet.Response.Types.EntityTransformData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasEntityId) {
              EntityId = other.EntityId;
            }
            if (other.HasPosition) {
              MergePosition(other.Position);
            }
            if (other.HasRotation) {
              MergeRotation(other.Rotation);
            }
            if (other.HasVelocity) {
              MergeVelocity(other.Velocity);
            }
            if (other.HasIsTeleported) {
              IsTeleported = other.IsTeleported;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_entityTransformDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _entityTransformDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasEntityId = input.ReadInt32(ref result.entityId_);
                  break;
                }
                case 18: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasPosition) {
                    subBuilder.MergeFrom(Position);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Position = subBuilder.BuildPartial();
                  break;
                }
                case 26: {
                  global::Network.Packet.Vector4Data.Builder subBuilder = global::Network.Packet.Vector4Data.CreateBuilder();
                  if (result.hasRotation) {
                    subBuilder.MergeFrom(Rotation);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Rotation = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasVelocity) {
                    subBuilder.MergeFrom(Velocity);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Velocity = subBuilder.BuildPartial();
                  break;
                }
                case 40: {
                  result.hasIsTeleported = input.ReadBool(ref result.isTeleported_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasEntityId {
            get { return result.hasEntityId; }
          }
          public int EntityId {
            get { return result.EntityId; }
            set { SetEntityId(value); }
          }
          public Builder SetEntityId(int value) {
            PrepareBuilder();
            result.hasEntityId = true;
            result.entityId_ = value;
            return this;
          }
          public Builder ClearEntityId() {
            PrepareBuilder();
            result.hasEntityId = false;
            result.entityId_ = 0;
            return this;
          }

          public bool HasPosition {
           get { return result.hasPosition; }
          }
          public global::Network.Packet.Vector3Data Position {
            get { return result.Position; }
            set { SetPosition(value); }
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = value;
            return this;
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = builderForValue.Build();
            return this;
          }
          public Builder MergePosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasPosition &&
                result.position_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.position_ = global::Network.Packet.Vector3Data.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
            } else {
              result.position_ = value;
            }
            result.hasPosition = true;
            return this;
          }
          public Builder ClearPosition() {
            PrepareBuilder();
            result.hasPosition = false;
            result.position_ = null;
            return this;
          }

          public bool HasRotation {
           get { return result.hasRotation; }
          }
          public global::Network.Packet.Vector4Data Rotation {
            get { return result.Rotation; }
            set { SetRotation(value); }
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = value;
            return this;
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = builderForValue.Build();
            return this;
          }
          public Builder MergeRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRotation &&
                result.rotation_ != global::Network.Packet.Vector4Data.DefaultInstance) {
                result.rotation_ = global::Network.Packet.Vector4Data.CreateBuilder(result.rotation_).MergeFrom(value).BuildPartial();
            } else {
              result.rotation_ = value;
            }
            result.hasRotation = true;
            return this;
          }
          public Builder ClearRotation() {
            PrepareBuilder();
            result.hasRotation = false;
            result.rotation_ = null;
            return this;
          }

          public bool HasVelocity {
           get { return result.hasVelocity; }
          }
          public global::Network.Packet.Vector3Data Velocity {
            get { return result.Velocity; }
            set { SetVelocity(value); }
          }
          public Builder SetVelocity(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasVelocity = true;
            result.velocity_ = value;
            return this;
          }
          public Builder SetVelocity(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasVelocity = true;
            result.velocity_ = builderForValue.Build();
            return this;
          }
          public Builder MergeVelocity(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasVelocity &&
                result.velocity_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.velocity_ = global::Network.Packet.Vector3Data.CreateBuilder(result.velocity_).MergeFrom(value).BuildPartial();
            } else {
              result.velocity_ = value;
            }
            result.hasVelocity = true;
            return this;
          }
          public Builder ClearVelocity() {
            PrepareBuilder();
            result.hasVelocity = false;
            result.velocity_ = null;
            return this;
          }

          public bool HasIsTeleported {
            get { return result.hasIsTeleported; }
          }
          public bool IsTeleported {
            get { return result.IsTeleported; }
            set { SetIsTeleported(value); }
          }
          public Builder SetIsTeleported(bool value) {
            PrepareBuilder();
            result.hasIsTeleported = true;
            result.isTeleported_ = value;
            return this;
          }
          public Builder ClearIsTeleported() {
            PrepareBuilder();
            result.hasIsTeleported = false;
            result.isTeleported_ = false;
            return this;
          }
        }
        static EntityTransformData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class EntityActionData : pb::GeneratedMessageLite<EntityActionData, EntityActionData.Builder> {
        private EntityActionData() { }
        private static readonly EntityActionData defaultInstance = new EntityActionData().MakeReadOnly();
        private static readonly string[] _entityActionDataFieldNames = new string[] { "LastEntityStateData", "action", "animation_bool_value", "animation_float_value", "animation_id", "animation_int_value", "animation_type", "entity_id", "equipped_weapon_entity_id", "trigger_string" };
        private static readonly uint[] _entityActionDataFieldTags = new uint[] { 26, 16, 168, 181, 162, 184, 152, 8, 80, 242 };
        public static EntityActionData DefaultInstance {
          get { return defaultInstance; }
        }

        public override EntityActionData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override EntityActionData ThisMessage {
          get { return this; }
        }

        public const int EntityIdFieldNumber = 1;
        private bool hasEntityId;
        private int entityId_;
        public bool HasEntityId {
          get { return hasEntityId; }
        }
        public int EntityId {
          get { return entityId_; }
        }

        public const int ActionFieldNumber = 2;
        private bool hasAction;
        private global::Network.Packet.Response.Types.EntityAction action_ = global::Network.Packet.Response.Types.EntityAction.kDestroy;
        public bool HasAction {
          get { return hasAction; }
        }
        public global::Network.Packet.Response.Types.EntityAction Action {
          get { return action_; }
        }

        public const int LastEntityStateDataFieldNumber = 3;
        private bool hasLastEntityStateData;
        private global::Network.Packet.Response.Types.EntityStateData lastEntityStateData_;
        public bool HasLastEntityStateData {
          get { return hasLastEntityStateData; }
        }
        public global::Network.Packet.Response.Types.EntityStateData LastEntityStateData {
          get { return lastEntityStateData_ ?? global::Network.Packet.Response.Types.EntityStateData.DefaultInstance; }
        }

        public const int EquippedWeaponEntityIdFieldNumber = 10;
        private bool hasEquippedWeaponEntityId;
        private int equippedWeaponEntityId_;
        public bool HasEquippedWeaponEntityId {
          get { return hasEquippedWeaponEntityId; }
        }
        public int EquippedWeaponEntityId {
          get { return equippedWeaponEntityId_; }
        }

        public const int AnimationTypeFieldNumber = 19;
        private bool hasAnimationType;
        private global::Network.Packet.Response.Types.AnimationType animationType_ = global::Network.Packet.Response.Types.AnimationType.kTrigger;
        public bool HasAnimationType {
          get { return hasAnimationType; }
        }
        public global::Network.Packet.Response.Types.AnimationType AnimationType {
          get { return animationType_; }
        }

        public const int AnimationIdFieldNumber = 20;
        private bool hasAnimationId;
        private string animationId_ = "";
        public bool HasAnimationId {
          get { return hasAnimationId; }
        }
        public string AnimationId {
          get { return animationId_; }
        }

        public const int AnimationBoolValueFieldNumber = 21;
        private bool hasAnimationBoolValue;
        private bool animationBoolValue_;
        public bool HasAnimationBoolValue {
          get { return hasAnimationBoolValue; }
        }
        public bool AnimationBoolValue {
          get { return animationBoolValue_; }
        }

        public const int AnimationFloatValueFieldNumber = 22;
        private bool hasAnimationFloatValue;
        private float animationFloatValue_;
        public bool HasAnimationFloatValue {
          get { return hasAnimationFloatValue; }
        }
        public float AnimationFloatValue {
          get { return animationFloatValue_; }
        }

        public const int AnimationIntValueFieldNumber = 23;
        private bool hasAnimationIntValue;
        private int animationIntValue_;
        public bool HasAnimationIntValue {
          get { return hasAnimationIntValue; }
        }
        public int AnimationIntValue {
          get { return animationIntValue_; }
        }

        public const int TriggerStringFieldNumber = 30;
        private bool hasTriggerString;
        private string triggerString_ = "";
        public bool HasTriggerString {
          get { return hasTriggerString; }
        }
        public string TriggerString {
          get { return triggerString_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _entityActionDataFieldNames;
          if (hasEntityId) {
            output.WriteInt32(1, field_names[7], EntityId);
          }
          if (hasAction) {
            output.WriteEnum(2, field_names[1], (int) Action, Action);
          }
          if (hasLastEntityStateData) {
            output.WriteMessage(3, field_names[0], LastEntityStateData);
          }
          if (hasEquippedWeaponEntityId) {
            output.WriteInt32(10, field_names[8], EquippedWeaponEntityId);
          }
          if (hasAnimationType) {
            output.WriteEnum(19, field_names[6], (int) AnimationType, AnimationType);
          }
          if (hasAnimationId) {
            output.WriteString(20, field_names[4], AnimationId);
          }
          if (hasAnimationBoolValue) {
            output.WriteBool(21, field_names[2], AnimationBoolValue);
          }
          if (hasAnimationFloatValue) {
            output.WriteFloat(22, field_names[3], AnimationFloatValue);
          }
          if (hasAnimationIntValue) {
            output.WriteInt32(23, field_names[5], AnimationIntValue);
          }
          if (hasTriggerString) {
            output.WriteString(30, field_names[9], TriggerString);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasEntityId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, EntityId);
          }
          if (hasAction) {
            size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Action);
          }
          if (hasLastEntityStateData) {
            size += pb::CodedOutputStream.ComputeMessageSize(3, LastEntityStateData);
          }
          if (hasEquippedWeaponEntityId) {
            size += pb::CodedOutputStream.ComputeInt32Size(10, EquippedWeaponEntityId);
          }
          if (hasAnimationType) {
            size += pb::CodedOutputStream.ComputeEnumSize(19, (int) AnimationType);
          }
          if (hasAnimationId) {
            size += pb::CodedOutputStream.ComputeStringSize(20, AnimationId);
          }
          if (hasAnimationBoolValue) {
            size += pb::CodedOutputStream.ComputeBoolSize(21, AnimationBoolValue);
          }
          if (hasAnimationFloatValue) {
            size += pb::CodedOutputStream.ComputeFloatSize(22, AnimationFloatValue);
          }
          if (hasAnimationIntValue) {
            size += pb::CodedOutputStream.ComputeInt32Size(23, AnimationIntValue);
          }
          if (hasTriggerString) {
            size += pb::CodedOutputStream.ComputeStringSize(30, TriggerString);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasEntityId) {
            hash ^= entityId_.GetHashCode();
          }
          if (hasAction) {
            hash ^= action_.GetHashCode();
          }
          if (hasLastEntityStateData) hash ^= lastEntityStateData_.GetHashCode();
          if (hasEquippedWeaponEntityId) {
            hash ^= equippedWeaponEntityId_.GetHashCode();
          }
          if (hasAnimationType) {
            hash ^= animationType_.GetHashCode();
          }
          if (hasAnimationId) {
            hash ^= animationId_.GetHashCode();
          }
          if (hasAnimationBoolValue) {
            hash ^= animationBoolValue_.GetHashCode();
          }
          if (hasAnimationFloatValue) {
            hash ^= animationFloatValue_.GetHashCode();
          }
          if (hasAnimationIntValue) {
            hash ^= animationIntValue_.GetHashCode();
          }
          if (hasTriggerString) {
            hash ^= triggerString_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          EntityActionData other = obj as EntityActionData;
          if (other == null) return false;
          if (hasEntityId != other.hasEntityId || (hasEntityId && !entityId_.Equals(other.entityId_))) return false;
          if (hasAction != other.hasAction || (hasAction && !action_.Equals(other.action_))) return false;
          if (hasLastEntityStateData != other.hasLastEntityStateData || (hasLastEntityStateData && !lastEntityStateData_.Equals(other.lastEntityStateData_))) return false;
          if (hasEquippedWeaponEntityId != other.hasEquippedWeaponEntityId || (hasEquippedWeaponEntityId && !equippedWeaponEntityId_.Equals(other.equippedWeaponEntityId_))) return false;
          if (hasAnimationType != other.hasAnimationType || (hasAnimationType && !animationType_.Equals(other.animationType_))) return false;
          if (hasAnimationId != other.hasAnimationId || (hasAnimationId && !animationId_.Equals(other.animationId_))) return false;
          if (hasAnimationBoolValue != other.hasAnimationBoolValue || (hasAnimationBoolValue && !animationBoolValue_.Equals(other.animationBoolValue_))) return false;
          if (hasAnimationFloatValue != other.hasAnimationFloatValue || (hasAnimationFloatValue && !animationFloatValue_.Equals(other.animationFloatValue_))) return false;
          if (hasAnimationIntValue != other.hasAnimationIntValue || (hasAnimationIntValue && !animationIntValue_.Equals(other.animationIntValue_))) return false;
          if (hasTriggerString != other.hasTriggerString || (hasTriggerString && !triggerString_.Equals(other.triggerString_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("entity_id", hasEntityId, entityId_, writer);
          PrintField("action", hasAction, action_, writer);
          PrintField("LastEntityStateData", hasLastEntityStateData, lastEntityStateData_, writer);
          PrintField("equipped_weapon_entity_id", hasEquippedWeaponEntityId, equippedWeaponEntityId_, writer);
          PrintField("animation_type", hasAnimationType, animationType_, writer);
          PrintField("animation_id", hasAnimationId, animationId_, writer);
          PrintField("animation_bool_value", hasAnimationBoolValue, animationBoolValue_, writer);
          PrintField("animation_float_value", hasAnimationFloatValue, animationFloatValue_, writer);
          PrintField("animation_int_value", hasAnimationIntValue, animationIntValue_, writer);
          PrintField("trigger_string", hasTriggerString, triggerString_, writer);
        }
        #endregion

        public static EntityActionData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EntityActionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EntityActionData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static EntityActionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static EntityActionData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EntityActionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static EntityActionData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static EntityActionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static EntityActionData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static EntityActionData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private EntityActionData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(EntityActionData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<EntityActionData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(EntityActionData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private EntityActionData result;

          private EntityActionData PrepareBuilder() {
            if (resultIsReadOnly) {
              EntityActionData original = result;
              result = new EntityActionData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override EntityActionData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override EntityActionData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.EntityActionData.DefaultInstance; }
          }

          public override EntityActionData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is EntityActionData) {
              return MergeFrom((EntityActionData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(EntityActionData other) {
            if (other == global::Network.Packet.Response.Types.EntityActionData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasEntityId) {
              EntityId = other.EntityId;
            }
            if (other.HasAction) {
              Action = other.Action;
            }
            if (other.HasLastEntityStateData) {
              MergeLastEntityStateData(other.LastEntityStateData);
            }
            if (other.HasEquippedWeaponEntityId) {
              EquippedWeaponEntityId = other.EquippedWeaponEntityId;
            }
            if (other.HasAnimationType) {
              AnimationType = other.AnimationType;
            }
            if (other.HasAnimationId) {
              AnimationId = other.AnimationId;
            }
            if (other.HasAnimationBoolValue) {
              AnimationBoolValue = other.AnimationBoolValue;
            }
            if (other.HasAnimationFloatValue) {
              AnimationFloatValue = other.AnimationFloatValue;
            }
            if (other.HasAnimationIntValue) {
              AnimationIntValue = other.AnimationIntValue;
            }
            if (other.HasTriggerString) {
              TriggerString = other.TriggerString;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_entityActionDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _entityActionDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasEntityId = input.ReadInt32(ref result.entityId_);
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.action_, out unknown)) {
                    result.hasAction = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 26: {
                  global::Network.Packet.Response.Types.EntityStateData.Builder subBuilder = global::Network.Packet.Response.Types.EntityStateData.CreateBuilder();
                  if (result.hasLastEntityStateData) {
                    subBuilder.MergeFrom(LastEntityStateData);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  LastEntityStateData = subBuilder.BuildPartial();
                  break;
                }
                case 80: {
                  result.hasEquippedWeaponEntityId = input.ReadInt32(ref result.equippedWeaponEntityId_);
                  break;
                }
                case 152: {
                  object unknown;
                  if(input.ReadEnum(ref result.animationType_, out unknown)) {
                    result.hasAnimationType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 162: {
                  result.hasAnimationId = input.ReadString(ref result.animationId_);
                  break;
                }
                case 168: {
                  result.hasAnimationBoolValue = input.ReadBool(ref result.animationBoolValue_);
                  break;
                }
                case 181: {
                  result.hasAnimationFloatValue = input.ReadFloat(ref result.animationFloatValue_);
                  break;
                }
                case 184: {
                  result.hasAnimationIntValue = input.ReadInt32(ref result.animationIntValue_);
                  break;
                }
                case 242: {
                  result.hasTriggerString = input.ReadString(ref result.triggerString_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasEntityId {
            get { return result.hasEntityId; }
          }
          public int EntityId {
            get { return result.EntityId; }
            set { SetEntityId(value); }
          }
          public Builder SetEntityId(int value) {
            PrepareBuilder();
            result.hasEntityId = true;
            result.entityId_ = value;
            return this;
          }
          public Builder ClearEntityId() {
            PrepareBuilder();
            result.hasEntityId = false;
            result.entityId_ = 0;
            return this;
          }

          public bool HasAction {
           get { return result.hasAction; }
          }
          public global::Network.Packet.Response.Types.EntityAction Action {
            get { return result.Action; }
            set { SetAction(value); }
          }
          public Builder SetAction(global::Network.Packet.Response.Types.EntityAction value) {
            PrepareBuilder();
            result.hasAction = true;
            result.action_ = value;
            return this;
          }
          public Builder ClearAction() {
            PrepareBuilder();
            result.hasAction = false;
            result.action_ = global::Network.Packet.Response.Types.EntityAction.kDestroy;
            return this;
          }

          public bool HasLastEntityStateData {
           get { return result.hasLastEntityStateData; }
          }
          public global::Network.Packet.Response.Types.EntityStateData LastEntityStateData {
            get { return result.LastEntityStateData; }
            set { SetLastEntityStateData(value); }
          }
          public Builder SetLastEntityStateData(global::Network.Packet.Response.Types.EntityStateData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasLastEntityStateData = true;
            result.lastEntityStateData_ = value;
            return this;
          }
          public Builder SetLastEntityStateData(global::Network.Packet.Response.Types.EntityStateData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasLastEntityStateData = true;
            result.lastEntityStateData_ = builderForValue.Build();
            return this;
          }
          public Builder MergeLastEntityStateData(global::Network.Packet.Response.Types.EntityStateData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasLastEntityStateData &&
                result.lastEntityStateData_ != global::Network.Packet.Response.Types.EntityStateData.DefaultInstance) {
                result.lastEntityStateData_ = global::Network.Packet.Response.Types.EntityStateData.CreateBuilder(result.lastEntityStateData_).MergeFrom(value).BuildPartial();
            } else {
              result.lastEntityStateData_ = value;
            }
            result.hasLastEntityStateData = true;
            return this;
          }
          public Builder ClearLastEntityStateData() {
            PrepareBuilder();
            result.hasLastEntityStateData = false;
            result.lastEntityStateData_ = null;
            return this;
          }

          public bool HasEquippedWeaponEntityId {
            get { return result.hasEquippedWeaponEntityId; }
          }
          public int EquippedWeaponEntityId {
            get { return result.EquippedWeaponEntityId; }
            set { SetEquippedWeaponEntityId(value); }
          }
          public Builder SetEquippedWeaponEntityId(int value) {
            PrepareBuilder();
            result.hasEquippedWeaponEntityId = true;
            result.equippedWeaponEntityId_ = value;
            return this;
          }
          public Builder ClearEquippedWeaponEntityId() {
            PrepareBuilder();
            result.hasEquippedWeaponEntityId = false;
            result.equippedWeaponEntityId_ = 0;
            return this;
          }

          public bool HasAnimationType {
           get { return result.hasAnimationType; }
          }
          public global::Network.Packet.Response.Types.AnimationType AnimationType {
            get { return result.AnimationType; }
            set { SetAnimationType(value); }
          }
          public Builder SetAnimationType(global::Network.Packet.Response.Types.AnimationType value) {
            PrepareBuilder();
            result.hasAnimationType = true;
            result.animationType_ = value;
            return this;
          }
          public Builder ClearAnimationType() {
            PrepareBuilder();
            result.hasAnimationType = false;
            result.animationType_ = global::Network.Packet.Response.Types.AnimationType.kTrigger;
            return this;
          }

          public bool HasAnimationId {
            get { return result.hasAnimationId; }
          }
          public string AnimationId {
            get { return result.AnimationId; }
            set { SetAnimationId(value); }
          }
          public Builder SetAnimationId(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasAnimationId = true;
            result.animationId_ = value;
            return this;
          }
          public Builder ClearAnimationId() {
            PrepareBuilder();
            result.hasAnimationId = false;
            result.animationId_ = "";
            return this;
          }

          public bool HasAnimationBoolValue {
            get { return result.hasAnimationBoolValue; }
          }
          public bool AnimationBoolValue {
            get { return result.AnimationBoolValue; }
            set { SetAnimationBoolValue(value); }
          }
          public Builder SetAnimationBoolValue(bool value) {
            PrepareBuilder();
            result.hasAnimationBoolValue = true;
            result.animationBoolValue_ = value;
            return this;
          }
          public Builder ClearAnimationBoolValue() {
            PrepareBuilder();
            result.hasAnimationBoolValue = false;
            result.animationBoolValue_ = false;
            return this;
          }

          public bool HasAnimationFloatValue {
            get { return result.hasAnimationFloatValue; }
          }
          public float AnimationFloatValue {
            get { return result.AnimationFloatValue; }
            set { SetAnimationFloatValue(value); }
          }
          public Builder SetAnimationFloatValue(float value) {
            PrepareBuilder();
            result.hasAnimationFloatValue = true;
            result.animationFloatValue_ = value;
            return this;
          }
          public Builder ClearAnimationFloatValue() {
            PrepareBuilder();
            result.hasAnimationFloatValue = false;
            result.animationFloatValue_ = 0F;
            return this;
          }

          public bool HasAnimationIntValue {
            get { return result.hasAnimationIntValue; }
          }
          public int AnimationIntValue {
            get { return result.AnimationIntValue; }
            set { SetAnimationIntValue(value); }
          }
          public Builder SetAnimationIntValue(int value) {
            PrepareBuilder();
            result.hasAnimationIntValue = true;
            result.animationIntValue_ = value;
            return this;
          }
          public Builder ClearAnimationIntValue() {
            PrepareBuilder();
            result.hasAnimationIntValue = false;
            result.animationIntValue_ = 0;
            return this;
          }

          public bool HasTriggerString {
            get { return result.hasTriggerString; }
          }
          public string TriggerString {
            get { return result.TriggerString; }
            set { SetTriggerString(value); }
          }
          public Builder SetTriggerString(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasTriggerString = true;
            result.triggerString_ = value;
            return this;
          }
          public Builder ClearTriggerString() {
            PrepareBuilder();
            result.hasTriggerString = false;
            result.triggerString_ = "";
            return this;
          }
        }
        static EntityActionData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DetectorCreationData : pb::GeneratedMessageLite<DetectorCreationData, DetectorCreationData.Builder> {
        private DetectorCreationData() { }
        private static readonly DetectorCreationData defaultInstance = new DetectorCreationData().MakeReadOnly();
        private static readonly string[] _detectorCreationDataFieldNames = new string[] { "damage", "direction", "origin", "owner_entity_id", "type" };
        private static readonly uint[] _detectorCreationDataFieldTags = new uint[] { 40, 26, 18, 32, 8 };
        public static DetectorCreationData DefaultInstance {
          get { return defaultInstance; }
        }

        public override DetectorCreationData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override DetectorCreationData ThisMessage {
          get { return this; }
        }

        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::Network.Packet.DetectorType type_ = global::Network.Packet.DetectorType.kRocket;
        public bool HasType {
          get { return hasType; }
        }
        public global::Network.Packet.DetectorType Type {
          get { return type_; }
        }

        public const int OriginFieldNumber = 2;
        private bool hasOrigin;
        private global::Network.Packet.Vector3Data origin_;
        public bool HasOrigin {
          get { return hasOrigin; }
        }
        public global::Network.Packet.Vector3Data Origin {
          get { return origin_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int DirectionFieldNumber = 3;
        private bool hasDirection;
        private global::Network.Packet.Vector3Data direction_;
        public bool HasDirection {
          get { return hasDirection; }
        }
        public global::Network.Packet.Vector3Data Direction {
          get { return direction_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int OwnerEntityIdFieldNumber = 4;
        private bool hasOwnerEntityId;
        private int ownerEntityId_;
        public bool HasOwnerEntityId {
          get { return hasOwnerEntityId; }
        }
        public int OwnerEntityId {
          get { return ownerEntityId_; }
        }

        public const int DamageFieldNumber = 5;
        private bool hasDamage;
        private int damage_;
        public bool HasDamage {
          get { return hasDamage; }
        }
        public int Damage {
          get { return damage_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _detectorCreationDataFieldNames;
          if (hasType) {
            output.WriteEnum(1, field_names[4], (int) Type, Type);
          }
          if (hasOrigin) {
            output.WriteMessage(2, field_names[2], Origin);
          }
          if (hasDirection) {
            output.WriteMessage(3, field_names[1], Direction);
          }
          if (hasOwnerEntityId) {
            output.WriteInt32(4, field_names[3], OwnerEntityId);
          }
          if (hasDamage) {
            output.WriteInt32(5, field_names[0], Damage);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasType) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
          }
          if (hasOrigin) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, Origin);
          }
          if (hasDirection) {
            size += pb::CodedOutputStream.ComputeMessageSize(3, Direction);
          }
          if (hasOwnerEntityId) {
            size += pb::CodedOutputStream.ComputeInt32Size(4, OwnerEntityId);
          }
          if (hasDamage) {
            size += pb::CodedOutputStream.ComputeInt32Size(5, Damage);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasType) {
            hash ^= type_.GetHashCode();
          }
          if (hasOrigin) hash ^= origin_.GetHashCode();
          if (hasDirection) hash ^= direction_.GetHashCode();
          if (hasOwnerEntityId) {
            hash ^= ownerEntityId_.GetHashCode();
          }
          if (hasDamage) {
            hash ^= damage_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          DetectorCreationData other = obj as DetectorCreationData;
          if (other == null) return false;
          if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
          if (hasOrigin != other.hasOrigin || (hasOrigin && !origin_.Equals(other.origin_))) return false;
          if (hasDirection != other.hasDirection || (hasDirection && !direction_.Equals(other.direction_))) return false;
          if (hasOwnerEntityId != other.hasOwnerEntityId || (hasOwnerEntityId && !ownerEntityId_.Equals(other.ownerEntityId_))) return false;
          if (hasDamage != other.hasDamage || (hasDamage && !damage_.Equals(other.damage_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("type", hasType, type_, writer);
          PrintField("origin", hasOrigin, origin_, writer);
          PrintField("direction", hasDirection, direction_, writer);
          PrintField("owner_entity_id", hasOwnerEntityId, ownerEntityId_, writer);
          PrintField("damage", hasDamage, damage_, writer);
        }
        #endregion

        public static DetectorCreationData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DetectorCreationData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DetectorCreationData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DetectorCreationData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DetectorCreationData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DetectorCreationData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DetectorCreationData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DetectorCreationData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DetectorCreationData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DetectorCreationData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DetectorCreationData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DetectorCreationData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<DetectorCreationData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(DetectorCreationData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private DetectorCreationData result;

          private DetectorCreationData PrepareBuilder() {
            if (resultIsReadOnly) {
              DetectorCreationData original = result;
              result = new DetectorCreationData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override DetectorCreationData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override DetectorCreationData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.DetectorCreationData.DefaultInstance; }
          }

          public override DetectorCreationData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is DetectorCreationData) {
              return MergeFrom((DetectorCreationData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(DetectorCreationData other) {
            if (other == global::Network.Packet.Response.Types.DetectorCreationData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasOrigin) {
              MergeOrigin(other.Origin);
            }
            if (other.HasDirection) {
              MergeDirection(other.Direction);
            }
            if (other.HasOwnerEntityId) {
              OwnerEntityId = other.OwnerEntityId;
            }
            if (other.HasDamage) {
              Damage = other.Damage;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_detectorCreationDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _detectorCreationDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.type_, out unknown)) {
                    result.hasType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 18: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasOrigin) {
                    subBuilder.MergeFrom(Origin);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Origin = subBuilder.BuildPartial();
                  break;
                }
                case 26: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasDirection) {
                    subBuilder.MergeFrom(Direction);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Direction = subBuilder.BuildPartial();
                  break;
                }
                case 32: {
                  result.hasOwnerEntityId = input.ReadInt32(ref result.ownerEntityId_);
                  break;
                }
                case 40: {
                  result.hasDamage = input.ReadInt32(ref result.damage_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasType {
           get { return result.hasType; }
          }
          public global::Network.Packet.DetectorType Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::Network.Packet.DetectorType value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::Network.Packet.DetectorType.kRocket;
            return this;
          }

          public bool HasOrigin {
           get { return result.hasOrigin; }
          }
          public global::Network.Packet.Vector3Data Origin {
            get { return result.Origin; }
            set { SetOrigin(value); }
          }
          public Builder SetOrigin(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasOrigin = true;
            result.origin_ = value;
            return this;
          }
          public Builder SetOrigin(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasOrigin = true;
            result.origin_ = builderForValue.Build();
            return this;
          }
          public Builder MergeOrigin(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasOrigin &&
                result.origin_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.origin_ = global::Network.Packet.Vector3Data.CreateBuilder(result.origin_).MergeFrom(value).BuildPartial();
            } else {
              result.origin_ = value;
            }
            result.hasOrigin = true;
            return this;
          }
          public Builder ClearOrigin() {
            PrepareBuilder();
            result.hasOrigin = false;
            result.origin_ = null;
            return this;
          }

          public bool HasDirection {
           get { return result.hasDirection; }
          }
          public global::Network.Packet.Vector3Data Direction {
            get { return result.Direction; }
            set { SetDirection(value); }
          }
          public Builder SetDirection(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDirection = true;
            result.direction_ = value;
            return this;
          }
          public Builder SetDirection(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasDirection = true;
            result.direction_ = builderForValue.Build();
            return this;
          }
          public Builder MergeDirection(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasDirection &&
                result.direction_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.direction_ = global::Network.Packet.Vector3Data.CreateBuilder(result.direction_).MergeFrom(value).BuildPartial();
            } else {
              result.direction_ = value;
            }
            result.hasDirection = true;
            return this;
          }
          public Builder ClearDirection() {
            PrepareBuilder();
            result.hasDirection = false;
            result.direction_ = null;
            return this;
          }

          public bool HasOwnerEntityId {
            get { return result.hasOwnerEntityId; }
          }
          public int OwnerEntityId {
            get { return result.OwnerEntityId; }
            set { SetOwnerEntityId(value); }
          }
          public Builder SetOwnerEntityId(int value) {
            PrepareBuilder();
            result.hasOwnerEntityId = true;
            result.ownerEntityId_ = value;
            return this;
          }
          public Builder ClearOwnerEntityId() {
            PrepareBuilder();
            result.hasOwnerEntityId = false;
            result.ownerEntityId_ = 0;
            return this;
          }

          public bool HasDamage {
            get { return result.hasDamage; }
          }
          public int Damage {
            get { return result.Damage; }
            set { SetDamage(value); }
          }
          public Builder SetDamage(int value) {
            PrepareBuilder();
            result.hasDamage = true;
            result.damage_ = value;
            return this;
          }
          public Builder ClearDamage() {
            PrepareBuilder();
            result.hasDamage = false;
            result.damage_ = 0;
            return this;
          }
        }
        static DetectorCreationData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DetectorActionData : pb::GeneratedMessageLite<DetectorActionData, DetectorActionData.Builder> {
        private DetectorActionData() { }
        private static readonly DetectorActionData defaultInstance = new DetectorActionData().MakeReadOnly();
        private static readonly string[] _detectorActionDataFieldNames = new string[] { "detector_action", "detector_creation_data", "detector_id", "string_packet" };
        private static readonly uint[] _detectorActionDataFieldTags = new uint[] { 16, 26, 8, 82 };
        public static DetectorActionData DefaultInstance {
          get { return defaultInstance; }
        }

        public override DetectorActionData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override DetectorActionData ThisMessage {
          get { return this; }
        }

        public const int DetectorIdFieldNumber = 1;
        private bool hasDetectorId;
        private int detectorId_;
        public bool HasDetectorId {
          get { return hasDetectorId; }
        }
        public int DetectorId {
          get { return detectorId_; }
        }

        public const int DetectorActionFieldNumber = 2;
        private bool hasDetectorAction;
        private global::Network.Packet.ObjectActionType detectorAction_ = global::Network.Packet.ObjectActionType.kCreated;
        public bool HasDetectorAction {
          get { return hasDetectorAction; }
        }
        public global::Network.Packet.ObjectActionType DetectorAction {
          get { return detectorAction_; }
        }

        public const int DetectorCreationDataFieldNumber = 3;
        private bool hasDetectorCreationData;
        private global::Network.Packet.Response.Types.DetectorCreationData detectorCreationData_;
        public bool HasDetectorCreationData {
          get { return hasDetectorCreationData; }
        }
        public global::Network.Packet.Response.Types.DetectorCreationData DetectorCreationData {
          get { return detectorCreationData_ ?? global::Network.Packet.Response.Types.DetectorCreationData.DefaultInstance; }
        }

        public const int StringPacketFieldNumber = 10;
        private bool hasStringPacket;
        private string stringPacket_ = "";
        public bool HasStringPacket {
          get { return hasStringPacket; }
        }
        public string StringPacket {
          get { return stringPacket_; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _detectorActionDataFieldNames;
          if (hasDetectorId) {
            output.WriteInt32(1, field_names[2], DetectorId);
          }
          if (hasDetectorAction) {
            output.WriteEnum(2, field_names[0], (int) DetectorAction, DetectorAction);
          }
          if (hasDetectorCreationData) {
            output.WriteMessage(3, field_names[1], DetectorCreationData);
          }
          if (hasStringPacket) {
            output.WriteString(10, field_names[3], StringPacket);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasDetectorId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, DetectorId);
          }
          if (hasDetectorAction) {
            size += pb::CodedOutputStream.ComputeEnumSize(2, (int) DetectorAction);
          }
          if (hasDetectorCreationData) {
            size += pb::CodedOutputStream.ComputeMessageSize(3, DetectorCreationData);
          }
          if (hasStringPacket) {
            size += pb::CodedOutputStream.ComputeStringSize(10, StringPacket);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasDetectorId) {
            hash ^= detectorId_.GetHashCode();
          }
          if (hasDetectorAction) {
            hash ^= detectorAction_.GetHashCode();
          }
          if (hasDetectorCreationData) hash ^= detectorCreationData_.GetHashCode();
          if (hasStringPacket) {
            hash ^= stringPacket_.GetHashCode();
          }
          return hash;
        }

        public override bool Equals(object obj) {
          DetectorActionData other = obj as DetectorActionData;
          if (other == null) return false;
          if (hasDetectorId != other.hasDetectorId || (hasDetectorId && !detectorId_.Equals(other.detectorId_))) return false;
          if (hasDetectorAction != other.hasDetectorAction || (hasDetectorAction && !detectorAction_.Equals(other.detectorAction_))) return false;
          if (hasDetectorCreationData != other.hasDetectorCreationData || (hasDetectorCreationData && !detectorCreationData_.Equals(other.detectorCreationData_))) return false;
          if (hasStringPacket != other.hasStringPacket || (hasStringPacket && !stringPacket_.Equals(other.stringPacket_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("detector_id", hasDetectorId, detectorId_, writer);
          PrintField("detector_action", hasDetectorAction, detectorAction_, writer);
          PrintField("detector_creation_data", hasDetectorCreationData, detectorCreationData_, writer);
          PrintField("string_packet", hasStringPacket, stringPacket_, writer);
        }
        #endregion

        public static DetectorActionData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DetectorActionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DetectorActionData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DetectorActionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DetectorActionData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DetectorActionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DetectorActionData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DetectorActionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DetectorActionData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DetectorActionData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DetectorActionData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DetectorActionData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<DetectorActionData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(DetectorActionData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private DetectorActionData result;

          private DetectorActionData PrepareBuilder() {
            if (resultIsReadOnly) {
              DetectorActionData original = result;
              result = new DetectorActionData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override DetectorActionData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override DetectorActionData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.DetectorActionData.DefaultInstance; }
          }

          public override DetectorActionData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is DetectorActionData) {
              return MergeFrom((DetectorActionData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(DetectorActionData other) {
            if (other == global::Network.Packet.Response.Types.DetectorActionData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasDetectorId) {
              DetectorId = other.DetectorId;
            }
            if (other.HasDetectorAction) {
              DetectorAction = other.DetectorAction;
            }
            if (other.HasDetectorCreationData) {
              MergeDetectorCreationData(other.DetectorCreationData);
            }
            if (other.HasStringPacket) {
              StringPacket = other.StringPacket;
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_detectorActionDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _detectorActionDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasDetectorId = input.ReadInt32(ref result.detectorId_);
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.detectorAction_, out unknown)) {
                    result.hasDetectorAction = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 26: {
                  global::Network.Packet.Response.Types.DetectorCreationData.Builder subBuilder = global::Network.Packet.Response.Types.DetectorCreationData.CreateBuilder();
                  if (result.hasDetectorCreationData) {
                    subBuilder.MergeFrom(DetectorCreationData);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  DetectorCreationData = subBuilder.BuildPartial();
                  break;
                }
                case 82: {
                  result.hasStringPacket = input.ReadString(ref result.stringPacket_);
                  break;
                }
              }
            }

            return this;
          }


          public bool HasDetectorId {
            get { return result.hasDetectorId; }
          }
          public int DetectorId {
            get { return result.DetectorId; }
            set { SetDetectorId(value); }
          }
          public Builder SetDetectorId(int value) {
            PrepareBuilder();
            result.hasDetectorId = true;
            result.detectorId_ = value;
            return this;
          }
          public Builder ClearDetectorId() {
            PrepareBuilder();
            result.hasDetectorId = false;
            result.detectorId_ = 0;
            return this;
          }

          public bool HasDetectorAction {
           get { return result.hasDetectorAction; }
          }
          public global::Network.Packet.ObjectActionType DetectorAction {
            get { return result.DetectorAction; }
            set { SetDetectorAction(value); }
          }
          public Builder SetDetectorAction(global::Network.Packet.ObjectActionType value) {
            PrepareBuilder();
            result.hasDetectorAction = true;
            result.detectorAction_ = value;
            return this;
          }
          public Builder ClearDetectorAction() {
            PrepareBuilder();
            result.hasDetectorAction = false;
            result.detectorAction_ = global::Network.Packet.ObjectActionType.kCreated;
            return this;
          }

          public bool HasDetectorCreationData {
           get { return result.hasDetectorCreationData; }
          }
          public global::Network.Packet.Response.Types.DetectorCreationData DetectorCreationData {
            get { return result.DetectorCreationData; }
            set { SetDetectorCreationData(value); }
          }
          public Builder SetDetectorCreationData(global::Network.Packet.Response.Types.DetectorCreationData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasDetectorCreationData = true;
            result.detectorCreationData_ = value;
            return this;
          }
          public Builder SetDetectorCreationData(global::Network.Packet.Response.Types.DetectorCreationData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasDetectorCreationData = true;
            result.detectorCreationData_ = builderForValue.Build();
            return this;
          }
          public Builder MergeDetectorCreationData(global::Network.Packet.Response.Types.DetectorCreationData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasDetectorCreationData &&
                result.detectorCreationData_ != global::Network.Packet.Response.Types.DetectorCreationData.DefaultInstance) {
                result.detectorCreationData_ = global::Network.Packet.Response.Types.DetectorCreationData.CreateBuilder(result.detectorCreationData_).MergeFrom(value).BuildPartial();
            } else {
              result.detectorCreationData_ = value;
            }
            result.hasDetectorCreationData = true;
            return this;
          }
          public Builder ClearDetectorCreationData() {
            PrepareBuilder();
            result.hasDetectorCreationData = false;
            result.detectorCreationData_ = null;
            return this;
          }

          public bool HasStringPacket {
            get { return result.hasStringPacket; }
          }
          public string StringPacket {
            get { return result.StringPacket; }
            set { SetStringPacket(value); }
          }
          public Builder SetStringPacket(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasStringPacket = true;
            result.stringPacket_ = value;
            return this;
          }
          public Builder ClearStringPacket() {
            PrepareBuilder();
            result.hasStringPacket = false;
            result.stringPacket_ = "";
            return this;
          }
        }
        static DetectorActionData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class LocatorCreationData : pb::GeneratedMessageLite<LocatorCreationData, LocatorCreationData.Builder> {
        private LocatorCreationData() { }
        private static readonly LocatorCreationData defaultInstance = new LocatorCreationData().MakeReadOnly();
        private static readonly string[] _locatorCreationDataFieldNames = new string[] { "position", "rotation", "type" };
        private static readonly uint[] _locatorCreationDataFieldTags = new uint[] { 26, 34, 8 };
        public static LocatorCreationData DefaultInstance {
          get { return defaultInstance; }
        }

        public override LocatorCreationData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override LocatorCreationData ThisMessage {
          get { return this; }
        }

        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::Network.Packet.LocatorType type_ = global::Network.Packet.LocatorType.kNoneLocatorType;
        public bool HasType {
          get { return hasType; }
        }
        public global::Network.Packet.LocatorType Type {
          get { return type_; }
        }

        public const int PositionFieldNumber = 3;
        private bool hasPosition;
        private global::Network.Packet.Vector3Data position_;
        public bool HasPosition {
          get { return hasPosition; }
        }
        public global::Network.Packet.Vector3Data Position {
          get { return position_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int RotationFieldNumber = 4;
        private bool hasRotation;
        private global::Network.Packet.Vector4Data rotation_;
        public bool HasRotation {
          get { return hasRotation; }
        }
        public global::Network.Packet.Vector4Data Rotation {
          get { return rotation_ ?? global::Network.Packet.Vector4Data.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _locatorCreationDataFieldNames;
          if (hasType) {
            output.WriteEnum(1, field_names[2], (int) Type, Type);
          }
          if (hasPosition) {
            output.WriteMessage(3, field_names[0], Position);
          }
          if (hasRotation) {
            output.WriteMessage(4, field_names[1], Rotation);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasType) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
          }
          if (hasPosition) {
            size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
          }
          if (hasRotation) {
            size += pb::CodedOutputStream.ComputeMessageSize(4, Rotation);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasType) {
            hash ^= type_.GetHashCode();
          }
          if (hasPosition) hash ^= position_.GetHashCode();
          if (hasRotation) hash ^= rotation_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          LocatorCreationData other = obj as LocatorCreationData;
          if (other == null) return false;
          if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
          if (hasPosition != other.hasPosition || (hasPosition && !position_.Equals(other.position_))) return false;
          if (hasRotation != other.hasRotation || (hasRotation && !rotation_.Equals(other.rotation_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("type", hasType, type_, writer);
          PrintField("position", hasPosition, position_, writer);
          PrintField("rotation", hasRotation, rotation_, writer);
        }
        #endregion

        public static LocatorCreationData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LocatorCreationData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LocatorCreationData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LocatorCreationData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LocatorCreationData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LocatorCreationData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static LocatorCreationData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static LocatorCreationData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static LocatorCreationData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LocatorCreationData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private LocatorCreationData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(LocatorCreationData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<LocatorCreationData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(LocatorCreationData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private LocatorCreationData result;

          private LocatorCreationData PrepareBuilder() {
            if (resultIsReadOnly) {
              LocatorCreationData original = result;
              result = new LocatorCreationData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override LocatorCreationData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override LocatorCreationData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.LocatorCreationData.DefaultInstance; }
          }

          public override LocatorCreationData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is LocatorCreationData) {
              return MergeFrom((LocatorCreationData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(LocatorCreationData other) {
            if (other == global::Network.Packet.Response.Types.LocatorCreationData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasPosition) {
              MergePosition(other.Position);
            }
            if (other.HasRotation) {
              MergeRotation(other.Rotation);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_locatorCreationDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _locatorCreationDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.type_, out unknown)) {
                    result.hasType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 26: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasPosition) {
                    subBuilder.MergeFrom(Position);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Position = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  global::Network.Packet.Vector4Data.Builder subBuilder = global::Network.Packet.Vector4Data.CreateBuilder();
                  if (result.hasRotation) {
                    subBuilder.MergeFrom(Rotation);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Rotation = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasType {
           get { return result.hasType; }
          }
          public global::Network.Packet.LocatorType Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::Network.Packet.LocatorType value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::Network.Packet.LocatorType.kNoneLocatorType;
            return this;
          }

          public bool HasPosition {
           get { return result.hasPosition; }
          }
          public global::Network.Packet.Vector3Data Position {
            get { return result.Position; }
            set { SetPosition(value); }
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = value;
            return this;
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = builderForValue.Build();
            return this;
          }
          public Builder MergePosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasPosition &&
                result.position_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.position_ = global::Network.Packet.Vector3Data.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
            } else {
              result.position_ = value;
            }
            result.hasPosition = true;
            return this;
          }
          public Builder ClearPosition() {
            PrepareBuilder();
            result.hasPosition = false;
            result.position_ = null;
            return this;
          }

          public bool HasRotation {
           get { return result.hasRotation; }
          }
          public global::Network.Packet.Vector4Data Rotation {
            get { return result.Rotation; }
            set { SetRotation(value); }
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = value;
            return this;
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = builderForValue.Build();
            return this;
          }
          public Builder MergeRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRotation &&
                result.rotation_ != global::Network.Packet.Vector4Data.DefaultInstance) {
                result.rotation_ = global::Network.Packet.Vector4Data.CreateBuilder(result.rotation_).MergeFrom(value).BuildPartial();
            } else {
              result.rotation_ = value;
            }
            result.hasRotation = true;
            return this;
          }
          public Builder ClearRotation() {
            PrepareBuilder();
            result.hasRotation = false;
            result.rotation_ = null;
            return this;
          }
        }
        static LocatorCreationData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class LocatorStateData : pb::GeneratedMessageLite<LocatorStateData, LocatorStateData.Builder> {
        private LocatorStateData() { }
        private static readonly LocatorStateData defaultInstance = new LocatorStateData().MakeReadOnly();
        private static readonly string[] _locatorStateDataFieldNames = new string[] { "locator_id", "position", "rotation" };
        private static readonly uint[] _locatorStateDataFieldTags = new uint[] { 8, 26, 34 };
        public static LocatorStateData DefaultInstance {
          get { return defaultInstance; }
        }

        public override LocatorStateData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override LocatorStateData ThisMessage {
          get { return this; }
        }

        public const int LocatorIdFieldNumber = 1;
        private bool hasLocatorId;
        private int locatorId_;
        public bool HasLocatorId {
          get { return hasLocatorId; }
        }
        public int LocatorId {
          get { return locatorId_; }
        }

        public const int PositionFieldNumber = 3;
        private bool hasPosition;
        private global::Network.Packet.Vector3Data position_;
        public bool HasPosition {
          get { return hasPosition; }
        }
        public global::Network.Packet.Vector3Data Position {
          get { return position_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int RotationFieldNumber = 4;
        private bool hasRotation;
        private global::Network.Packet.Vector4Data rotation_;
        public bool HasRotation {
          get { return hasRotation; }
        }
        public global::Network.Packet.Vector4Data Rotation {
          get { return rotation_ ?? global::Network.Packet.Vector4Data.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _locatorStateDataFieldNames;
          if (hasLocatorId) {
            output.WriteInt32(1, field_names[0], LocatorId);
          }
          if (hasPosition) {
            output.WriteMessage(3, field_names[1], Position);
          }
          if (hasRotation) {
            output.WriteMessage(4, field_names[2], Rotation);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasLocatorId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, LocatorId);
          }
          if (hasPosition) {
            size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
          }
          if (hasRotation) {
            size += pb::CodedOutputStream.ComputeMessageSize(4, Rotation);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasLocatorId) {
            hash ^= locatorId_.GetHashCode();
          }
          if (hasPosition) hash ^= position_.GetHashCode();
          if (hasRotation) hash ^= rotation_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          LocatorStateData other = obj as LocatorStateData;
          if (other == null) return false;
          if (hasLocatorId != other.hasLocatorId || (hasLocatorId && !locatorId_.Equals(other.locatorId_))) return false;
          if (hasPosition != other.hasPosition || (hasPosition && !position_.Equals(other.position_))) return false;
          if (hasRotation != other.hasRotation || (hasRotation && !rotation_.Equals(other.rotation_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("locator_id", hasLocatorId, locatorId_, writer);
          PrintField("position", hasPosition, position_, writer);
          PrintField("rotation", hasRotation, rotation_, writer);
        }
        #endregion

        public static LocatorStateData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LocatorStateData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LocatorStateData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LocatorStateData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LocatorStateData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LocatorStateData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static LocatorStateData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static LocatorStateData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static LocatorStateData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LocatorStateData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private LocatorStateData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(LocatorStateData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<LocatorStateData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(LocatorStateData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private LocatorStateData result;

          private LocatorStateData PrepareBuilder() {
            if (resultIsReadOnly) {
              LocatorStateData original = result;
              result = new LocatorStateData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override LocatorStateData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override LocatorStateData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.LocatorStateData.DefaultInstance; }
          }

          public override LocatorStateData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is LocatorStateData) {
              return MergeFrom((LocatorStateData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(LocatorStateData other) {
            if (other == global::Network.Packet.Response.Types.LocatorStateData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasLocatorId) {
              LocatorId = other.LocatorId;
            }
            if (other.HasPosition) {
              MergePosition(other.Position);
            }
            if (other.HasRotation) {
              MergeRotation(other.Rotation);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_locatorStateDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _locatorStateDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasLocatorId = input.ReadInt32(ref result.locatorId_);
                  break;
                }
                case 26: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasPosition) {
                    subBuilder.MergeFrom(Position);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Position = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  global::Network.Packet.Vector4Data.Builder subBuilder = global::Network.Packet.Vector4Data.CreateBuilder();
                  if (result.hasRotation) {
                    subBuilder.MergeFrom(Rotation);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Rotation = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasLocatorId {
            get { return result.hasLocatorId; }
          }
          public int LocatorId {
            get { return result.LocatorId; }
            set { SetLocatorId(value); }
          }
          public Builder SetLocatorId(int value) {
            PrepareBuilder();
            result.hasLocatorId = true;
            result.locatorId_ = value;
            return this;
          }
          public Builder ClearLocatorId() {
            PrepareBuilder();
            result.hasLocatorId = false;
            result.locatorId_ = 0;
            return this;
          }

          public bool HasPosition {
           get { return result.hasPosition; }
          }
          public global::Network.Packet.Vector3Data Position {
            get { return result.Position; }
            set { SetPosition(value); }
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = value;
            return this;
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = builderForValue.Build();
            return this;
          }
          public Builder MergePosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasPosition &&
                result.position_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.position_ = global::Network.Packet.Vector3Data.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
            } else {
              result.position_ = value;
            }
            result.hasPosition = true;
            return this;
          }
          public Builder ClearPosition() {
            PrepareBuilder();
            result.hasPosition = false;
            result.position_ = null;
            return this;
          }

          public bool HasRotation {
           get { return result.hasRotation; }
          }
          public global::Network.Packet.Vector4Data Rotation {
            get { return result.Rotation; }
            set { SetRotation(value); }
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = value;
            return this;
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = builderForValue.Build();
            return this;
          }
          public Builder MergeRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRotation &&
                result.rotation_ != global::Network.Packet.Vector4Data.DefaultInstance) {
                result.rotation_ = global::Network.Packet.Vector4Data.CreateBuilder(result.rotation_).MergeFrom(value).BuildPartial();
            } else {
              result.rotation_ = value;
            }
            result.hasRotation = true;
            return this;
          }
          public Builder ClearRotation() {
            PrepareBuilder();
            result.hasRotation = false;
            result.rotation_ = null;
            return this;
          }
        }
        static LocatorStateData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class LocatorActionData : pb::GeneratedMessageLite<LocatorActionData, LocatorActionData.Builder> {
        private LocatorActionData() { }
        private static readonly LocatorActionData defaultInstance = new LocatorActionData().MakeReadOnly();
        private static readonly string[] _locatorActionDataFieldNames = new string[] { "locator_action", "locator_creation_data", "locator_id" };
        private static readonly uint[] _locatorActionDataFieldTags = new uint[] { 16, 82, 8 };
        public static LocatorActionData DefaultInstance {
          get { return defaultInstance; }
        }

        public override LocatorActionData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override LocatorActionData ThisMessage {
          get { return this; }
        }

        public const int LocatorIdFieldNumber = 1;
        private bool hasLocatorId;
        private int locatorId_;
        public bool HasLocatorId {
          get { return hasLocatorId; }
        }
        public int LocatorId {
          get { return locatorId_; }
        }

        public const int LocatorActionFieldNumber = 2;
        private bool hasLocatorAction;
        private global::Network.Packet.ObjectActionType locatorAction_ = global::Network.Packet.ObjectActionType.kCreated;
        public bool HasLocatorAction {
          get { return hasLocatorAction; }
        }
        public global::Network.Packet.ObjectActionType LocatorAction {
          get { return locatorAction_; }
        }

        public const int LocatorCreationDataFieldNumber = 10;
        private bool hasLocatorCreationData;
        private global::Network.Packet.Response.Types.LocatorCreationData locatorCreationData_;
        public bool HasLocatorCreationData {
          get { return hasLocatorCreationData; }
        }
        public global::Network.Packet.Response.Types.LocatorCreationData LocatorCreationData {
          get { return locatorCreationData_ ?? global::Network.Packet.Response.Types.LocatorCreationData.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _locatorActionDataFieldNames;
          if (hasLocatorId) {
            output.WriteInt32(1, field_names[2], LocatorId);
          }
          if (hasLocatorAction) {
            output.WriteEnum(2, field_names[0], (int) LocatorAction, LocatorAction);
          }
          if (hasLocatorCreationData) {
            output.WriteMessage(10, field_names[1], LocatorCreationData);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasLocatorId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, LocatorId);
          }
          if (hasLocatorAction) {
            size += pb::CodedOutputStream.ComputeEnumSize(2, (int) LocatorAction);
          }
          if (hasLocatorCreationData) {
            size += pb::CodedOutputStream.ComputeMessageSize(10, LocatorCreationData);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasLocatorId) {
            hash ^= locatorId_.GetHashCode();
          }
          if (hasLocatorAction) {
            hash ^= locatorAction_.GetHashCode();
          }
          if (hasLocatorCreationData) hash ^= locatorCreationData_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          LocatorActionData other = obj as LocatorActionData;
          if (other == null) return false;
          if (hasLocatorId != other.hasLocatorId || (hasLocatorId && !locatorId_.Equals(other.locatorId_))) return false;
          if (hasLocatorAction != other.hasLocatorAction || (hasLocatorAction && !locatorAction_.Equals(other.locatorAction_))) return false;
          if (hasLocatorCreationData != other.hasLocatorCreationData || (hasLocatorCreationData && !locatorCreationData_.Equals(other.locatorCreationData_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("locator_id", hasLocatorId, locatorId_, writer);
          PrintField("locator_action", hasLocatorAction, locatorAction_, writer);
          PrintField("locator_creation_data", hasLocatorCreationData, locatorCreationData_, writer);
        }
        #endregion

        public static LocatorActionData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LocatorActionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LocatorActionData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LocatorActionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LocatorActionData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LocatorActionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static LocatorActionData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static LocatorActionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static LocatorActionData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LocatorActionData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private LocatorActionData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(LocatorActionData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<LocatorActionData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(LocatorActionData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private LocatorActionData result;

          private LocatorActionData PrepareBuilder() {
            if (resultIsReadOnly) {
              LocatorActionData original = result;
              result = new LocatorActionData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override LocatorActionData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override LocatorActionData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.LocatorActionData.DefaultInstance; }
          }

          public override LocatorActionData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is LocatorActionData) {
              return MergeFrom((LocatorActionData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(LocatorActionData other) {
            if (other == global::Network.Packet.Response.Types.LocatorActionData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasLocatorId) {
              LocatorId = other.LocatorId;
            }
            if (other.HasLocatorAction) {
              LocatorAction = other.LocatorAction;
            }
            if (other.HasLocatorCreationData) {
              MergeLocatorCreationData(other.LocatorCreationData);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_locatorActionDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _locatorActionDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasLocatorId = input.ReadInt32(ref result.locatorId_);
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.locatorAction_, out unknown)) {
                    result.hasLocatorAction = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 82: {
                  global::Network.Packet.Response.Types.LocatorCreationData.Builder subBuilder = global::Network.Packet.Response.Types.LocatorCreationData.CreateBuilder();
                  if (result.hasLocatorCreationData) {
                    subBuilder.MergeFrom(LocatorCreationData);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  LocatorCreationData = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasLocatorId {
            get { return result.hasLocatorId; }
          }
          public int LocatorId {
            get { return result.LocatorId; }
            set { SetLocatorId(value); }
          }
          public Builder SetLocatorId(int value) {
            PrepareBuilder();
            result.hasLocatorId = true;
            result.locatorId_ = value;
            return this;
          }
          public Builder ClearLocatorId() {
            PrepareBuilder();
            result.hasLocatorId = false;
            result.locatorId_ = 0;
            return this;
          }

          public bool HasLocatorAction {
           get { return result.hasLocatorAction; }
          }
          public global::Network.Packet.ObjectActionType LocatorAction {
            get { return result.LocatorAction; }
            set { SetLocatorAction(value); }
          }
          public Builder SetLocatorAction(global::Network.Packet.ObjectActionType value) {
            PrepareBuilder();
            result.hasLocatorAction = true;
            result.locatorAction_ = value;
            return this;
          }
          public Builder ClearLocatorAction() {
            PrepareBuilder();
            result.hasLocatorAction = false;
            result.locatorAction_ = global::Network.Packet.ObjectActionType.kCreated;
            return this;
          }

          public bool HasLocatorCreationData {
           get { return result.hasLocatorCreationData; }
          }
          public global::Network.Packet.Response.Types.LocatorCreationData LocatorCreationData {
            get { return result.LocatorCreationData; }
            set { SetLocatorCreationData(value); }
          }
          public Builder SetLocatorCreationData(global::Network.Packet.Response.Types.LocatorCreationData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasLocatorCreationData = true;
            result.locatorCreationData_ = value;
            return this;
          }
          public Builder SetLocatorCreationData(global::Network.Packet.Response.Types.LocatorCreationData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasLocatorCreationData = true;
            result.locatorCreationData_ = builderForValue.Build();
            return this;
          }
          public Builder MergeLocatorCreationData(global::Network.Packet.Response.Types.LocatorCreationData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasLocatorCreationData &&
                result.locatorCreationData_ != global::Network.Packet.Response.Types.LocatorCreationData.DefaultInstance) {
                result.locatorCreationData_ = global::Network.Packet.Response.Types.LocatorCreationData.CreateBuilder(result.locatorCreationData_).MergeFrom(value).BuildPartial();
            } else {
              result.locatorCreationData_ = value;
            }
            result.hasLocatorCreationData = true;
            return this;
          }
          public Builder ClearLocatorCreationData() {
            PrepareBuilder();
            result.hasLocatorCreationData = false;
            result.locatorCreationData_ = null;
            return this;
          }
        }
        static LocatorActionData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ItemObjectCreationData : pb::GeneratedMessageLite<ItemObjectCreationData, ItemObjectCreationData.Builder> {
        private ItemObjectCreationData() { }
        private static readonly ItemObjectCreationData defaultInstance = new ItemObjectCreationData().MakeReadOnly();
        private static readonly string[] _itemObjectCreationDataFieldNames = new string[] { "position", "rotation", "type" };
        private static readonly uint[] _itemObjectCreationDataFieldTags = new uint[] { 26, 34, 8 };
        public static ItemObjectCreationData DefaultInstance {
          get { return defaultInstance; }
        }

        public override ItemObjectCreationData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override ItemObjectCreationData ThisMessage {
          get { return this; }
        }

        public const int TypeFieldNumber = 1;
        private bool hasType;
        private global::Network.Packet.ItemType type_ = global::Network.Packet.ItemType.kNoneItemType;
        public bool HasType {
          get { return hasType; }
        }
        public global::Network.Packet.ItemType Type {
          get { return type_; }
        }

        public const int PositionFieldNumber = 3;
        private bool hasPosition;
        private global::Network.Packet.Vector3Data position_;
        public bool HasPosition {
          get { return hasPosition; }
        }
        public global::Network.Packet.Vector3Data Position {
          get { return position_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int RotationFieldNumber = 4;
        private bool hasRotation;
        private global::Network.Packet.Vector4Data rotation_;
        public bool HasRotation {
          get { return hasRotation; }
        }
        public global::Network.Packet.Vector4Data Rotation {
          get { return rotation_ ?? global::Network.Packet.Vector4Data.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _itemObjectCreationDataFieldNames;
          if (hasType) {
            output.WriteEnum(1, field_names[2], (int) Type, Type);
          }
          if (hasPosition) {
            output.WriteMessage(3, field_names[0], Position);
          }
          if (hasRotation) {
            output.WriteMessage(4, field_names[1], Rotation);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasType) {
            size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
          }
          if (hasPosition) {
            size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
          }
          if (hasRotation) {
            size += pb::CodedOutputStream.ComputeMessageSize(4, Rotation);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasType) {
            hash ^= type_.GetHashCode();
          }
          if (hasPosition) hash ^= position_.GetHashCode();
          if (hasRotation) hash ^= rotation_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          ItemObjectCreationData other = obj as ItemObjectCreationData;
          if (other == null) return false;
          if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
          if (hasPosition != other.hasPosition || (hasPosition && !position_.Equals(other.position_))) return false;
          if (hasRotation != other.hasRotation || (hasRotation && !rotation_.Equals(other.rotation_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("type", hasType, type_, writer);
          PrintField("position", hasPosition, position_, writer);
          PrintField("rotation", hasRotation, rotation_, writer);
        }
        #endregion

        public static ItemObjectCreationData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ItemObjectCreationData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ItemObjectCreationData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ItemObjectCreationData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ItemObjectCreationData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ItemObjectCreationData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ItemObjectCreationData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ItemObjectCreationData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ItemObjectCreationData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ItemObjectCreationData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ItemObjectCreationData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ItemObjectCreationData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<ItemObjectCreationData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ItemObjectCreationData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private ItemObjectCreationData result;

          private ItemObjectCreationData PrepareBuilder() {
            if (resultIsReadOnly) {
              ItemObjectCreationData original = result;
              result = new ItemObjectCreationData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override ItemObjectCreationData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override ItemObjectCreationData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.ItemObjectCreationData.DefaultInstance; }
          }

          public override ItemObjectCreationData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is ItemObjectCreationData) {
              return MergeFrom((ItemObjectCreationData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(ItemObjectCreationData other) {
            if (other == global::Network.Packet.Response.Types.ItemObjectCreationData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasPosition) {
              MergePosition(other.Position);
            }
            if (other.HasRotation) {
              MergeRotation(other.Rotation);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_itemObjectCreationDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _itemObjectCreationDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  object unknown;
                  if(input.ReadEnum(ref result.type_, out unknown)) {
                    result.hasType = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 26: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasPosition) {
                    subBuilder.MergeFrom(Position);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Position = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  global::Network.Packet.Vector4Data.Builder subBuilder = global::Network.Packet.Vector4Data.CreateBuilder();
                  if (result.hasRotation) {
                    subBuilder.MergeFrom(Rotation);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Rotation = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasType {
           get { return result.hasType; }
          }
          public global::Network.Packet.ItemType Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(global::Network.Packet.ItemType value) {
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = global::Network.Packet.ItemType.kNoneItemType;
            return this;
          }

          public bool HasPosition {
           get { return result.hasPosition; }
          }
          public global::Network.Packet.Vector3Data Position {
            get { return result.Position; }
            set { SetPosition(value); }
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = value;
            return this;
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = builderForValue.Build();
            return this;
          }
          public Builder MergePosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasPosition &&
                result.position_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.position_ = global::Network.Packet.Vector3Data.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
            } else {
              result.position_ = value;
            }
            result.hasPosition = true;
            return this;
          }
          public Builder ClearPosition() {
            PrepareBuilder();
            result.hasPosition = false;
            result.position_ = null;
            return this;
          }

          public bool HasRotation {
           get { return result.hasRotation; }
          }
          public global::Network.Packet.Vector4Data Rotation {
            get { return result.Rotation; }
            set { SetRotation(value); }
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = value;
            return this;
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = builderForValue.Build();
            return this;
          }
          public Builder MergeRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRotation &&
                result.rotation_ != global::Network.Packet.Vector4Data.DefaultInstance) {
                result.rotation_ = global::Network.Packet.Vector4Data.CreateBuilder(result.rotation_).MergeFrom(value).BuildPartial();
            } else {
              result.rotation_ = value;
            }
            result.hasRotation = true;
            return this;
          }
          public Builder ClearRotation() {
            PrepareBuilder();
            result.hasRotation = false;
            result.rotation_ = null;
            return this;
          }
        }
        static ItemObjectCreationData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ItemObjectStateData : pb::GeneratedMessageLite<ItemObjectStateData, ItemObjectStateData.Builder> {
        private ItemObjectStateData() { }
        private static readonly ItemObjectStateData defaultInstance = new ItemObjectStateData().MakeReadOnly();
        private static readonly string[] _itemObjectStateDataFieldNames = new string[] { "item_id", "position", "rotation" };
        private static readonly uint[] _itemObjectStateDataFieldTags = new uint[] { 8, 26, 34 };
        public static ItemObjectStateData DefaultInstance {
          get { return defaultInstance; }
        }

        public override ItemObjectStateData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override ItemObjectStateData ThisMessage {
          get { return this; }
        }

        public const int ItemIdFieldNumber = 1;
        private bool hasItemId;
        private int itemId_;
        public bool HasItemId {
          get { return hasItemId; }
        }
        public int ItemId {
          get { return itemId_; }
        }

        public const int PositionFieldNumber = 3;
        private bool hasPosition;
        private global::Network.Packet.Vector3Data position_;
        public bool HasPosition {
          get { return hasPosition; }
        }
        public global::Network.Packet.Vector3Data Position {
          get { return position_ ?? global::Network.Packet.Vector3Data.DefaultInstance; }
        }

        public const int RotationFieldNumber = 4;
        private bool hasRotation;
        private global::Network.Packet.Vector4Data rotation_;
        public bool HasRotation {
          get { return hasRotation; }
        }
        public global::Network.Packet.Vector4Data Rotation {
          get { return rotation_ ?? global::Network.Packet.Vector4Data.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _itemObjectStateDataFieldNames;
          if (hasItemId) {
            output.WriteInt32(1, field_names[0], ItemId);
          }
          if (hasPosition) {
            output.WriteMessage(3, field_names[1], Position);
          }
          if (hasRotation) {
            output.WriteMessage(4, field_names[2], Rotation);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasItemId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, ItemId);
          }
          if (hasPosition) {
            size += pb::CodedOutputStream.ComputeMessageSize(3, Position);
          }
          if (hasRotation) {
            size += pb::CodedOutputStream.ComputeMessageSize(4, Rotation);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasItemId) {
            hash ^= itemId_.GetHashCode();
          }
          if (hasPosition) hash ^= position_.GetHashCode();
          if (hasRotation) hash ^= rotation_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          ItemObjectStateData other = obj as ItemObjectStateData;
          if (other == null) return false;
          if (hasItemId != other.hasItemId || (hasItemId && !itemId_.Equals(other.itemId_))) return false;
          if (hasPosition != other.hasPosition || (hasPosition && !position_.Equals(other.position_))) return false;
          if (hasRotation != other.hasRotation || (hasRotation && !rotation_.Equals(other.rotation_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("item_id", hasItemId, itemId_, writer);
          PrintField("position", hasPosition, position_, writer);
          PrintField("rotation", hasRotation, rotation_, writer);
        }
        #endregion

        public static ItemObjectStateData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ItemObjectStateData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ItemObjectStateData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ItemObjectStateData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ItemObjectStateData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ItemObjectStateData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ItemObjectStateData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ItemObjectStateData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ItemObjectStateData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ItemObjectStateData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ItemObjectStateData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ItemObjectStateData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<ItemObjectStateData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ItemObjectStateData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private ItemObjectStateData result;

          private ItemObjectStateData PrepareBuilder() {
            if (resultIsReadOnly) {
              ItemObjectStateData original = result;
              result = new ItemObjectStateData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override ItemObjectStateData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override ItemObjectStateData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.ItemObjectStateData.DefaultInstance; }
          }

          public override ItemObjectStateData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is ItemObjectStateData) {
              return MergeFrom((ItemObjectStateData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(ItemObjectStateData other) {
            if (other == global::Network.Packet.Response.Types.ItemObjectStateData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasItemId) {
              ItemId = other.ItemId;
            }
            if (other.HasPosition) {
              MergePosition(other.Position);
            }
            if (other.HasRotation) {
              MergeRotation(other.Rotation);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_itemObjectStateDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _itemObjectStateDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasItemId = input.ReadInt32(ref result.itemId_);
                  break;
                }
                case 26: {
                  global::Network.Packet.Vector3Data.Builder subBuilder = global::Network.Packet.Vector3Data.CreateBuilder();
                  if (result.hasPosition) {
                    subBuilder.MergeFrom(Position);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Position = subBuilder.BuildPartial();
                  break;
                }
                case 34: {
                  global::Network.Packet.Vector4Data.Builder subBuilder = global::Network.Packet.Vector4Data.CreateBuilder();
                  if (result.hasRotation) {
                    subBuilder.MergeFrom(Rotation);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Rotation = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasItemId {
            get { return result.hasItemId; }
          }
          public int ItemId {
            get { return result.ItemId; }
            set { SetItemId(value); }
          }
          public Builder SetItemId(int value) {
            PrepareBuilder();
            result.hasItemId = true;
            result.itemId_ = value;
            return this;
          }
          public Builder ClearItemId() {
            PrepareBuilder();
            result.hasItemId = false;
            result.itemId_ = 0;
            return this;
          }

          public bool HasPosition {
           get { return result.hasPosition; }
          }
          public global::Network.Packet.Vector3Data Position {
            get { return result.Position; }
            set { SetPosition(value); }
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = value;
            return this;
          }
          public Builder SetPosition(global::Network.Packet.Vector3Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasPosition = true;
            result.position_ = builderForValue.Build();
            return this;
          }
          public Builder MergePosition(global::Network.Packet.Vector3Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasPosition &&
                result.position_ != global::Network.Packet.Vector3Data.DefaultInstance) {
                result.position_ = global::Network.Packet.Vector3Data.CreateBuilder(result.position_).MergeFrom(value).BuildPartial();
            } else {
              result.position_ = value;
            }
            result.hasPosition = true;
            return this;
          }
          public Builder ClearPosition() {
            PrepareBuilder();
            result.hasPosition = false;
            result.position_ = null;
            return this;
          }

          public bool HasRotation {
           get { return result.hasRotation; }
          }
          public global::Network.Packet.Vector4Data Rotation {
            get { return result.Rotation; }
            set { SetRotation(value); }
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = value;
            return this;
          }
          public Builder SetRotation(global::Network.Packet.Vector4Data.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasRotation = true;
            result.rotation_ = builderForValue.Build();
            return this;
          }
          public Builder MergeRotation(global::Network.Packet.Vector4Data value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasRotation &&
                result.rotation_ != global::Network.Packet.Vector4Data.DefaultInstance) {
                result.rotation_ = global::Network.Packet.Vector4Data.CreateBuilder(result.rotation_).MergeFrom(value).BuildPartial();
            } else {
              result.rotation_ = value;
            }
            result.hasRotation = true;
            return this;
          }
          public Builder ClearRotation() {
            PrepareBuilder();
            result.hasRotation = false;
            result.rotation_ = null;
            return this;
          }
        }
        static ItemObjectStateData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class ItemObjectActionData : pb::GeneratedMessageLite<ItemObjectActionData, ItemObjectActionData.Builder> {
        private ItemObjectActionData() { }
        private static readonly ItemObjectActionData defaultInstance = new ItemObjectActionData().MakeReadOnly();
        private static readonly string[] _itemObjectActionDataFieldNames = new string[] { "item_id", "item_object_action", "item_object_creation_data" };
        private static readonly uint[] _itemObjectActionDataFieldTags = new uint[] { 8, 16, 82 };
        public static ItemObjectActionData DefaultInstance {
          get { return defaultInstance; }
        }

        public override ItemObjectActionData DefaultInstanceForType {
          get { return DefaultInstance; }
        }

        protected override ItemObjectActionData ThisMessage {
          get { return this; }
        }

        public const int ItemIdFieldNumber = 1;
        private bool hasItemId;
        private int itemId_;
        public bool HasItemId {
          get { return hasItemId; }
        }
        public int ItemId {
          get { return itemId_; }
        }

        public const int ItemObjectActionFieldNumber = 2;
        private bool hasItemObjectAction;
        private global::Network.Packet.ObjectActionType itemObjectAction_ = global::Network.Packet.ObjectActionType.kCreated;
        public bool HasItemObjectAction {
          get { return hasItemObjectAction; }
        }
        public global::Network.Packet.ObjectActionType ItemObjectAction {
          get { return itemObjectAction_; }
        }

        public const int ItemObjectCreationDataFieldNumber = 10;
        private bool hasItemObjectCreationData;
        private global::Network.Packet.Response.Types.ItemObjectCreationData itemObjectCreationData_;
        public bool HasItemObjectCreationData {
          get { return hasItemObjectCreationData; }
        }
        public global::Network.Packet.Response.Types.ItemObjectCreationData ItemObjectCreationData {
          get { return itemObjectCreationData_ ?? global::Network.Packet.Response.Types.ItemObjectCreationData.DefaultInstance; }
        }

        public override bool IsInitialized {
          get {
            return true;
          }
        }

        public override void WriteTo(pb::ICodedOutputStream output) {
          CalcSerializedSize();
          string[] field_names = _itemObjectActionDataFieldNames;
          if (hasItemId) {
            output.WriteInt32(1, field_names[0], ItemId);
          }
          if (hasItemObjectAction) {
            output.WriteEnum(2, field_names[1], (int) ItemObjectAction, ItemObjectAction);
          }
          if (hasItemObjectCreationData) {
            output.WriteMessage(10, field_names[2], ItemObjectCreationData);
          }
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            return CalcSerializedSize();
          }
        }

        private int CalcSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (hasItemId) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, ItemId);
          }
          if (hasItemObjectAction) {
            size += pb::CodedOutputStream.ComputeEnumSize(2, (int) ItemObjectAction);
          }
          if (hasItemObjectCreationData) {
            size += pb::CodedOutputStream.ComputeMessageSize(10, ItemObjectCreationData);
          }
          memoizedSerializedSize = size;
          return size;
        }
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasItemId) {
            hash ^= itemId_.GetHashCode();
          }
          if (hasItemObjectAction) {
            hash ^= itemObjectAction_.GetHashCode();
          }
          if (hasItemObjectCreationData) hash ^= itemObjectCreationData_.GetHashCode();
          return hash;
        }

        public override bool Equals(object obj) {
          ItemObjectActionData other = obj as ItemObjectActionData;
          if (other == null) return false;
          if (hasItemId != other.hasItemId || (hasItemId && !itemId_.Equals(other.itemId_))) return false;
          if (hasItemObjectAction != other.hasItemObjectAction || (hasItemObjectAction && !itemObjectAction_.Equals(other.itemObjectAction_))) return false;
          if (hasItemObjectCreationData != other.hasItemObjectCreationData || (hasItemObjectCreationData && !itemObjectCreationData_.Equals(other.itemObjectCreationData_))) return false;
          return true;
        }

        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("item_id", hasItemId, itemId_, writer);
          PrintField("item_object_action", hasItemObjectAction, itemObjectAction_, writer);
          PrintField("item_object_creation_data", hasItemObjectCreationData, itemObjectCreationData_, writer);
        }
        #endregion

        public static ItemObjectActionData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ItemObjectActionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ItemObjectActionData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ItemObjectActionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ItemObjectActionData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ItemObjectActionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ItemObjectActionData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ItemObjectActionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ItemObjectActionData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ItemObjectActionData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ItemObjectActionData MakeReadOnly() {
          return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ItemObjectActionData prototype) {
          return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<ItemObjectActionData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ItemObjectActionData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }

          private bool resultIsReadOnly;
          private ItemObjectActionData result;

          private ItemObjectActionData PrepareBuilder() {
            if (resultIsReadOnly) {
              ItemObjectActionData original = result;
              result = new ItemObjectActionData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }

          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }

          protected override ItemObjectActionData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }

          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }

          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }

          public override ItemObjectActionData DefaultInstanceForType {
            get { return global::Network.Packet.Response.Types.ItemObjectActionData.DefaultInstance; }
          }

          public override ItemObjectActionData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }

          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is ItemObjectActionData) {
              return MergeFrom((ItemObjectActionData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }

          public override Builder MergeFrom(ItemObjectActionData other) {
            if (other == global::Network.Packet.Response.Types.ItemObjectActionData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasItemId) {
              ItemId = other.ItemId;
            }
            if (other.HasItemObjectAction) {
              ItemObjectAction = other.ItemObjectAction;
            }
            if (other.HasItemObjectCreationData) {
              MergeItemObjectCreationData(other.ItemObjectCreationData);
            }
            return this;
          }

          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }

          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_itemObjectActionDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _itemObjectActionDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasItemId = input.ReadInt32(ref result.itemId_);
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.itemObjectAction_, out unknown)) {
                    result.hasItemObjectAction = true;
                  } else if(unknown is int) {
                  }
                  break;
                }
                case 82: {
                  global::Network.Packet.Response.Types.ItemObjectCreationData.Builder subBuilder = global::Network.Packet.Response.Types.ItemObjectCreationData.CreateBuilder();
                  if (result.hasItemObjectCreationData) {
                    subBuilder.MergeFrom(ItemObjectCreationData);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  ItemObjectCreationData = subBuilder.BuildPartial();
                  break;
                }
              }
            }

            return this;
          }


          public bool HasItemId {
            get { return result.hasItemId; }
          }
          public int ItemId {
            get { return result.ItemId; }
            set { SetItemId(value); }
          }
          public Builder SetItemId(int value) {
            PrepareBuilder();
            result.hasItemId = true;
            result.itemId_ = value;
            return this;
          }
          public Builder ClearItemId() {
            PrepareBuilder();
            result.hasItemId = false;
            result.itemId_ = 0;
            return this;
          }

          public bool HasItemObjectAction {
           get { return result.hasItemObjectAction; }
          }
          public global::Network.Packet.ObjectActionType ItemObjectAction {
            get { return result.ItemObjectAction; }
            set { SetItemObjectAction(value); }
          }
          public Builder SetItemObjectAction(global::Network.Packet.ObjectActionType value) {
            PrepareBuilder();
            result.hasItemObjectAction = true;
            result.itemObjectAction_ = value;
            return this;
          }
          public Builder ClearItemObjectAction() {
            PrepareBuilder();
            result.hasItemObjectAction = false;
            result.itemObjectAction_ = global::Network.Packet.ObjectActionType.kCreated;
            return this;
          }

          public bool HasItemObjectCreationData {
           get { return result.hasItemObjectCreationData; }
          }
          public global::Network.Packet.Response.Types.ItemObjectCreationData ItemObjectCreationData {
            get { return result.ItemObjectCreationData; }
            set { SetItemObjectCreationData(value); }
          }
          public Builder SetItemObjectCreationData(global::Network.Packet.Response.Types.ItemObjectCreationData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasItemObjectCreationData = true;
            result.itemObjectCreationData_ = value;
            return this;
          }
          public Builder SetItemObjectCreationData(global::Network.Packet.Response.Types.ItemObjectCreationData.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasItemObjectCreationData = true;
            result.itemObjectCreationData_ = builderForValue.Build();
            return this;
          }
          public Builder MergeItemObjectCreationData(global::Network.Packet.Response.Types.ItemObjectCreationData value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasItemObjectCreationData &&
                result.itemObjectCreationData_ != global::Network.Packet.Response.Types.ItemObjectCreationData.DefaultInstance) {
                result.itemObjectCreationData_ = global::Network.Packet.Response.Types.ItemObjectCreationData.CreateBuilder(result.itemObjectCreationData_).MergeFrom(value).BuildPartial();
            } else {
              result.itemObjectCreationData_ = value;
            }
            result.hasItemObjectCreationData = true;
            return this;
          }
          public Builder ClearItemObjectCreationData() {
            PrepareBuilder();
            result.hasItemObjectCreationData = false;
            result.itemObjectCreationData_ = null;
            return this;
          }
        }
        static ItemObjectActionData() {
          object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
        }
      }

    }
    #endregion

    public const int HandleFieldNumber = 10;
    private bool hasHandle;
    private global::Network.Packet.ResponseHandle handle_ = global::Network.Packet.ResponseHandle.kResponseError;
    public bool HasHandle {
      get { return hasHandle; }
    }
    public global::Network.Packet.ResponseHandle Handle {
      get { return handle_; }
    }

    public const int PakcetIdFieldNumber = 20;
    private bool hasPakcetId;
    private ulong pakcetId_;
    public bool HasPakcetId {
      get { return hasPakcetId; }
    }
    public ulong PakcetId {
      get { return pakcetId_; }
    }

    public const int SessionResponseCommandDataFieldNumber = 100;
    private bool hasSessionResponseCommandData;
    private global::Network.Packet.Response.Types.SessionResponseCommandData sessionResponseCommandData_;
    public bool HasSessionResponseCommandData {
      get { return hasSessionResponseCommandData; }
    }
    public global::Network.Packet.Response.Types.SessionResponseCommandData SessionResponseCommandData {
      get { return sessionResponseCommandData_ ?? global::Network.Packet.Response.Types.SessionResponseCommandData.DefaultInstance; }
    }

    public const int UserDisconnectedDataFieldNumber = 110;
    private bool hasUserDisconnectedData;
    private global::Network.Packet.Response.Types.UserDisconnectedData userDisconnectedData_;
    public bool HasUserDisconnectedData {
      get { return hasUserDisconnectedData; }
    }
    public global::Network.Packet.Response.Types.UserDisconnectedData UserDisconnectedData {
      get { return userDisconnectedData_ ?? global::Network.Packet.Response.Types.UserDisconnectedData.DefaultInstance; }
    }

    public const int LogMessageFieldNumber = 120;
    private bool hasLogMessage;
    private global::Network.Packet.Response.Types.LogMessage logMessage_;
    public bool HasLogMessage {
      get { return hasLogMessage; }
    }
    public global::Network.Packet.Response.Types.LogMessage LogMessage {
      get { return logMessage_ ?? global::Network.Packet.Response.Types.LogMessage.DefaultInstance; }
    }

    public const int EntitySpawnDataFieldNumber = 200;
    private pbc::PopsicleList<global::Network.Packet.Response.Types.EntitySpawnData> entitySpawnData_ = new pbc::PopsicleList<global::Network.Packet.Response.Types.EntitySpawnData>();
    public scg::IList<global::Network.Packet.Response.Types.EntitySpawnData> EntitySpawnDataList {
      get { return entitySpawnData_; }
    }
    public int EntitySpawnDataCount {
      get { return entitySpawnData_.Count; }
    }
    public global::Network.Packet.Response.Types.EntitySpawnData GetEntitySpawnData(int index) {
      return entitySpawnData_[index];
    }

    public const int EntityStateDataFieldNumber = 220;
    private pbc::PopsicleList<global::Network.Packet.Response.Types.EntityStateData> entityStateData_ = new pbc::PopsicleList<global::Network.Packet.Response.Types.EntityStateData>();
    public scg::IList<global::Network.Packet.Response.Types.EntityStateData> EntityStateDataList {
      get { return entityStateData_; }
    }
    public int EntityStateDataCount {
      get { return entityStateData_.Count; }
    }
    public global::Network.Packet.Response.Types.EntityStateData GetEntityStateData(int index) {
      return entityStateData_[index];
    }

    public const int EntityTransformDataFieldNumber = 230;
    private pbc::PopsicleList<global::Network.Packet.Response.Types.EntityTransformData> entityTransformData_ = new pbc::PopsicleList<global::Network.Packet.Response.Types.EntityTransformData>();
    public scg::IList<global::Network.Packet.Response.Types.EntityTransformData> EntityTransformDataList {
      get { return entityTransformData_; }
    }
    public int EntityTransformDataCount {
      get { return entityTransformData_.Count; }
    }
    public global::Network.Packet.Response.Types.EntityTransformData GetEntityTransformData(int index) {
      return entityTransformData_[index];
    }

    public const int EntityActionDataFieldNumber = 250;
    private pbc::PopsicleList<global::Network.Packet.Response.Types.EntityActionData> entityActionData_ = new pbc::PopsicleList<global::Network.Packet.Response.Types.EntityActionData>();
    public scg::IList<global::Network.Packet.Response.Types.EntityActionData> EntityActionDataList {
      get { return entityActionData_; }
    }
    public int EntityActionDataCount {
      get { return entityActionData_.Count; }
    }
    public global::Network.Packet.Response.Types.EntityActionData GetEntityActionData(int index) {
      return entityActionData_[index];
    }

    public const int DetectorActionDataFieldNumber = 260;
    private pbc::PopsicleList<global::Network.Packet.Response.Types.DetectorActionData> detectorActionData_ = new pbc::PopsicleList<global::Network.Packet.Response.Types.DetectorActionData>();
    public scg::IList<global::Network.Packet.Response.Types.DetectorActionData> DetectorActionDataList {
      get { return detectorActionData_; }
    }
    public int DetectorActionDataCount {
      get { return detectorActionData_.Count; }
    }
    public global::Network.Packet.Response.Types.DetectorActionData GetDetectorActionData(int index) {
      return detectorActionData_[index];
    }

    public const int LocatorStateDataFieldNumber = 300;
    private pbc::PopsicleList<global::Network.Packet.Response.Types.LocatorStateData> locatorStateData_ = new pbc::PopsicleList<global::Network.Packet.Response.Types.LocatorStateData>();
    public scg::IList<global::Network.Packet.Response.Types.LocatorStateData> LocatorStateDataList {
      get { return locatorStateData_; }
    }
    public int LocatorStateDataCount {
      get { return locatorStateData_.Count; }
    }
    public global::Network.Packet.Response.Types.LocatorStateData GetLocatorStateData(int index) {
      return locatorStateData_[index];
    }

    public const int LocatorActionDataFieldNumber = 310;
    private pbc::PopsicleList<global::Network.Packet.Response.Types.LocatorActionData> locatorActionData_ = new pbc::PopsicleList<global::Network.Packet.Response.Types.LocatorActionData>();
    public scg::IList<global::Network.Packet.Response.Types.LocatorActionData> LocatorActionDataList {
      get { return locatorActionData_; }
    }
    public int LocatorActionDataCount {
      get { return locatorActionData_.Count; }
    }
    public global::Network.Packet.Response.Types.LocatorActionData GetLocatorActionData(int index) {
      return locatorActionData_[index];
    }

    public const int ItemObjectStateDataFieldNumber = 400;
    private pbc::PopsicleList<global::Network.Packet.Response.Types.ItemObjectStateData> itemObjectStateData_ = new pbc::PopsicleList<global::Network.Packet.Response.Types.ItemObjectStateData>();
    public scg::IList<global::Network.Packet.Response.Types.ItemObjectStateData> ItemObjectStateDataList {
      get { return itemObjectStateData_; }
    }
    public int ItemObjectStateDataCount {
      get { return itemObjectStateData_.Count; }
    }
    public global::Network.Packet.Response.Types.ItemObjectStateData GetItemObjectStateData(int index) {
      return itemObjectStateData_[index];
    }

    public const int ItemObjectActionDataFieldNumber = 410;
    private pbc::PopsicleList<global::Network.Packet.Response.Types.ItemObjectActionData> itemObjectActionData_ = new pbc::PopsicleList<global::Network.Packet.Response.Types.ItemObjectActionData>();
    public scg::IList<global::Network.Packet.Response.Types.ItemObjectActionData> ItemObjectActionDataList {
      get { return itemObjectActionData_; }
    }
    public int ItemObjectActionDataCount {
      get { return itemObjectActionData_.Count; }
    }
    public global::Network.Packet.Response.Types.ItemObjectActionData GetItemObjectActionData(int index) {
      return itemObjectActionData_[index];
    }

    public const int RemotePlayCinemaNameFieldNumber = 440;
    private bool hasRemotePlayCinemaName;
    private string remotePlayCinemaName_ = "";
    public bool HasRemotePlayCinemaName {
      get { return hasRemotePlayCinemaName; }
    }
    public string RemotePlayCinemaName {
      get { return remotePlayCinemaName_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _responseFieldNames;
      if (hasHandle) {
        output.WriteEnum(10, field_names[5], (int) Handle, Handle);
      }
      if (hasPakcetId) {
        output.WriteUInt64(20, field_names[11], PakcetId);
      }
      if (hasSessionResponseCommandData) {
        output.WriteMessage(100, field_names[13], SessionResponseCommandData);
      }
      if (hasUserDisconnectedData) {
        output.WriteMessage(110, field_names[14], UserDisconnectedData);
      }
      if (hasLogMessage) {
        output.WriteMessage(120, field_names[10], LogMessage);
      }
      if (entitySpawnData_.Count > 0) {
        output.WriteMessageArray(200, field_names[2], entitySpawnData_);
      }
      if (entityStateData_.Count > 0) {
        output.WriteMessageArray(220, field_names[3], entityStateData_);
      }
      if (entityTransformData_.Count > 0) {
        output.WriteMessageArray(230, field_names[4], entityTransformData_);
      }
      if (entityActionData_.Count > 0) {
        output.WriteMessageArray(250, field_names[1], entityActionData_);
      }
      if (detectorActionData_.Count > 0) {
        output.WriteMessageArray(260, field_names[0], detectorActionData_);
      }
      if (locatorStateData_.Count > 0) {
        output.WriteMessageArray(300, field_names[9], locatorStateData_);
      }
      if (locatorActionData_.Count > 0) {
        output.WriteMessageArray(310, field_names[8], locatorActionData_);
      }
      if (itemObjectStateData_.Count > 0) {
        output.WriteMessageArray(400, field_names[7], itemObjectStateData_);
      }
      if (itemObjectActionData_.Count > 0) {
        output.WriteMessageArray(410, field_names[6], itemObjectActionData_);
      }
      if (hasRemotePlayCinemaName) {
        output.WriteString(440, field_names[12], RemotePlayCinemaName);
      }
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasHandle) {
        size += pb::CodedOutputStream.ComputeEnumSize(10, (int) Handle);
      }
      if (hasPakcetId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(20, PakcetId);
      }
      if (hasSessionResponseCommandData) {
        size += pb::CodedOutputStream.ComputeMessageSize(100, SessionResponseCommandData);
      }
      if (hasUserDisconnectedData) {
        size += pb::CodedOutputStream.ComputeMessageSize(110, UserDisconnectedData);
      }
      if (hasLogMessage) {
        size += pb::CodedOutputStream.ComputeMessageSize(120, LogMessage);
      }
      foreach (global::Network.Packet.Response.Types.EntitySpawnData element in EntitySpawnDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(200, element);
      }
      foreach (global::Network.Packet.Response.Types.EntityStateData element in EntityStateDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(220, element);
      }
      foreach (global::Network.Packet.Response.Types.EntityTransformData element in EntityTransformDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(230, element);
      }
      foreach (global::Network.Packet.Response.Types.EntityActionData element in EntityActionDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(250, element);
      }
      foreach (global::Network.Packet.Response.Types.DetectorActionData element in DetectorActionDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(260, element);
      }
      foreach (global::Network.Packet.Response.Types.LocatorStateData element in LocatorStateDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(300, element);
      }
      foreach (global::Network.Packet.Response.Types.LocatorActionData element in LocatorActionDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(310, element);
      }
      foreach (global::Network.Packet.Response.Types.ItemObjectStateData element in ItemObjectStateDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(400, element);
      }
      foreach (global::Network.Packet.Response.Types.ItemObjectActionData element in ItemObjectActionDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(410, element);
      }
      if (hasRemotePlayCinemaName) {
        size += pb::CodedOutputStream.ComputeStringSize(440, RemotePlayCinemaName);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasHandle) {
        hash ^= handle_.GetHashCode();
      }
      if (hasPakcetId) {
        hash ^= pakcetId_.GetHashCode();
      }
      if (hasSessionResponseCommandData) hash ^= sessionResponseCommandData_.GetHashCode();
      if (hasUserDisconnectedData) hash ^= userDisconnectedData_.GetHashCode();
      if (hasLogMessage) hash ^= logMessage_.GetHashCode();
      foreach(global::Network.Packet.Response.Types.EntitySpawnData i in entitySpawnData_)
        hash ^= i.GetHashCode();
      foreach(global::Network.Packet.Response.Types.EntityStateData i in entityStateData_)
        hash ^= i.GetHashCode();
      foreach(global::Network.Packet.Response.Types.EntityTransformData i in entityTransformData_)
        hash ^= i.GetHashCode();
      foreach(global::Network.Packet.Response.Types.EntityActionData i in entityActionData_)
        hash ^= i.GetHashCode();
      foreach(global::Network.Packet.Response.Types.DetectorActionData i in detectorActionData_)
        hash ^= i.GetHashCode();
      foreach(global::Network.Packet.Response.Types.LocatorStateData i in locatorStateData_)
        hash ^= i.GetHashCode();
      foreach(global::Network.Packet.Response.Types.LocatorActionData i in locatorActionData_)
        hash ^= i.GetHashCode();
      foreach(global::Network.Packet.Response.Types.ItemObjectStateData i in itemObjectStateData_)
        hash ^= i.GetHashCode();
      foreach(global::Network.Packet.Response.Types.ItemObjectActionData i in itemObjectActionData_)
        hash ^= i.GetHashCode();
      if (hasRemotePlayCinemaName) {
        hash ^= remotePlayCinemaName_.GetHashCode();
      }
      return hash;
    }

    public override bool Equals(object obj) {
      Response other = obj as Response;
      if (other == null) return false;
      if (hasHandle != other.hasHandle || (hasHandle && !handle_.Equals(other.handle_))) return false;
      if (hasPakcetId != other.hasPakcetId || (hasPakcetId && !pakcetId_.Equals(other.pakcetId_))) return false;
      if (hasSessionResponseCommandData != other.hasSessionResponseCommandData || (hasSessionResponseCommandData && !sessionResponseCommandData_.Equals(other.sessionResponseCommandData_))) return false;
      if (hasUserDisconnectedData != other.hasUserDisconnectedData || (hasUserDisconnectedData && !userDisconnectedData_.Equals(other.userDisconnectedData_))) return false;
      if (hasLogMessage != other.hasLogMessage || (hasLogMessage && !logMessage_.Equals(other.logMessage_))) return false;
      if(entitySpawnData_.Count != other.entitySpawnData_.Count) return false;
      for(int ix=0; ix < entitySpawnData_.Count; ix++)
        if(!entitySpawnData_[ix].Equals(other.entitySpawnData_[ix])) return false;
      if(entityStateData_.Count != other.entityStateData_.Count) return false;
      for(int ix=0; ix < entityStateData_.Count; ix++)
        if(!entityStateData_[ix].Equals(other.entityStateData_[ix])) return false;
      if(entityTransformData_.Count != other.entityTransformData_.Count) return false;
      for(int ix=0; ix < entityTransformData_.Count; ix++)
        if(!entityTransformData_[ix].Equals(other.entityTransformData_[ix])) return false;
      if(entityActionData_.Count != other.entityActionData_.Count) return false;
      for(int ix=0; ix < entityActionData_.Count; ix++)
        if(!entityActionData_[ix].Equals(other.entityActionData_[ix])) return false;
      if(detectorActionData_.Count != other.detectorActionData_.Count) return false;
      for(int ix=0; ix < detectorActionData_.Count; ix++)
        if(!detectorActionData_[ix].Equals(other.detectorActionData_[ix])) return false;
      if(locatorStateData_.Count != other.locatorStateData_.Count) return false;
      for(int ix=0; ix < locatorStateData_.Count; ix++)
        if(!locatorStateData_[ix].Equals(other.locatorStateData_[ix])) return false;
      if(locatorActionData_.Count != other.locatorActionData_.Count) return false;
      for(int ix=0; ix < locatorActionData_.Count; ix++)
        if(!locatorActionData_[ix].Equals(other.locatorActionData_[ix])) return false;
      if(itemObjectStateData_.Count != other.itemObjectStateData_.Count) return false;
      for(int ix=0; ix < itemObjectStateData_.Count; ix++)
        if(!itemObjectStateData_[ix].Equals(other.itemObjectStateData_[ix])) return false;
      if(itemObjectActionData_.Count != other.itemObjectActionData_.Count) return false;
      for(int ix=0; ix < itemObjectActionData_.Count; ix++)
        if(!itemObjectActionData_[ix].Equals(other.itemObjectActionData_[ix])) return false;
      if (hasRemotePlayCinemaName != other.hasRemotePlayCinemaName || (hasRemotePlayCinemaName && !remotePlayCinemaName_.Equals(other.remotePlayCinemaName_))) return false;
      return true;
    }

    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("handle", hasHandle, handle_, writer);
      PrintField("pakcet_id", hasPakcetId, pakcetId_, writer);
      PrintField("session_Response_command_data", hasSessionResponseCommandData, sessionResponseCommandData_, writer);
      PrintField("user_disconnected_data", hasUserDisconnectedData, userDisconnectedData_, writer);
      PrintField("log_message", hasLogMessage, logMessage_, writer);
      PrintField("entity_spawn_data", entitySpawnData_, writer);
      PrintField("entity_state_data", entityStateData_, writer);
      PrintField("entity_transform_data", entityTransformData_, writer);
      PrintField("entity_action_data", entityActionData_, writer);
      PrintField("detector_action_data", detectorActionData_, writer);
      PrintField("locator_state_data", locatorStateData_, writer);
      PrintField("locator_action_data", locatorActionData_, writer);
      PrintField("item_object_state_data", itemObjectStateData_, writer);
      PrintField("item_object_action_data", itemObjectActionData_, writer);
      PrintField("remote_play_cinema_name", hasRemotePlayCinemaName, remotePlayCinemaName_, writer);
    }
    #endregion

    public static Response ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Response ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Response ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Response ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Response MakeReadOnly() {
      entitySpawnData_.MakeReadOnly();
      entityStateData_.MakeReadOnly();
      entityTransformData_.MakeReadOnly();
      entityActionData_.MakeReadOnly();
      detectorActionData_.MakeReadOnly();
      locatorStateData_.MakeReadOnly();
      locatorActionData_.MakeReadOnly();
      itemObjectStateData_.MakeReadOnly();
      itemObjectActionData_.MakeReadOnly();
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Response prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Response, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Response cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Response result;

      private Response PrepareBuilder() {
        if (resultIsReadOnly) {
          Response original = result;
          result = new Response();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Response MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override Response DefaultInstanceForType {
        get { return global::Network.Packet.Response.DefaultInstance; }
      }

      public override Response BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Response) {
          return MergeFrom((Response) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Response other) {
        if (other == global::Network.Packet.Response.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHandle) {
          Handle = other.Handle;
        }
        if (other.HasPakcetId) {
          PakcetId = other.PakcetId;
        }
        if (other.HasSessionResponseCommandData) {
          MergeSessionResponseCommandData(other.SessionResponseCommandData);
        }
        if (other.HasUserDisconnectedData) {
          MergeUserDisconnectedData(other.UserDisconnectedData);
        }
        if (other.HasLogMessage) {
          MergeLogMessage(other.LogMessage);
        }
        if (other.entitySpawnData_.Count != 0) {
          result.entitySpawnData_.Add(other.entitySpawnData_);
        }
        if (other.entityStateData_.Count != 0) {
          result.entityStateData_.Add(other.entityStateData_);
        }
        if (other.entityTransformData_.Count != 0) {
          result.entityTransformData_.Add(other.entityTransformData_);
        }
        if (other.entityActionData_.Count != 0) {
          result.entityActionData_.Add(other.entityActionData_);
        }
        if (other.detectorActionData_.Count != 0) {
          result.detectorActionData_.Add(other.detectorActionData_);
        }
        if (other.locatorStateData_.Count != 0) {
          result.locatorStateData_.Add(other.locatorStateData_);
        }
        if (other.locatorActionData_.Count != 0) {
          result.locatorActionData_.Add(other.locatorActionData_);
        }
        if (other.itemObjectStateData_.Count != 0) {
          result.itemObjectStateData_.Add(other.itemObjectStateData_);
        }
        if (other.itemObjectActionData_.Count != 0) {
          result.itemObjectActionData_.Add(other.itemObjectActionData_);
        }
        if (other.HasRemotePlayCinemaName) {
          RemotePlayCinemaName = other.RemotePlayCinemaName;
        }
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_responseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _responseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 80: {
              object unknown;
              if(input.ReadEnum(ref result.handle_, out unknown)) {
                result.hasHandle = true;
              } else if(unknown is int) {
              }
              break;
            }
            case 160: {
              result.hasPakcetId = input.ReadUInt64(ref result.pakcetId_);
              break;
            }
            case 802: {
              global::Network.Packet.Response.Types.SessionResponseCommandData.Builder subBuilder = global::Network.Packet.Response.Types.SessionResponseCommandData.CreateBuilder();
              if (result.hasSessionResponseCommandData) {
                subBuilder.MergeFrom(SessionResponseCommandData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SessionResponseCommandData = subBuilder.BuildPartial();
              break;
            }
            case 882: {
              global::Network.Packet.Response.Types.UserDisconnectedData.Builder subBuilder = global::Network.Packet.Response.Types.UserDisconnectedData.CreateBuilder();
              if (result.hasUserDisconnectedData) {
                subBuilder.MergeFrom(UserDisconnectedData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserDisconnectedData = subBuilder.BuildPartial();
              break;
            }
            case 962: {
              global::Network.Packet.Response.Types.LogMessage.Builder subBuilder = global::Network.Packet.Response.Types.LogMessage.CreateBuilder();
              if (result.hasLogMessage) {
                subBuilder.MergeFrom(LogMessage);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LogMessage = subBuilder.BuildPartial();
              break;
            }
            case 1602: {
              input.ReadMessageArray(tag, field_name, result.entitySpawnData_, global::Network.Packet.Response.Types.EntitySpawnData.DefaultInstance, extensionRegistry);
              break;
            }
            case 1762: {
              input.ReadMessageArray(tag, field_name, result.entityStateData_, global::Network.Packet.Response.Types.EntityStateData.DefaultInstance, extensionRegistry);
              break;
            }
            case 1842: {
              input.ReadMessageArray(tag, field_name, result.entityTransformData_, global::Network.Packet.Response.Types.EntityTransformData.DefaultInstance, extensionRegistry);
              break;
            }
            case 2002: {
              input.ReadMessageArray(tag, field_name, result.entityActionData_, global::Network.Packet.Response.Types.EntityActionData.DefaultInstance, extensionRegistry);
              break;
            }
            case 2082: {
              input.ReadMessageArray(tag, field_name, result.detectorActionData_, global::Network.Packet.Response.Types.DetectorActionData.DefaultInstance, extensionRegistry);
              break;
            }
            case 2402: {
              input.ReadMessageArray(tag, field_name, result.locatorStateData_, global::Network.Packet.Response.Types.LocatorStateData.DefaultInstance, extensionRegistry);
              break;
            }
            case 2482: {
              input.ReadMessageArray(tag, field_name, result.locatorActionData_, global::Network.Packet.Response.Types.LocatorActionData.DefaultInstance, extensionRegistry);
              break;
            }
            case 3202: {
              input.ReadMessageArray(tag, field_name, result.itemObjectStateData_, global::Network.Packet.Response.Types.ItemObjectStateData.DefaultInstance, extensionRegistry);
              break;
            }
            case 3282: {
              input.ReadMessageArray(tag, field_name, result.itemObjectActionData_, global::Network.Packet.Response.Types.ItemObjectActionData.DefaultInstance, extensionRegistry);
              break;
            }
            case 3522: {
              result.hasRemotePlayCinemaName = input.ReadString(ref result.remotePlayCinemaName_);
              break;
            }
          }
        }

        return this;
      }


      public bool HasHandle {
       get { return result.hasHandle; }
      }
      public global::Network.Packet.ResponseHandle Handle {
        get { return result.Handle; }
        set { SetHandle(value); }
      }
      public Builder SetHandle(global::Network.Packet.ResponseHandle value) {
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = value;
        return this;
      }
      public Builder ClearHandle() {
        PrepareBuilder();
        result.hasHandle = false;
        result.handle_ = global::Network.Packet.ResponseHandle.kResponseError;
        return this;
      }

      public bool HasPakcetId {
        get { return result.hasPakcetId; }
      }
      public ulong PakcetId {
        get { return result.PakcetId; }
        set { SetPakcetId(value); }
      }
      public Builder SetPakcetId(ulong value) {
        PrepareBuilder();
        result.hasPakcetId = true;
        result.pakcetId_ = value;
        return this;
      }
      public Builder ClearPakcetId() {
        PrepareBuilder();
        result.hasPakcetId = false;
        result.pakcetId_ = 0UL;
        return this;
      }

      public bool HasSessionResponseCommandData {
       get { return result.hasSessionResponseCommandData; }
      }
      public global::Network.Packet.Response.Types.SessionResponseCommandData SessionResponseCommandData {
        get { return result.SessionResponseCommandData; }
        set { SetSessionResponseCommandData(value); }
      }
      public Builder SetSessionResponseCommandData(global::Network.Packet.Response.Types.SessionResponseCommandData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionResponseCommandData = true;
        result.sessionResponseCommandData_ = value;
        return this;
      }
      public Builder SetSessionResponseCommandData(global::Network.Packet.Response.Types.SessionResponseCommandData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSessionResponseCommandData = true;
        result.sessionResponseCommandData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSessionResponseCommandData(global::Network.Packet.Response.Types.SessionResponseCommandData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSessionResponseCommandData &&
            result.sessionResponseCommandData_ != global::Network.Packet.Response.Types.SessionResponseCommandData.DefaultInstance) {
            result.sessionResponseCommandData_ = global::Network.Packet.Response.Types.SessionResponseCommandData.CreateBuilder(result.sessionResponseCommandData_).MergeFrom(value).BuildPartial();
        } else {
          result.sessionResponseCommandData_ = value;
        }
        result.hasSessionResponseCommandData = true;
        return this;
      }
      public Builder ClearSessionResponseCommandData() {
        PrepareBuilder();
        result.hasSessionResponseCommandData = false;
        result.sessionResponseCommandData_ = null;
        return this;
      }

      public bool HasUserDisconnectedData {
       get { return result.hasUserDisconnectedData; }
      }
      public global::Network.Packet.Response.Types.UserDisconnectedData UserDisconnectedData {
        get { return result.UserDisconnectedData; }
        set { SetUserDisconnectedData(value); }
      }
      public Builder SetUserDisconnectedData(global::Network.Packet.Response.Types.UserDisconnectedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserDisconnectedData = true;
        result.userDisconnectedData_ = value;
        return this;
      }
      public Builder SetUserDisconnectedData(global::Network.Packet.Response.Types.UserDisconnectedData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserDisconnectedData = true;
        result.userDisconnectedData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserDisconnectedData(global::Network.Packet.Response.Types.UserDisconnectedData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserDisconnectedData &&
            result.userDisconnectedData_ != global::Network.Packet.Response.Types.UserDisconnectedData.DefaultInstance) {
            result.userDisconnectedData_ = global::Network.Packet.Response.Types.UserDisconnectedData.CreateBuilder(result.userDisconnectedData_).MergeFrom(value).BuildPartial();
        } else {
          result.userDisconnectedData_ = value;
        }
        result.hasUserDisconnectedData = true;
        return this;
      }
      public Builder ClearUserDisconnectedData() {
        PrepareBuilder();
        result.hasUserDisconnectedData = false;
        result.userDisconnectedData_ = null;
        return this;
      }

      public bool HasLogMessage {
       get { return result.hasLogMessage; }
      }
      public global::Network.Packet.Response.Types.LogMessage LogMessage {
        get { return result.LogMessage; }
        set { SetLogMessage(value); }
      }
      public Builder SetLogMessage(global::Network.Packet.Response.Types.LogMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLogMessage = true;
        result.logMessage_ = value;
        return this;
      }
      public Builder SetLogMessage(global::Network.Packet.Response.Types.LogMessage.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLogMessage = true;
        result.logMessage_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLogMessage(global::Network.Packet.Response.Types.LogMessage value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLogMessage &&
            result.logMessage_ != global::Network.Packet.Response.Types.LogMessage.DefaultInstance) {
            result.logMessage_ = global::Network.Packet.Response.Types.LogMessage.CreateBuilder(result.logMessage_).MergeFrom(value).BuildPartial();
        } else {
          result.logMessage_ = value;
        }
        result.hasLogMessage = true;
        return this;
      }
      public Builder ClearLogMessage() {
        PrepareBuilder();
        result.hasLogMessage = false;
        result.logMessage_ = null;
        return this;
      }

      public pbc::IPopsicleList<global::Network.Packet.Response.Types.EntitySpawnData> EntitySpawnDataList {
        get { return PrepareBuilder().entitySpawnData_; }
      }
      public int EntitySpawnDataCount {
        get { return result.EntitySpawnDataCount; }
      }
      public global::Network.Packet.Response.Types.EntitySpawnData GetEntitySpawnData(int index) {
        return result.GetEntitySpawnData(index);
      }
      public Builder SetEntitySpawnData(int index, global::Network.Packet.Response.Types.EntitySpawnData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entitySpawnData_[index] = value;
        return this;
      }
      public Builder SetEntitySpawnData(int index, global::Network.Packet.Response.Types.EntitySpawnData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entitySpawnData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntitySpawnData(global::Network.Packet.Response.Types.EntitySpawnData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entitySpawnData_.Add(value);
        return this;
      }
      public Builder AddEntitySpawnData(global::Network.Packet.Response.Types.EntitySpawnData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entitySpawnData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntitySpawnData(scg::IEnumerable<global::Network.Packet.Response.Types.EntitySpawnData> values) {
        PrepareBuilder();
        result.entitySpawnData_.Add(values);
        return this;
      }
      public Builder ClearEntitySpawnData() {
        PrepareBuilder();
        result.entitySpawnData_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Network.Packet.Response.Types.EntityStateData> EntityStateDataList {
        get { return PrepareBuilder().entityStateData_; }
      }
      public int EntityStateDataCount {
        get { return result.EntityStateDataCount; }
      }
      public global::Network.Packet.Response.Types.EntityStateData GetEntityStateData(int index) {
        return result.GetEntityStateData(index);
      }
      public Builder SetEntityStateData(int index, global::Network.Packet.Response.Types.EntityStateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entityStateData_[index] = value;
        return this;
      }
      public Builder SetEntityStateData(int index, global::Network.Packet.Response.Types.EntityStateData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entityStateData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntityStateData(global::Network.Packet.Response.Types.EntityStateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entityStateData_.Add(value);
        return this;
      }
      public Builder AddEntityStateData(global::Network.Packet.Response.Types.EntityStateData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entityStateData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntityStateData(scg::IEnumerable<global::Network.Packet.Response.Types.EntityStateData> values) {
        PrepareBuilder();
        result.entityStateData_.Add(values);
        return this;
      }
      public Builder ClearEntityStateData() {
        PrepareBuilder();
        result.entityStateData_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Network.Packet.Response.Types.EntityTransformData> EntityTransformDataList {
        get { return PrepareBuilder().entityTransformData_; }
      }
      public int EntityTransformDataCount {
        get { return result.EntityTransformDataCount; }
      }
      public global::Network.Packet.Response.Types.EntityTransformData GetEntityTransformData(int index) {
        return result.GetEntityTransformData(index);
      }
      public Builder SetEntityTransformData(int index, global::Network.Packet.Response.Types.EntityTransformData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entityTransformData_[index] = value;
        return this;
      }
      public Builder SetEntityTransformData(int index, global::Network.Packet.Response.Types.EntityTransformData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entityTransformData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntityTransformData(global::Network.Packet.Response.Types.EntityTransformData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entityTransformData_.Add(value);
        return this;
      }
      public Builder AddEntityTransformData(global::Network.Packet.Response.Types.EntityTransformData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entityTransformData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntityTransformData(scg::IEnumerable<global::Network.Packet.Response.Types.EntityTransformData> values) {
        PrepareBuilder();
        result.entityTransformData_.Add(values);
        return this;
      }
      public Builder ClearEntityTransformData() {
        PrepareBuilder();
        result.entityTransformData_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Network.Packet.Response.Types.EntityActionData> EntityActionDataList {
        get { return PrepareBuilder().entityActionData_; }
      }
      public int EntityActionDataCount {
        get { return result.EntityActionDataCount; }
      }
      public global::Network.Packet.Response.Types.EntityActionData GetEntityActionData(int index) {
        return result.GetEntityActionData(index);
      }
      public Builder SetEntityActionData(int index, global::Network.Packet.Response.Types.EntityActionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entityActionData_[index] = value;
        return this;
      }
      public Builder SetEntityActionData(int index, global::Network.Packet.Response.Types.EntityActionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entityActionData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEntityActionData(global::Network.Packet.Response.Types.EntityActionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.entityActionData_.Add(value);
        return this;
      }
      public Builder AddEntityActionData(global::Network.Packet.Response.Types.EntityActionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.entityActionData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEntityActionData(scg::IEnumerable<global::Network.Packet.Response.Types.EntityActionData> values) {
        PrepareBuilder();
        result.entityActionData_.Add(values);
        return this;
      }
      public Builder ClearEntityActionData() {
        PrepareBuilder();
        result.entityActionData_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Network.Packet.Response.Types.DetectorActionData> DetectorActionDataList {
        get { return PrepareBuilder().detectorActionData_; }
      }
      public int DetectorActionDataCount {
        get { return result.DetectorActionDataCount; }
      }
      public global::Network.Packet.Response.Types.DetectorActionData GetDetectorActionData(int index) {
        return result.GetDetectorActionData(index);
      }
      public Builder SetDetectorActionData(int index, global::Network.Packet.Response.Types.DetectorActionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.detectorActionData_[index] = value;
        return this;
      }
      public Builder SetDetectorActionData(int index, global::Network.Packet.Response.Types.DetectorActionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.detectorActionData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDetectorActionData(global::Network.Packet.Response.Types.DetectorActionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.detectorActionData_.Add(value);
        return this;
      }
      public Builder AddDetectorActionData(global::Network.Packet.Response.Types.DetectorActionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.detectorActionData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDetectorActionData(scg::IEnumerable<global::Network.Packet.Response.Types.DetectorActionData> values) {
        PrepareBuilder();
        result.detectorActionData_.Add(values);
        return this;
      }
      public Builder ClearDetectorActionData() {
        PrepareBuilder();
        result.detectorActionData_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Network.Packet.Response.Types.LocatorStateData> LocatorStateDataList {
        get { return PrepareBuilder().locatorStateData_; }
      }
      public int LocatorStateDataCount {
        get { return result.LocatorStateDataCount; }
      }
      public global::Network.Packet.Response.Types.LocatorStateData GetLocatorStateData(int index) {
        return result.GetLocatorStateData(index);
      }
      public Builder SetLocatorStateData(int index, global::Network.Packet.Response.Types.LocatorStateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.locatorStateData_[index] = value;
        return this;
      }
      public Builder SetLocatorStateData(int index, global::Network.Packet.Response.Types.LocatorStateData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.locatorStateData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLocatorStateData(global::Network.Packet.Response.Types.LocatorStateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.locatorStateData_.Add(value);
        return this;
      }
      public Builder AddLocatorStateData(global::Network.Packet.Response.Types.LocatorStateData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.locatorStateData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLocatorStateData(scg::IEnumerable<global::Network.Packet.Response.Types.LocatorStateData> values) {
        PrepareBuilder();
        result.locatorStateData_.Add(values);
        return this;
      }
      public Builder ClearLocatorStateData() {
        PrepareBuilder();
        result.locatorStateData_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Network.Packet.Response.Types.LocatorActionData> LocatorActionDataList {
        get { return PrepareBuilder().locatorActionData_; }
      }
      public int LocatorActionDataCount {
        get { return result.LocatorActionDataCount; }
      }
      public global::Network.Packet.Response.Types.LocatorActionData GetLocatorActionData(int index) {
        return result.GetLocatorActionData(index);
      }
      public Builder SetLocatorActionData(int index, global::Network.Packet.Response.Types.LocatorActionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.locatorActionData_[index] = value;
        return this;
      }
      public Builder SetLocatorActionData(int index, global::Network.Packet.Response.Types.LocatorActionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.locatorActionData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLocatorActionData(global::Network.Packet.Response.Types.LocatorActionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.locatorActionData_.Add(value);
        return this;
      }
      public Builder AddLocatorActionData(global::Network.Packet.Response.Types.LocatorActionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.locatorActionData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLocatorActionData(scg::IEnumerable<global::Network.Packet.Response.Types.LocatorActionData> values) {
        PrepareBuilder();
        result.locatorActionData_.Add(values);
        return this;
      }
      public Builder ClearLocatorActionData() {
        PrepareBuilder();
        result.locatorActionData_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Network.Packet.Response.Types.ItemObjectStateData> ItemObjectStateDataList {
        get { return PrepareBuilder().itemObjectStateData_; }
      }
      public int ItemObjectStateDataCount {
        get { return result.ItemObjectStateDataCount; }
      }
      public global::Network.Packet.Response.Types.ItemObjectStateData GetItemObjectStateData(int index) {
        return result.GetItemObjectStateData(index);
      }
      public Builder SetItemObjectStateData(int index, global::Network.Packet.Response.Types.ItemObjectStateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.itemObjectStateData_[index] = value;
        return this;
      }
      public Builder SetItemObjectStateData(int index, global::Network.Packet.Response.Types.ItemObjectStateData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.itemObjectStateData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItemObjectStateData(global::Network.Packet.Response.Types.ItemObjectStateData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.itemObjectStateData_.Add(value);
        return this;
      }
      public Builder AddItemObjectStateData(global::Network.Packet.Response.Types.ItemObjectStateData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.itemObjectStateData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItemObjectStateData(scg::IEnumerable<global::Network.Packet.Response.Types.ItemObjectStateData> values) {
        PrepareBuilder();
        result.itemObjectStateData_.Add(values);
        return this;
      }
      public Builder ClearItemObjectStateData() {
        PrepareBuilder();
        result.itemObjectStateData_.Clear();
        return this;
      }

      public pbc::IPopsicleList<global::Network.Packet.Response.Types.ItemObjectActionData> ItemObjectActionDataList {
        get { return PrepareBuilder().itemObjectActionData_; }
      }
      public int ItemObjectActionDataCount {
        get { return result.ItemObjectActionDataCount; }
      }
      public global::Network.Packet.Response.Types.ItemObjectActionData GetItemObjectActionData(int index) {
        return result.GetItemObjectActionData(index);
      }
      public Builder SetItemObjectActionData(int index, global::Network.Packet.Response.Types.ItemObjectActionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.itemObjectActionData_[index] = value;
        return this;
      }
      public Builder SetItemObjectActionData(int index, global::Network.Packet.Response.Types.ItemObjectActionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.itemObjectActionData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItemObjectActionData(global::Network.Packet.Response.Types.ItemObjectActionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.itemObjectActionData_.Add(value);
        return this;
      }
      public Builder AddItemObjectActionData(global::Network.Packet.Response.Types.ItemObjectActionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.itemObjectActionData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItemObjectActionData(scg::IEnumerable<global::Network.Packet.Response.Types.ItemObjectActionData> values) {
        PrepareBuilder();
        result.itemObjectActionData_.Add(values);
        return this;
      }
      public Builder ClearItemObjectActionData() {
        PrepareBuilder();
        result.itemObjectActionData_.Clear();
        return this;
      }

      public bool HasRemotePlayCinemaName {
        get { return result.hasRemotePlayCinemaName; }
      }
      public string RemotePlayCinemaName {
        get { return result.RemotePlayCinemaName; }
        set { SetRemotePlayCinemaName(value); }
      }
      public Builder SetRemotePlayCinemaName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRemotePlayCinemaName = true;
        result.remotePlayCinemaName_ = value;
        return this;
      }
      public Builder ClearRemotePlayCinemaName() {
        PrepareBuilder();
        result.hasRemotePlayCinemaName = false;
        result.remotePlayCinemaName_ = "";
        return this;
      }
    }
    static Response() {
      object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ObjectAction : pb::GeneratedMessageLite<ObjectAction, ObjectAction.Builder> {
    private ObjectAction() { }
    private static readonly ObjectAction defaultInstance = new ObjectAction().MakeReadOnly();
    private static readonly string[] _objectActionFieldNames = new string[] { "object_id", "test_message", "type" };
    private static readonly uint[] _objectActionFieldTags = new uint[] { 8, 802, 16 };
    public static ObjectAction DefaultInstance {
      get { return defaultInstance; }
    }

    public override ObjectAction DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override ObjectAction ThisMessage {
      get { return this; }
    }

    public const int ObjectIdFieldNumber = 1;
    private bool hasObjectId;
    private int objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    public int ObjectId {
      get { return objectId_; }
    }

    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::Network.Packet.ObjectActionType type_ = global::Network.Packet.ObjectActionType.kCreated;
    public bool HasType {
      get { return hasType; }
    }
    public global::Network.Packet.ObjectActionType Type {
      get { return type_; }
    }

    public const int TestMessageFieldNumber = 100;
    private bool hasTestMessage;
    private string testMessage_ = "";
    public bool HasTestMessage {
      get { return hasTestMessage; }
    }
    public string TestMessage {
      get { return testMessage_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _objectActionFieldNames;
      if (hasObjectId) {
        output.WriteInt32(1, field_names[0], ObjectId);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[2], (int) Type, Type);
      }
      if (hasTestMessage) {
        output.WriteString(100, field_names[1], TestMessage);
      }
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasObjectId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, ObjectId);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
      }
      if (hasTestMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(100, TestMessage);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasObjectId) {
        hash ^= objectId_.GetHashCode();
      }
      if (hasType) {
        hash ^= type_.GetHashCode();
      }
      if (hasTestMessage) {
        hash ^= testMessage_.GetHashCode();
      }
      return hash;
    }

    public override bool Equals(object obj) {
      ObjectAction other = obj as ObjectAction;
      if (other == null) return false;
      if (hasObjectId != other.hasObjectId || (hasObjectId && !objectId_.Equals(other.objectId_))) return false;
      if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
      if (hasTestMessage != other.hasTestMessage || (hasTestMessage && !testMessage_.Equals(other.testMessage_))) return false;
      return true;
    }

    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("object_id", hasObjectId, objectId_, writer);
      PrintField("type", hasType, type_, writer);
      PrintField("test_message", hasTestMessage, testMessage_, writer);
    }
    #endregion

    public static ObjectAction ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ObjectAction ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ObjectAction ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ObjectAction ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ObjectAction ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ObjectAction ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ObjectAction ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ObjectAction ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ObjectAction ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ObjectAction ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ObjectAction MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ObjectAction prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<ObjectAction, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ObjectAction cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private ObjectAction result;

      private ObjectAction PrepareBuilder() {
        if (resultIsReadOnly) {
          ObjectAction original = result;
          result = new ObjectAction();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override ObjectAction MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override ObjectAction DefaultInstanceForType {
        get { return global::Network.Packet.ObjectAction.DefaultInstance; }
      }

      public override ObjectAction BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ObjectAction) {
          return MergeFrom((ObjectAction) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(ObjectAction other) {
        if (other == global::Network.Packet.ObjectAction.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasTestMessage) {
          TestMessage = other.TestMessage;
        }
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_objectActionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _objectActionFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasObjectId = input.ReadInt32(ref result.objectId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
              }
              break;
            }
            case 802: {
              result.hasTestMessage = input.ReadString(ref result.testMessage_);
              break;
            }
          }
        }

        return this;
      }


      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      public int ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      public Builder SetObjectId(int value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0;
        return this;
      }

      public bool HasType {
       get { return result.hasType; }
      }
      public global::Network.Packet.ObjectActionType Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::Network.Packet.ObjectActionType value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::Network.Packet.ObjectActionType.kCreated;
        return this;
      }

      public bool HasTestMessage {
        get { return result.hasTestMessage; }
      }
      public string TestMessage {
        get { return result.TestMessage; }
        set { SetTestMessage(value); }
      }
      public Builder SetTestMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTestMessage = true;
        result.testMessage_ = value;
        return this;
      }
      public Builder ClearTestMessage() {
        PrepareBuilder();
        result.hasTestMessage = false;
        result.testMessage_ = "";
        return this;
      }
    }
    static ObjectAction() {
      object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserTokenData : pb::GeneratedMessageLite<UserTokenData, UserTokenData.Builder> {
    private UserTokenData() { }
    private static readonly UserTokenData defaultInstance = new UserTokenData().MakeReadOnly();
    private static readonly string[] _userTokenDataFieldNames = new string[] { "client_token_id", "user_id" };
    private static readonly uint[] _userTokenDataFieldTags = new uint[] { 16, 8 };
    public static UserTokenData DefaultInstance {
      get { return defaultInstance; }
    }

    public override UserTokenData DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override UserTokenData ThisMessage {
      get { return this; }
    }

    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }

    public const int ClientTokenIdFieldNumber = 2;
    private bool hasClientTokenId;
    private int clientTokenId_;
    public bool HasClientTokenId {
      get { return hasClientTokenId; }
    }
    public int ClientTokenId {
      get { return clientTokenId_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userTokenDataFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[1], UserId);
      }
      if (hasClientTokenId) {
        output.WriteInt32(2, field_names[0], ClientTokenId);
      }
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
      }
      if (hasClientTokenId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ClientTokenId);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUserId) {
        hash ^= userId_.GetHashCode();
      }
      if (hasClientTokenId) {
        hash ^= clientTokenId_.GetHashCode();
      }
      return hash;
    }

    public override bool Equals(object obj) {
      UserTokenData other = obj as UserTokenData;
      if (other == null) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasClientTokenId != other.hasClientTokenId || (hasClientTokenId && !clientTokenId_.Equals(other.clientTokenId_))) return false;
      return true;
    }

    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("user_id", hasUserId, userId_, writer);
      PrintField("client_token_id", hasClientTokenId, clientTokenId_, writer);
    }
    #endregion

    public static UserTokenData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserTokenData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserTokenData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserTokenData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserTokenData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserTokenData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserTokenData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserTokenData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserTokenData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserTokenData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserTokenData MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserTokenData prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<UserTokenData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserTokenData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private UserTokenData result;

      private UserTokenData PrepareBuilder() {
        if (resultIsReadOnly) {
          UserTokenData original = result;
          result = new UserTokenData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override UserTokenData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override UserTokenData DefaultInstanceForType {
        get { return global::Network.Packet.UserTokenData.DefaultInstance; }
      }

      public override UserTokenData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is UserTokenData) {
          return MergeFrom((UserTokenData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(UserTokenData other) {
        if (other == global::Network.Packet.UserTokenData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasClientTokenId) {
          ClientTokenId = other.ClientTokenId;
        }
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userTokenDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userTokenDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 16: {
              result.hasClientTokenId = input.ReadInt32(ref result.clientTokenId_);
              break;
            }
          }
        }

        return this;
      }


      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }

      public bool HasClientTokenId {
        get { return result.hasClientTokenId; }
      }
      public int ClientTokenId {
        get { return result.ClientTokenId; }
        set { SetClientTokenId(value); }
      }
      public Builder SetClientTokenId(int value) {
        PrepareBuilder();
        result.hasClientTokenId = true;
        result.clientTokenId_ = value;
        return this;
      }
      public Builder ClearClientTokenId() {
        PrepareBuilder();
        result.hasClientTokenId = false;
        result.clientTokenId_ = 0;
        return this;
      }
    }
    static UserTokenData() {
      object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Vector2Data : pb::GeneratedMessageLite<Vector2Data, Vector2Data.Builder> {
    private Vector2Data() { }
    private static readonly Vector2Data defaultInstance = new Vector2Data().MakeReadOnly();
    private static readonly string[] _vector2DataFieldNames = new string[] { "x", "y" };
    private static readonly uint[] _vector2DataFieldTags = new uint[] { 13, 21 };
    public static Vector2Data DefaultInstance {
      get { return defaultInstance; }
    }

    public override Vector2Data DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Vector2Data ThisMessage {
      get { return this; }
    }

    public const int XFieldNumber = 1;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }

    public const int YFieldNumber = 2;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _vector2DataFieldNames;
      if (hasX) {
        output.WriteFloat(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteFloat(2, field_names[1], Y);
      }
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeFloatSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Y);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasX) {
        hash ^= x_.GetHashCode();
      }
      if (hasY) {
        hash ^= y_.GetHashCode();
      }
      return hash;
    }

    public override bool Equals(object obj) {
      Vector2Data other = obj as Vector2Data;
      if (other == null) return false;
      if (hasX != other.hasX || (hasX && !x_.Equals(other.x_))) return false;
      if (hasY != other.hasY || (hasY && !y_.Equals(other.y_))) return false;
      return true;
    }

    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("x", hasX, x_, writer);
      PrintField("y", hasY, y_, writer);
    }
    #endregion

    public static Vector2Data ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector2Data ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector2Data ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector2Data ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector2Data ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector2Data ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Vector2Data ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Vector2Data ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Vector2Data ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector2Data ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Vector2Data MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Vector2Data prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Vector2Data, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Vector2Data cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Vector2Data result;

      private Vector2Data PrepareBuilder() {
        if (resultIsReadOnly) {
          Vector2Data original = result;
          result = new Vector2Data();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Vector2Data MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override Vector2Data DefaultInstanceForType {
        get { return global::Network.Packet.Vector2Data.DefaultInstance; }
      }

      public override Vector2Data BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Vector2Data) {
          return MergeFrom((Vector2Data) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Vector2Data other) {
        if (other == global::Network.Packet.Vector2Data.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_vector2DataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _vector2DataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 21: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
          }
        }

        return this;
      }


      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }

      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }
    }
    static Vector2Data() {
      object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Vector3Data : pb::GeneratedMessageLite<Vector3Data, Vector3Data.Builder> {
    private Vector3Data() { }
    private static readonly Vector3Data defaultInstance = new Vector3Data().MakeReadOnly();
    private static readonly string[] _vector3DataFieldNames = new string[] { "x", "y", "z" };
    private static readonly uint[] _vector3DataFieldTags = new uint[] { 13, 21, 29 };
    public static Vector3Data DefaultInstance {
      get { return defaultInstance; }
    }

    public override Vector3Data DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Vector3Data ThisMessage {
      get { return this; }
    }

    public const int XFieldNumber = 1;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }

    public const int YFieldNumber = 2;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }

    public const int ZFieldNumber = 3;
    private bool hasZ;
    private float z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public float Z {
      get { return z_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _vector3DataFieldNames;
      if (hasX) {
        output.WriteFloat(1, field_names[0], X);
      }
      if (hasY) {
        output.WriteFloat(2, field_names[1], Y);
      }
      if (hasZ) {
        output.WriteFloat(3, field_names[2], Z);
      }
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeFloatSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Z);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasX) {
        hash ^= x_.GetHashCode();
      }
      if (hasY) {
        hash ^= y_.GetHashCode();
      }
      if (hasZ) {
        hash ^= z_.GetHashCode();
      }
      return hash;
    }

    public override bool Equals(object obj) {
      Vector3Data other = obj as Vector3Data;
      if (other == null) return false;
      if (hasX != other.hasX || (hasX && !x_.Equals(other.x_))) return false;
      if (hasY != other.hasY || (hasY && !y_.Equals(other.y_))) return false;
      if (hasZ != other.hasZ || (hasZ && !z_.Equals(other.z_))) return false;
      return true;
    }

    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("x", hasX, x_, writer);
      PrintField("y", hasY, y_, writer);
      PrintField("z", hasZ, z_, writer);
    }
    #endregion

    public static Vector3Data ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector3Data ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector3Data ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector3Data ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector3Data ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector3Data ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Vector3Data ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Vector3Data ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Vector3Data ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector3Data ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Vector3Data MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Vector3Data prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Vector3Data, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Vector3Data cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Vector3Data result;

      private Vector3Data PrepareBuilder() {
        if (resultIsReadOnly) {
          Vector3Data original = result;
          result = new Vector3Data();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Vector3Data MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override Vector3Data DefaultInstanceForType {
        get { return global::Network.Packet.Vector3Data.DefaultInstance; }
      }

      public override Vector3Data BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Vector3Data) {
          return MergeFrom((Vector3Data) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Vector3Data other) {
        if (other == global::Network.Packet.Vector3Data.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_vector3DataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _vector3DataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 21: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
            case 29: {
              result.hasZ = input.ReadFloat(ref result.z_);
              break;
            }
          }
        }

        return this;
      }


      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }

      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }

      public bool HasZ {
        get { return result.hasZ; }
      }
      public float Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(float value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0F;
        return this;
      }
    }
    static Vector3Data() {
      object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Vector4Data : pb::GeneratedMessageLite<Vector4Data, Vector4Data.Builder> {
    private Vector4Data() { }
    private static readonly Vector4Data defaultInstance = new Vector4Data().MakeReadOnly();
    private static readonly string[] _vector4DataFieldNames = new string[] { "w", "x", "y", "z" };
    private static readonly uint[] _vector4DataFieldTags = new uint[] { 37, 13, 21, 29 };
    public static Vector4Data DefaultInstance {
      get { return defaultInstance; }
    }

    public override Vector4Data DefaultInstanceForType {
      get { return DefaultInstance; }
    }

    protected override Vector4Data ThisMessage {
      get { return this; }
    }

    public const int XFieldNumber = 1;
    private bool hasX;
    private float x_;
    public bool HasX {
      get { return hasX; }
    }
    public float X {
      get { return x_; }
    }

    public const int YFieldNumber = 2;
    private bool hasY;
    private float y_;
    public bool HasY {
      get { return hasY; }
    }
    public float Y {
      get { return y_; }
    }

    public const int ZFieldNumber = 3;
    private bool hasZ;
    private float z_;
    public bool HasZ {
      get { return hasZ; }
    }
    public float Z {
      get { return z_; }
    }

    public const int WFieldNumber = 4;
    private bool hasW;
    private float w_;
    public bool HasW {
      get { return hasW; }
    }
    public float W {
      get { return w_; }
    }

    public override bool IsInitialized {
      get {
        return true;
      }
    }

    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _vector4DataFieldNames;
      if (hasX) {
        output.WriteFloat(1, field_names[1], X);
      }
      if (hasY) {
        output.WriteFloat(2, field_names[2], Y);
      }
      if (hasZ) {
        output.WriteFloat(3, field_names[3], Z);
      }
      if (hasW) {
        output.WriteFloat(4, field_names[0], W);
      }
    }

    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }

    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (hasX) {
        size += pb::CodedOutputStream.ComputeFloatSize(1, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Y);
      }
      if (hasZ) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, Z);
      }
      if (hasW) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, W);
      }
      memoizedSerializedSize = size;
      return size;
    }
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasX) {
        hash ^= x_.GetHashCode();
      }
      if (hasY) {
        hash ^= y_.GetHashCode();
      }
      if (hasZ) {
        hash ^= z_.GetHashCode();
      }
      if (hasW) {
        hash ^= w_.GetHashCode();
      }
      return hash;
    }

    public override bool Equals(object obj) {
      Vector4Data other = obj as Vector4Data;
      if (other == null) return false;
      if (hasX != other.hasX || (hasX && !x_.Equals(other.x_))) return false;
      if (hasY != other.hasY || (hasY && !y_.Equals(other.y_))) return false;
      if (hasZ != other.hasZ || (hasZ && !z_.Equals(other.z_))) return false;
      if (hasW != other.hasW || (hasW && !w_.Equals(other.w_))) return false;
      return true;
    }

    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("x", hasX, x_, writer);
      PrintField("y", hasY, y_, writer);
      PrintField("z", hasZ, z_, writer);
      PrintField("w", hasW, w_, writer);
    }
    #endregion

    public static Vector4Data ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector4Data ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector4Data ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vector4Data ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vector4Data ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector4Data ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Vector4Data ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Vector4Data ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Vector4Data ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vector4Data ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Vector4Data MakeReadOnly() {
      return this;
    }

    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Vector4Data prototype) {
      return new Builder(prototype);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<Vector4Data, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Vector4Data cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }

      private bool resultIsReadOnly;
      private Vector4Data result;

      private Vector4Data PrepareBuilder() {
        if (resultIsReadOnly) {
          Vector4Data original = result;
          result = new Vector4Data();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }

      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }

      protected override Vector4Data MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }

      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }

      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }

      public override Vector4Data DefaultInstanceForType {
        get { return global::Network.Packet.Vector4Data.DefaultInstance; }
      }

      public override Vector4Data BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }

      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is Vector4Data) {
          return MergeFrom((Vector4Data) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }

      public override Builder MergeFrom(Vector4Data other) {
        if (other == global::Network.Packet.Vector4Data.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasX) {
          X = other.X;
        }
        if (other.HasY) {
          Y = other.Y;
        }
        if (other.HasZ) {
          Z = other.Z;
        }
        if (other.HasW) {
          W = other.W;
        }
        return this;
      }

      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }

      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_vector4DataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _vector4DataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasX = input.ReadFloat(ref result.x_);
              break;
            }
            case 21: {
              result.hasY = input.ReadFloat(ref result.y_);
              break;
            }
            case 29: {
              result.hasZ = input.ReadFloat(ref result.z_);
              break;
            }
            case 37: {
              result.hasW = input.ReadFloat(ref result.w_);
              break;
            }
          }
        }

        return this;
      }


      public bool HasX {
        get { return result.hasX; }
      }
      public float X {
        get { return result.X; }
        set { SetX(value); }
      }
      public Builder SetX(float value) {
        PrepareBuilder();
        result.hasX = true;
        result.x_ = value;
        return this;
      }
      public Builder ClearX() {
        PrepareBuilder();
        result.hasX = false;
        result.x_ = 0F;
        return this;
      }

      public bool HasY {
        get { return result.hasY; }
      }
      public float Y {
        get { return result.Y; }
        set { SetY(value); }
      }
      public Builder SetY(float value) {
        PrepareBuilder();
        result.hasY = true;
        result.y_ = value;
        return this;
      }
      public Builder ClearY() {
        PrepareBuilder();
        result.hasY = false;
        result.y_ = 0F;
        return this;
      }

      public bool HasZ {
        get { return result.hasZ; }
      }
      public float Z {
        get { return result.Z; }
        set { SetZ(value); }
      }
      public Builder SetZ(float value) {
        PrepareBuilder();
        result.hasZ = true;
        result.z_ = value;
        return this;
      }
      public Builder ClearZ() {
        PrepareBuilder();
        result.hasZ = false;
        result.z_ = 0F;
        return this;
      }

      public bool HasW {
        get { return result.hasW; }
      }
      public float W {
        get { return result.W; }
        set { SetW(value); }
      }
      public Builder SetW(float value) {
        PrepareBuilder();
        result.hasW = true;
        result.w_ = value;
        return this;
      }
      public Builder ClearW() {
        PrepareBuilder();
        result.hasW = false;
        result.w_ = 0F;
        return this;
      }
    }
    static Vector4Data() {
      object.ReferenceEquals(global::Network.Packet.Packet.Descriptor, null);
    }
  }

  #endregion

}

#endregion Designer generated code
